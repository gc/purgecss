{
  "version": 3,
  "sources": ["../../src/postcss-prefix-selector/index.js"],
  "sourcesContent": ["const prefixPlugin = (options = {}) => {\n  const prefix = options.prefix;\n  const prefixWithSpace = /\\s+$/.test(prefix) ? prefix : `${prefix} `;\n  const ignoreFiles = options.ignoreFiles ? [].concat(options.ignoreFiles) : [];\n  const includeFiles = options.includeFiles\n    ? [].concat(options.includeFiles)\n    : [];\n\n  return {\n    postcssPlugin: 'postcss-prefix-selector',\n    prepare(result) { \n      const root = result.root;\n      const file = root.source.input.file;\n\n      // Skip ignored or non included files\n      if (ignoreFiles.length && file && isFileInArray(file, ignoreFiles)) {\n        return;\n      } else if (includeFiles.length && file && !isFileInArray(file, includeFiles)) {\n        return;\n      }\n\n      return {\n        Rule(rule, { result }) {\n          const keyframeRules = [\n            'keyframes',\n            '-webkit-keyframes',\n            '-moz-keyframes',\n            '-o-keyframes',\n            '-ms-keyframes',\n          ];\n\n          if (rule.parent && keyframeRules.includes(rule.parent.name)) {\n            return;\n          }\n\n          rule.selectors = rule.selectors.map((selector) => {\n            if (options.exclude && excludeSelector(selector, options.exclude)) {\n              return selector;\n            }\n\n            if (options.transform) {\n              return options.transform(\n                prefix,\n                selector,\n                prefixWithSpace + selector,\n                root.source.input.file,\n                rule\n              );\n            }\n\n            // replace :root, body, html with the prefix\n            if ([':root', 'body', 'html'].some(globalSel => selector.startsWith(globalSel))) {\n              if (options.skipGlobalSelectors) {\n                return selector;\n              }\n\n              return selector.replace(/(html\\s+body|:root\\s+body|html|:root|body)/gm, prefix);\n            }\n\n            return prefixWithSpace + selector;\n          });\n        }\n      };\n    }\n  }\n}\n\nfunction isFileInArray(file, arr) {\n  return arr.some((ruleOrString) => {\n    if (ruleOrString instanceof RegExp) {\n      return ruleOrString.test(file);\n    }\n\n    return file.includes(ruleOrString);\n  });\n}\n\nfunction excludeSelector(selector, excludeArr) {\n  return excludeArr.some((excludeRule) => {\n    if (excludeRule instanceof RegExp) {\n      return excludeRule.test(selector);\n    }\n\n    return selector === excludeRule;\n  });\n};\n\nprefixPlugin.postcss = true\n\nmodule.exports = prefixPlugin;"],
  "mappings": ";;;;AAAA,IAAM,eAAe,wBAAC,UAAU,CAAC,MAAM;AACrC,QAAM,SAAS,QAAQ;AACvB,QAAM,kBAAkB,OAAO,KAAK,MAAM,IAAI,SAAS,GAAG,MAAM;AAChE,QAAM,cAAc,QAAQ,cAAc,CAAC,EAAE,OAAO,QAAQ,WAAW,IAAI,CAAC;AAC5E,QAAM,eAAe,QAAQ,eACzB,CAAC,EAAE,OAAO,QAAQ,YAAY,IAC9B,CAAC;AAEL,SAAO;AAAA,IACL,eAAe;AAAA,IACf,QAAQ,QAAQ;AACd,YAAM,OAAO,OAAO;AACpB,YAAM,OAAO,KAAK,OAAO,MAAM;AAG/B,UAAI,YAAY,UAAU,QAAQ,cAAc,MAAM,WAAW,GAAG;AAClE;AAAA,MACF,WAAW,aAAa,UAAU,QAAQ,CAAC,cAAc,MAAM,YAAY,GAAG;AAC5E;AAAA,MACF;AAEA,aAAO;AAAA,QACL,KAAK,MAAM,EAAE,QAAAA,QAAO,GAAG;AACrB,gBAAM,gBAAgB;AAAA,YACpB;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACF;AAEA,cAAI,KAAK,UAAU,cAAc,SAAS,KAAK,OAAO,IAAI,GAAG;AAC3D;AAAA,UACF;AAEA,eAAK,YAAY,KAAK,UAAU,IAAI,CAAC,aAAa;AAChD,gBAAI,QAAQ,WAAW,gBAAgB,UAAU,QAAQ,OAAO,GAAG;AACjE,qBAAO;AAAA,YACT;AAEA,gBAAI,QAAQ,WAAW;AACrB,qBAAO,QAAQ;AAAA,gBACb;AAAA,gBACA;AAAA,gBACA,kBAAkB;AAAA,gBAClB,KAAK,OAAO,MAAM;AAAA,gBAClB;AAAA,cACF;AAAA,YACF;AAGA,gBAAI,CAAC,SAAS,QAAQ,MAAM,EAAE,KAAK,eAAa,SAAS,WAAW,SAAS,CAAC,GAAG;AAC/E,kBAAI,QAAQ,qBAAqB;AAC/B,uBAAO;AAAA,cACT;AAEA,qBAAO,SAAS,QAAQ,gDAAgD,MAAM;AAAA,YAChF;AAEA,mBAAO,kBAAkB;AAAA,UAC3B,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF,GAjEqB;AAmErB,SAAS,cAAc,MAAM,KAAK;AAChC,SAAO,IAAI,KAAK,CAAC,iBAAiB;AAChC,QAAI,wBAAwB,QAAQ;AAClC,aAAO,aAAa,KAAK,IAAI;AAAA,IAC/B;AAEA,WAAO,KAAK,SAAS,YAAY;AAAA,EACnC,CAAC;AACH;AARS;AAUT,SAAS,gBAAgB,UAAU,YAAY;AAC7C,SAAO,WAAW,KAAK,CAAC,gBAAgB;AACtC,QAAI,uBAAuB,QAAQ;AACjC,aAAO,YAAY,KAAK,QAAQ;AAAA,IAClC;AAEA,WAAO,aAAa;AAAA,EACtB,CAAC;AACH;AARS;AAUT,aAAa,UAAU;AAEvB,OAAO,UAAU;",
  "names": ["result"]
}
