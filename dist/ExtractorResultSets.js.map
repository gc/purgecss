{
  "version": 3,
  "sources": ["../src/ExtractorResultSets.ts"],
  "sourcesContent": ["import type { ExtractorResult } from \"./types\";\n\nfunction mergeSets(into: Set<string>, from?: string[] | Set<string>): void {\n  if (from) {\n    from.forEach(into.add, into);\n  }\n}\n\n/**\n * @public\n */\nclass ExtractorResultSets {\n  private undetermined = new Set<string>();\n  private attrNames = new Set<string>();\n  private attrValues = new Set<string>();\n  private classes = new Set<string>();\n  private ids = new Set<string>();\n  private tags = new Set<string>();\n\n  constructor(er: ExtractorResult) {\n    this.merge(er);\n  }\n\n  merge(that: ExtractorResult | ExtractorResultSets): this {\n    if (Array.isArray(that)) {\n      mergeSets(this.undetermined, that);\n    } else if (that instanceof ExtractorResultSets) {\n      mergeSets(this.undetermined, that.undetermined);\n      mergeSets(this.attrNames, that.attrNames);\n      mergeSets(this.attrValues, that.attrValues);\n      mergeSets(this.classes, that.classes);\n      mergeSets(this.ids, that.ids);\n      mergeSets(this.tags, that.tags);\n    } else {\n      // ExtractorResultDetailed:\n      mergeSets(this.undetermined, that.undetermined);\n      if (that.attributes) {\n        mergeSets(this.attrNames, that.attributes.names);\n        mergeSets(this.attrValues, that.attributes.values);\n      }\n      mergeSets(this.classes, that.classes);\n      mergeSets(this.ids, that.ids);\n      mergeSets(this.tags, that.tags);\n    }\n    return this;\n  }\n\n  hasAttrName(name: string): boolean {\n    return this.attrNames.has(name) || this.undetermined.has(name);\n  }\n\n  private someAttrValue(predicate: (value: string) => boolean): boolean {\n    for (const val of this.attrValues) {\n      if (predicate(val)) return true;\n    }\n    for (const val of this.undetermined) {\n      if (predicate(val)) return true;\n    }\n    return false;\n  }\n\n  hasAttrPrefix(prefix: string): boolean {\n    return this.someAttrValue((value) => value.startsWith(prefix));\n  }\n\n  hasAttrSuffix(suffix: string): boolean {\n    return this.someAttrValue((value) => value.endsWith(suffix));\n  }\n\n  hasAttrSubstr(substr: string): boolean {\n    const wordSubstr = substr.trim().split(\" \");\n    return wordSubstr.every((word) =>\n      this.someAttrValue((value) => value.includes(word)),\n    );\n  }\n\n  hasAttrValue(value: string): boolean {\n    return this.attrValues.has(value) || this.undetermined.has(value);\n  }\n\n  hasClass(name: string): boolean {\n    return this.classes.has(name) || this.undetermined.has(name);\n  }\n\n  hasId(id: string): boolean {\n    return this.ids.has(id) || this.undetermined.has(id);\n  }\n\n  hasTag(tag: string): boolean {\n    return this.tags.has(tag) || this.undetermined.has(tag);\n  }\n}\n\nexport default ExtractorResultSets;\n"],
  "mappings": "+EAEA,SAASA,EAAUC,EAAmBC,EAAqC,CACrEA,GACFA,EAAK,QAAQD,EAAK,IAAKA,CAAI,CAE/B,CAJSE,EAAAH,EAAA,aAST,IAAMI,EAAN,MAAMC,CAAoB,CAQxB,YAAYC,EAAqB,CAPjC,KAAQ,aAAe,IAAI,IAC3B,KAAQ,UAAY,IAAI,IACxB,KAAQ,WAAa,IAAI,IACzB,KAAQ,QAAU,IAAI,IACtB,KAAQ,IAAM,IAAI,IAClB,KAAQ,KAAO,IAAI,IAGjB,KAAK,MAAMA,CAAE,CACf,CArBF,MAW0B,CAAAH,EAAA,4BAYxB,MAAMI,EAAmD,CACvD,OAAI,MAAM,QAAQA,CAAI,EACpBP,EAAU,KAAK,aAAcO,CAAI,EACxBA,aAAgBF,GACzBL,EAAU,KAAK,aAAcO,EAAK,YAAY,EAC9CP,EAAU,KAAK,UAAWO,EAAK,SAAS,EACxCP,EAAU,KAAK,WAAYO,EAAK,UAAU,EAC1CP,EAAU,KAAK,QAASO,EAAK,OAAO,EACpCP,EAAU,KAAK,IAAKO,EAAK,GAAG,EAC5BP,EAAU,KAAK,KAAMO,EAAK,IAAI,IAG9BP,EAAU,KAAK,aAAcO,EAAK,YAAY,EAC1CA,EAAK,aACPP,EAAU,KAAK,UAAWO,EAAK,WAAW,KAAK,EAC/CP,EAAU,KAAK,WAAYO,EAAK,WAAW,MAAM,GAEnDP,EAAU,KAAK,QAASO,EAAK,OAAO,EACpCP,EAAU,KAAK,IAAKO,EAAK,GAAG,EAC5BP,EAAU,KAAK,KAAMO,EAAK,IAAI,GAEzB,IACT,CAEA,YAAYC,EAAuB,CACjC,OAAO,KAAK,UAAU,IAAIA,CAAI,GAAK,KAAK,aAAa,IAAIA,CAAI,CAC/D,CAEQ,cAAcC,EAAgD,CACpE,QAAWC,KAAO,KAAK,WACrB,GAAID,EAAUC,CAAG,EAAG,MAAO,GAE7B,QAAWA,KAAO,KAAK,aACrB,GAAID,EAAUC,CAAG,EAAG,MAAO,GAE7B,MAAO,EACT,CAEA,cAAcC,EAAyB,CACrC,OAAO,KAAK,cAAeC,GAAUA,EAAM,WAAWD,CAAM,CAAC,CAC/D,CAEA,cAAcE,EAAyB,CACrC,OAAO,KAAK,cAAeD,GAAUA,EAAM,SAASC,CAAM,CAAC,CAC7D,CAEA,cAAcC,EAAyB,CAErC,OADmBA,EAAO,KAAK,EAAE,MAAM,GAAG,EACxB,MAAOC,GACvB,KAAK,cAAeH,GAAUA,EAAM,SAASG,CAAI,CAAC,CACpD,CACF,CAEA,aAAaH,EAAwB,CACnC,OAAO,KAAK,WAAW,IAAIA,CAAK,GAAK,KAAK,aAAa,IAAIA,CAAK,CAClE,CAEA,SAASJ,EAAuB,CAC9B,OAAO,KAAK,QAAQ,IAAIA,CAAI,GAAK,KAAK,aAAa,IAAIA,CAAI,CAC7D,CAEA,MAAMQ,EAAqB,CACzB,OAAO,KAAK,IAAI,IAAIA,CAAE,GAAK,KAAK,aAAa,IAAIA,CAAE,CACrD,CAEA,OAAOC,EAAsB,CAC3B,OAAO,KAAK,KAAK,IAAIA,CAAG,GAAK,KAAK,aAAa,IAAIA,CAAG,CACxD,CACF,EAEOC,EAAQd",
  "names": ["mergeSets", "into", "from", "__name", "ExtractorResultSets", "_ExtractorResultSets", "er", "that", "name", "predicate", "val", "prefix", "value", "suffix", "substr", "word", "id", "tag", "ExtractorResultSets_default"]
}
