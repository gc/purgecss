var u=Object.defineProperty;var n=(r,s)=>u(r,"name",{value:s,configurable:!0});var i=class{constructor(s){this.nodes=[];this.isUsed=!1;this.value=s}static{n(this,"VariableNode")}},c=class{constructor(){this.nodes=new Map;this.usedVariables=new Set;this.safelist=[]}static{n(this,"VariablesStructure")}addVariable(s){let{prop:e}=s;if(this.nodes.has(e)){let o=new i(s),t=this.nodes.get(e)||[];this.nodes.set(e,[...t,o])}else{let o=new i(s);this.nodes.set(e,[o])}}addVariableUsage(s,e){let{prop:o}=s,t=this.nodes.get(o);for(let a of e){let d=a[1];if(this.nodes.has(d)){let l=this.nodes.get(d);t?.forEach(p=>{l?.forEach(h=>p.nodes.push(h))})}}}addVariableUsageInProperties(s){for(let e of s){let o=e[1];this.usedVariables.add(o)}}setAsUsed(s){let e=this.nodes.get(s);if(e){let o=[...e];for(;o.length!==0;){let t=o.pop();t&&!t.isUsed&&(t.isUsed=!0,o.push(...t.nodes))}}}removeUnused(){for(let s of this.usedVariables){let e=this.nodes.get(s);if(e)for(let o of e){let t=o.value.value.matchAll(/var\((.+?)[,)]/g);for(let a of t)this.usedVariables.has(a[1])||this.usedVariables.add(a[1])}}for(let s of this.usedVariables)this.setAsUsed(s);for(let[s,e]of this.nodes)for(let o of e)!o.isUsed&&!this.isVariablesSafelisted(s)&&o.value.remove()}isVariablesSafelisted(s){return this.safelist.some(e=>typeof e=="string"?e===s:e.test(s))}};export{i as VariableNode,c as VariablesStructure};
//# sourceMappingURL=VariablesStructure.js.map
