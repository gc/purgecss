{
  "version": 3,
  "sources": ["../src/VariablesStructure.ts"],
  "sourcesContent": ["import type * as postcss from \"./postcss/postcss\";\nimport type { StringRegExpArray } from \"./types\";\n\n/**\n * @public\n */\nexport class VariableNode {\n  public nodes: VariableNode[] = [];\n  public value: postcss.Declaration;\n  public isUsed = false;\n\n  constructor(declaration: postcss.Declaration) {\n    this.value = declaration;\n  }\n}\n\n/**\n * @public\n */\nexport class VariablesStructure {\n  public nodes: Map<string, VariableNode[]> = new Map();\n  public usedVariables: Set<string> = new Set();\n  public safelist: StringRegExpArray = [];\n\n  addVariable(declaration: postcss.Declaration): void {\n    const { prop } = declaration;\n    if (!this.nodes.has(prop)) {\n      const node = new VariableNode(declaration);\n      this.nodes.set(prop, [node]);\n    } else {\n      const node = new VariableNode(declaration);\n      const variableNodes = this.nodes.get(prop) || [];\n      this.nodes.set(prop, [...variableNodes, node]);\n    }\n  }\n\n  addVariableUsage(\n    declaration: postcss.Declaration,\n    matchedVariables: IterableIterator<RegExpMatchArray>,\n  ): void {\n    const { prop } = declaration;\n    const nodes = this.nodes.get(prop);\n    for (const variableMatch of matchedVariables) {\n      // capturing group containing the variable is in index 1\n      const variableName = variableMatch[1];\n      if (this.nodes.has(variableName)) {\n        const usedVariableNodes = this.nodes.get(variableName);\n        nodes?.forEach((node) => {\n          usedVariableNodes?.forEach((usedVariableNode) =>\n            node.nodes.push(usedVariableNode),\n          );\n        });\n      }\n    }\n  }\n\n  addVariableUsageInProperties(\n    matchedVariables: IterableIterator<RegExpMatchArray>,\n  ): void {\n    for (const variableMatch of matchedVariables) {\n      // capturing group containing the variable is in index 1\n      const variableName = variableMatch[1];\n      this.usedVariables.add(variableName);\n    }\n  }\n\n  setAsUsed(variableName: string): void {\n    const nodes = this.nodes.get(variableName);\n    if (nodes) {\n      const queue = [...nodes];\n      while (queue.length !== 0) {\n        const currentNode = queue.pop();\n        if (currentNode && !currentNode.isUsed) {\n          currentNode.isUsed = true;\n          queue.push(...currentNode.nodes);\n        }\n      }\n    }\n  }\n\n  removeUnused(): void {\n    // check unordered usage\n    for (const used of this.usedVariables) {\n      const usedNodes = this.nodes.get(used);\n      if (usedNodes) {\n        for (const usedNode of usedNodes) {\n          const usedVariablesMatchesInDeclaration =\n            usedNode.value.value.matchAll(/var\\((.+?)[,)]/g);\n\n          for (const usage of usedVariablesMatchesInDeclaration) {\n            if (!this.usedVariables.has(usage[1])) {\n              this.usedVariables.add(usage[1]);\n            }\n          }\n        }\n      }\n    }\n\n    for (const used of this.usedVariables) {\n      this.setAsUsed(used);\n    }\n\n    for (const [name, declarations] of this.nodes) {\n      for (const declaration of declarations) {\n        if (!declaration.isUsed && !this.isVariablesSafelisted(name)) {\n          declaration.value.remove();\n        }\n      }\n    }\n  }\n\n  isVariablesSafelisted(variable: string): boolean {\n    return this.safelist.some((safelistItem) => {\n      return typeof safelistItem === \"string\"\n        ? safelistItem === variable\n        : safelistItem.test(variable);\n    });\n  }\n}\n"],
  "mappings": "+EAMO,IAAMA,EAAN,KAAmB,CAKxB,YAAYC,EAAkC,CAJ9C,KAAO,MAAwB,CAAC,EAEhC,KAAO,OAAS,GAGd,KAAK,MAAQA,CACf,CAbF,MAM0B,CAAAC,EAAA,qBAQ1B,EAKaC,EAAN,KAAyB,CAAzB,cACL,KAAO,MAAqC,IAAI,IAChD,KAAO,cAA6B,IAAI,IACxC,KAAO,SAA8B,CAAC,EAtBxC,MAmBgC,CAAAD,EAAA,2BAK9B,YAAYD,EAAwC,CAClD,GAAM,CAAE,KAAAG,CAAK,EAAIH,EACjB,GAAK,KAAK,MAAM,IAAIG,CAAI,EAGjB,CACL,IAAMC,EAAO,IAAIL,EAAaC,CAAW,EACnCK,EAAgB,KAAK,MAAM,IAAIF,CAAI,GAAK,CAAC,EAC/C,KAAK,MAAM,IAAIA,EAAM,CAAC,GAAGE,EAAeD,CAAI,CAAC,CAC/C,KAP2B,CACzB,IAAMA,EAAO,IAAIL,EAAaC,CAAW,EACzC,KAAK,MAAM,IAAIG,EAAM,CAACC,CAAI,CAAC,CAC7B,CAKF,CAEA,iBACEJ,EACAM,EACM,CACN,GAAM,CAAE,KAAAH,CAAK,EAAIH,EACXO,EAAQ,KAAK,MAAM,IAAIJ,CAAI,EACjC,QAAWK,KAAiBF,EAAkB,CAE5C,IAAMG,EAAeD,EAAc,CAAC,EACpC,GAAI,KAAK,MAAM,IAAIC,CAAY,EAAG,CAChC,IAAMC,EAAoB,KAAK,MAAM,IAAID,CAAY,EACrDF,GAAO,QAASH,GAAS,CACvBM,GAAmB,QAASC,GAC1BP,EAAK,MAAM,KAAKO,CAAgB,CAClC,CACF,CAAC,CACH,CACF,CACF,CAEA,6BACEL,EACM,CACN,QAAWE,KAAiBF,EAAkB,CAE5C,IAAMG,EAAeD,EAAc,CAAC,EACpC,KAAK,cAAc,IAAIC,CAAY,CACrC,CACF,CAEA,UAAUA,EAA4B,CACpC,IAAMF,EAAQ,KAAK,MAAM,IAAIE,CAAY,EACzC,GAAIF,EAAO,CACT,IAAMK,EAAQ,CAAC,GAAGL,CAAK,EACvB,KAAOK,EAAM,SAAW,GAAG,CACzB,IAAMC,EAAcD,EAAM,IAAI,EAC1BC,GAAe,CAACA,EAAY,SAC9BA,EAAY,OAAS,GACrBD,EAAM,KAAK,GAAGC,EAAY,KAAK,EAEnC,CACF,CACF,CAEA,cAAqB,CAEnB,QAAWC,KAAQ,KAAK,cAAe,CACrC,IAAMC,EAAY,KAAK,MAAM,IAAID,CAAI,EACrC,GAAIC,EACF,QAAWC,KAAYD,EAAW,CAChC,IAAME,EACJD,EAAS,MAAM,MAAM,SAAS,iBAAiB,EAEjD,QAAWE,KAASD,EACb,KAAK,cAAc,IAAIC,EAAM,CAAC,CAAC,GAClC,KAAK,cAAc,IAAIA,EAAM,CAAC,CAAC,CAGrC,CAEJ,CAEA,QAAWJ,KAAQ,KAAK,cACtB,KAAK,UAAUA,CAAI,EAGrB,OAAW,CAACK,EAAMC,CAAY,IAAK,KAAK,MACtC,QAAWpB,KAAeoB,EACpB,CAACpB,EAAY,QAAU,CAAC,KAAK,sBAAsBmB,CAAI,GACzDnB,EAAY,MAAM,OAAO,CAIjC,CAEA,sBAAsBqB,EAA2B,CAC/C,OAAO,KAAK,SAAS,KAAMC,GAClB,OAAOA,GAAiB,SAC3BA,IAAiBD,EACjBC,EAAa,KAAKD,CAAQ,CAC/B,CACH,CACF",
  "names": ["VariableNode", "declaration", "__name", "VariablesStructure", "prop", "node", "variableNodes", "matchedVariables", "nodes", "variableMatch", "variableName", "usedVariableNodes", "usedVariableNode", "queue", "currentNode", "used", "usedNodes", "usedNode", "usedVariablesMatchesInDeclaration", "usage", "name", "declarations", "variable", "safelistItem"]
}
