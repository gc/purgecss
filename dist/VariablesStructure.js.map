{
  "version": 3,
  "sources": ["../src/VariablesStructure.ts"],
  "sourcesContent": ["import type * as postcss from \"./postcss/postcss\";\nimport type { StringRegExpArray } from \"./types\";\n\n/**\n * @public\n */\nexport class VariableNode {\n  public nodes: VariableNode[] = [];\n  public value: postcss.Declaration;\n  public isUsed = false;\n\n  constructor(declaration: postcss.Declaration) {\n    this.value = declaration;\n  }\n}\n\n/**\n * @public\n */\nexport class VariablesStructure {\n  public nodes: Map<string, VariableNode[]> = new Map();\n  public usedVariables: Set<string> = new Set();\n  public safelist: StringRegExpArray = [];\n\n  addVariable(declaration: postcss.Declaration): void {\n    const { prop } = declaration;\n    if (!this.nodes.has(prop)) {\n      const node = new VariableNode(declaration);\n      this.nodes.set(prop, [node]);\n    } else {\n      const node = new VariableNode(declaration);\n      const variableNodes = this.nodes.get(prop) || [];\n      this.nodes.set(prop, [...variableNodes, node]);\n    }\n  }\n\n  addVariableUsage(\n    declaration: postcss.Declaration,\n    matchedVariables: IterableIterator<RegExpMatchArray>,\n  ): void {\n    const { prop } = declaration;\n    const nodes = this.nodes.get(prop);\n    for (const variableMatch of matchedVariables) {\n      // capturing group containing the variable is in index 1\n      const variableName = variableMatch[1];\n      if (this.nodes.has(variableName)) {\n        const usedVariableNodes = this.nodes.get(variableName);\n        nodes?.forEach((node) => {\n          usedVariableNodes?.forEach((usedVariableNode) =>\n            node.nodes.push(usedVariableNode),\n          );\n        });\n      }\n    }\n  }\n\n  addVariableUsageInProperties(\n    matchedVariables: IterableIterator<RegExpMatchArray>,\n  ): void {\n    for (const variableMatch of matchedVariables) {\n      // capturing group containing the variable is in index 1\n      const variableName = variableMatch[1];\n      this.usedVariables.add(variableName);\n    }\n  }\n\n  setAsUsed(variableName: string): void {\n    const nodes = this.nodes.get(variableName);\n    if (nodes) {\n      const queue = [...nodes];\n      while (queue.length !== 0) {\n        const currentNode = queue.pop();\n        if (currentNode && !currentNode.isUsed) {\n          currentNode.isUsed = true;\n          queue.push(...currentNode.nodes);\n        }\n      }\n    }\n  }\n\n  removeUnused(): void {\n    // check unordered usage\n    for (const used of this.usedVariables) {\n      const usedNodes = this.nodes.get(used);\n      if (usedNodes) {\n        for (const usedNode of usedNodes) {\n          const usedVariablesMatchesInDeclaration =\n            usedNode.value.value.matchAll(/var\\((.+?)[,)]/g);\n\n          for (const usage of usedVariablesMatchesInDeclaration) {\n            if (!this.usedVariables.has(usage[1])) {\n              this.usedVariables.add(usage[1]);\n            }\n          }\n        }\n      }\n    }\n\n    for (const used of this.usedVariables) {\n      this.setAsUsed(used);\n    }\n\n    for (const [name, declarations] of this.nodes) {\n      for (const declaration of declarations) {\n        if (!declaration.isUsed && !this.isVariablesSafelisted(name)) {\n          declaration.value.remove();\n        }\n      }\n    }\n  }\n\n  isVariablesSafelisted(variable: string): boolean {\n    return this.safelist.some((safelistItem) => {\n      return typeof safelistItem === \"string\"\n        ? safelistItem === variable\n        : safelistItem.test(variable);\n    });\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
