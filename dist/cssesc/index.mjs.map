{
  "version": 3,
  "sources": ["../../src/cssesc/index.js"],
  "sourcesContent": ["const object = {};\r\nconst hasOwnProperty = object.hasOwnProperty;\r\nconst merge = (options, defaults) => {\r\n    if (!options) {\r\n        return defaults;\r\n    }\r\n    const result = {};\r\n    for (const key in defaults) {\r\n        // `if (defaults.hasOwnProperty(key) { \u2026 }` is not needed here, since\r\n        // only recognized option names are used.\r\n        result[key] = hasOwnProperty.call(options, key)\r\n            ? options[key]\r\n            : defaults[key];\r\n    }\r\n    return result;\r\n};\r\nconst regexAnySingleEscape = /<%= anySingleEscape %>/;\r\nconst regexSingleEscape = /<%= singleEscapes %>/;\r\nconst regexAlwaysEscape = /['\"\\\\]/;\r\nconst regexExcessiveSpaces = /(^|\\\\+)?(\\\\[A-F0-9]{1,6})\\x20(?![a-fA-F0-9\\x20])/g;\r\n/*@__NO_SIDE_EFFECTS__*/\r\nconst cssesc = (string, options) => {\r\n    options = merge(options, cssesc.options);\r\n    if (options.quotes != 'single' && options.quotes != 'double') {\r\n        options.quotes = 'single';\r\n    }\r\n    const quote = options.quotes == 'double' ? '\"' : '\\'';\r\n    const isIdentifier = options.isIdentifier;\r\n    const firstChar = string.charAt(0);\r\n    let output = '';\r\n    let counter = 0;\r\n    const length = string.length;\r\n    while (counter < length) {\r\n        const character = string.charAt(counter++);\r\n        let codePoint = character.charCodeAt();\r\n        let value;\r\n        // If it\u2019s not a printable ASCII character\u2026\r\n        if (codePoint < 0x20 || codePoint > 0x7E) {\r\n            if (codePoint >= 0xD800 && codePoint <= 0xDBFF && counter < length) {\r\n                // It\u2019s a high surrogate, and there is a next character.\r\n                const extra = string.charCodeAt(counter++);\r\n                if ((extra & 0xFC00) == 0xDC00) { // next character is low surrogate\r\n                    codePoint = ((codePoint & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000;\r\n                }\r\n                else {\r\n                    // It\u2019s an unmatched surrogate; only append this code unit, in case\r\n                    // the next code unit is the high surrogate of a surrogate pair.\r\n                    counter--;\r\n                }\r\n            }\r\n            value = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\r\n        }\r\n        else {\r\n            if (options.escapeEverything) {\r\n                if (regexAnySingleEscape.test(character)) {\r\n                    value = '\\\\' + character;\r\n                }\r\n                else {\r\n                    value = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\r\n                }\r\n            }\r\n            else if (/[\\t\\n\\f\\r\\x0B]/.test(character)) {\r\n                value = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\r\n            }\r\n            else if (character == '\\\\' ||\r\n                (!isIdentifier &&\r\n                    ((character == '\"' && quote == character) ||\r\n                        (character == '\\'' && quote == character))) ||\r\n                (isIdentifier && regexSingleEscape.test(character))) {\r\n                value = '\\\\' + character;\r\n            }\r\n            else {\r\n                value = character;\r\n            }\r\n        }\r\n        output += value;\r\n    }\r\n    if (isIdentifier) {\r\n        if (/^-[-\\d]/.test(output)) {\r\n            output = '\\\\-' + output.slice(1);\r\n        }\r\n        else if (/\\d/.test(firstChar)) {\r\n            output = '\\\\3' + firstChar + ' ' + output.slice(1);\r\n        }\r\n    }\r\n    // Remove spaces after `\\HEX` escapes that are not followed by a hex digit,\r\n    // since they\u2019re redundant. Note that this is only possible if the escape\r\n    // sequence isn\u2019t preceded by an odd number of backslashes.\r\n    output = output.replace(regexExcessiveSpaces, ($0, $1, $2) => {\r\n        if ($1 && $1.length % 2) {\r\n            // It\u2019s not safe to remove the space, so don\u2019t.\r\n            return $0;\r\n        }\r\n        // Strip the space.\r\n        return ($1 || '') + $2;\r\n    });\r\n    if (!isIdentifier && options.wrap) {\r\n        return quote + output + quote;\r\n    }\r\n    return output;\r\n};\r\n// Expose default options (so they can be overridden globally).\r\ncssesc.options = {\r\n    'escapeEverything': false,\r\n    'isIdentifier': false,\r\n    'quotes': 'single',\r\n    'wrap': false\r\n};\r\nexport default cssesc;\r\n"],
  "mappings": ";;;;AAAA,IAAM,SAAS,CAAC;AAChB,IAAM,iBAAiB,OAAO;AAC9B,IAAM,QAAQ,wBAAC,SAAS,aAAa;AACjC,MAAI,CAAC,SAAS;AACV,WAAO;AAAA,EACX;AACA,QAAM,SAAS,CAAC;AAChB,aAAW,OAAO,UAAU;AAGxB,WAAO,GAAG,IAAI,eAAe,KAAK,SAAS,GAAG,IACxC,QAAQ,GAAG,IACX,SAAS,GAAG;AAAA,EACtB;AACA,SAAO;AACX,GAbc;AAcd,IAAM,uBAAuB;AAC7B,IAAM,oBAAoB;AAE1B,IAAM,uBAAuB;AAE7B,IAAM,SAAS,mDAAC,QAAQ,YAAY;AAChC,YAAU,MAAM,SAAS,OAAO,OAAO;AACvC,MAAI,QAAQ,UAAU,YAAY,QAAQ,UAAU,UAAU;AAC1D,YAAQ,SAAS;AAAA,EACrB;AACA,QAAM,QAAQ,QAAQ,UAAU,WAAW,MAAM;AACjD,QAAM,eAAe,QAAQ;AAC7B,QAAM,YAAY,OAAO,OAAO,CAAC;AACjC,MAAI,SAAS;AACb,MAAI,UAAU;AACd,QAAM,SAAS,OAAO;AACtB,SAAO,UAAU,QAAQ;AACrB,UAAM,YAAY,OAAO,OAAO,SAAS;AACzC,QAAI,YAAY,UAAU,WAAW;AACrC,QAAI;AAEJ,QAAI,YAAY,MAAQ,YAAY,KAAM;AACtC,UAAI,aAAa,SAAU,aAAa,SAAU,UAAU,QAAQ;AAEhE,cAAM,QAAQ,OAAO,WAAW,SAAS;AACzC,aAAK,QAAQ,UAAW,OAAQ;AAC5B,wBAAc,YAAY,SAAU,OAAO,QAAQ,QAAS;AAAA,QAChE,OACK;AAGD;AAAA,QACJ;AAAA,MACJ;AACA,cAAQ,OAAO,UAAU,SAAS,EAAE,EAAE,YAAY,IAAI;AAAA,IAC1D,OACK;AACD,UAAI,QAAQ,kBAAkB;AAC1B,YAAI,qBAAqB,KAAK,SAAS,GAAG;AACtC,kBAAQ,OAAO;AAAA,QACnB,OACK;AACD,kBAAQ,OAAO,UAAU,SAAS,EAAE,EAAE,YAAY,IAAI;AAAA,QAC1D;AAAA,MACJ,WACS,iBAAiB,KAAK,SAAS,GAAG;AACvC,gBAAQ,OAAO,UAAU,SAAS,EAAE,EAAE,YAAY,IAAI;AAAA,MAC1D,WACS,aAAa,QACjB,CAAC,iBACI,aAAa,OAAO,SAAS,aAC1B,aAAa,OAAQ,SAAS,cACtC,gBAAgB,kBAAkB,KAAK,SAAS,GAAI;AACrD,gBAAQ,OAAO;AAAA,MACnB,OACK;AACD,gBAAQ;AAAA,MACZ;AAAA,IACJ;AACA,cAAU;AAAA,EACd;AACA,MAAI,cAAc;AACd,QAAI,UAAU,KAAK,MAAM,GAAG;AACxB,eAAS,QAAQ,OAAO,MAAM,CAAC;AAAA,IACnC,WACS,KAAK,KAAK,SAAS,GAAG;AAC3B,eAAS,QAAQ,YAAY,MAAM,OAAO,MAAM,CAAC;AAAA,IACrD;AAAA,EACJ;AAIA,WAAS,OAAO,QAAQ,sBAAsB,CAAC,IAAI,IAAI,OAAO;AAC1D,QAAI,MAAM,GAAG,SAAS,GAAG;AAErB,aAAO;AAAA,IACX;AAEA,YAAQ,MAAM,MAAM;AAAA,EACxB,CAAC;AACD,MAAI,CAAC,gBAAgB,QAAQ,MAAM;AAC/B,WAAO,QAAQ,SAAS;AAAA,EAC5B;AACA,SAAO;AACX,GA/Ee;AAiFf,OAAO,UAAU;AAAA,EACb,oBAAoB;AAAA,EACpB,gBAAgB;AAAA,EAChB,UAAU;AAAA,EACV,QAAQ;AACZ;AACA,IAAO,iBAAQ;",
  "names": []
}
