{
  "version": 3,
  "sources": ["../../src/css-tokenizer/interfaces/error.ts", "../../src/css-tokenizer/util/clone-tokens.ts", "../../src/css-tokenizer/stringify.ts", "../../src/css-tokenizer/code-points/code-points.ts", "../../src/css-tokenizer/checks/four-code-points-would-start-cdo.ts", "../../src/css-tokenizer/code-points/ranges.ts", "../../src/css-tokenizer/checks/two-code-points-are-valid-escape.ts", "../../src/css-tokenizer/checks/three-code-points-would-start-ident-sequence.ts", "../../src/css-tokenizer/checks/three-code-points-would-start-number.ts", "../../src/css-tokenizer/checks/two-code-points-start-comment.ts", "../../src/css-tokenizer/checks/three-code-points-would-start-cdc.ts", "../../src/css-tokenizer/interfaces/token.ts", "../../src/css-tokenizer/consume/comment.ts", "../../src/css-tokenizer/consume/escaped-code-point.ts", "../../src/css-tokenizer/consume/ident-sequence.ts", "../../src/css-tokenizer/consume/hash-token.ts", "../../src/css-tokenizer/consume/number.ts", "../../src/css-tokenizer/consume/numeric-token.ts", "../../src/css-tokenizer/consume/whitespace-token.ts", "../../src/css-tokenizer/reader.ts", "../../src/css-tokenizer/consume/string-token.ts", "../../src/css-tokenizer/checks/matches-url-ident.ts", "../../src/css-tokenizer/consume/bad-url.ts", "../../src/css-tokenizer/consume/url-token.ts", "../../src/css-tokenizer/consume/ident-like-token.ts", "../../src/css-tokenizer/checks/three-code-points-would-start-unicode-range.ts", "../../src/css-tokenizer/consume/unicode-range-token.ts", "../../src/css-tokenizer/tokenizer.ts", "../../src/css-tokenizer/util/mutations.ts", "../../src/css-tokenizer/util/type-predicates.ts"],
  "sourcesContent": ["import type { CSSToken } from \"./token\";\n\n/**\n * The CSS Tokenizer is forgiving and will never throw on invalid input.\n * Any errors are reported through the `onParseError` callback.\n */\nexport class ParseError extends Error {\n\t/** The index of the start character of the current token. */\n\tsourceStart: number;\n\t/** The index of the end character of the current token. */\n\tsourceEnd: number;\n\t/** The parser steps that preceded the error. */\n\tparserState: Array<string>;\n\n\tconstructor(message: string, sourceStart: number, sourceEnd: number, parserState: Array<string>) {\n\t\tsuper(message);\n\t\tthis.name = 'ParseError';\n\n\t\tthis.sourceStart = sourceStart;\n\t\tthis.sourceEnd = sourceEnd;\n\t\tthis.parserState = parserState;\n\t}\n}\n\nexport class ParseErrorWithToken extends ParseError {\n\t/** The associated token. */\n\ttoken: CSSToken;\n\n\tconstructor(message: string, sourceStart: number, sourceEnd: number, parserState: Array<string>, token: CSSToken) {\n\t\tsuper(message, sourceStart, sourceEnd, parserState);\n\n\t\tthis.token = token;\n\t}\n}\n\nexport const ParseErrorMessage = {\n\tUnexpectedNewLineInString: 'Unexpected newline while consuming a string token.',\n\tUnexpectedEOFInString: 'Unexpected EOF while consuming a string token.',\n\tUnexpectedEOFInComment: 'Unexpected EOF while consuming a comment.',\n\tUnexpectedEOFInURL: 'Unexpected EOF while consuming a url token.',\n\tUnexpectedEOFInEscapedCodePoint: 'Unexpected EOF while consuming an escaped code point.',\n\tUnexpectedCharacterInURL: 'Unexpected character while consuming a url token.',\n\tInvalidEscapeSequenceInURL: 'Invalid escape sequence while consuming a url token.',\n\tInvalidEscapeSequenceAfterBackslash: 'Invalid escape sequence after \"\\\\\"',\n}\n", "import type { CSSToken } from '../interfaces/token';\n\nconst supportsStructuredClone = (typeof globalThis !== 'undefined') && 'structuredClone' in globalThis;\n\n/**\n * Deep clone a list of tokens.\n * Useful for mutations without altering the original list.\n */\nexport function cloneTokens(tokens: Array<CSSToken>): Array<CSSToken> {\n\tif (supportsStructuredClone) {\n\t\treturn structuredClone(tokens);\n\t}\n\n\treturn JSON.parse(JSON.stringify(tokens)) as Array<CSSToken>;\n}\n", "import type { CSSToken } from './interfaces/token';\n\n/**\n * Concatenate the string representation of a list of tokens.\n * This is not a proper serializer that will handle escaping and whitespace.\n * It only produces valid CSS for a token list that is also valid.\n */\nexport function stringify(...tokens: Array<CSSToken>): string {\n\tlet buffer = '';\n\tfor (let i = 0; i < tokens.length; i++) {\n\t\tbuffer = buffer + tokens[i][1];\n\t}\n\n\treturn buffer;\n}\n", "/** ' */\nexport const APOSTROPHE = 0x0027;\n/** * */\nexport const ASTERISK = 0x002a;\n/** \\b */\nexport const BACKSPACE = 0x008;\n/** \\r */\nexport const CARRIAGE_RETURN = 0x00d;\n/** \\t */\nexport const CHARACTER_TABULATION = 0x009;\n/** : */\nexport const COLON = 0x003a;\n/** , */\nexport const COMMA = 0x002c;\n/** @ */\nexport const COMMERCIAL_AT = 0x0040;\n/** \\x7F */\nexport const DELETE = 0x007f;\n/** ! */\nexport const EXCLAMATION_MARK = 0x0021;\n/** \\f */\nexport const FORM_FEED = 0x000c;\n/** . */\nexport const FULL_STOP = 0x002e;\n/** > */\nexport const GREATER_THAN_SIGN = 0x003e;\n/** - */\nexport const HYPHEN_MINUS = 0x002d;\n/** \\x1F */\nexport const INFORMATION_SEPARATOR_ONE = 0x001f;\n/** E */\nexport const LATIN_CAPITAL_LETTER_E = 0x0045;\n/** e */\nexport const LATIN_SMALL_LETTER_E = 0x0065;\n/** { */\nexport const LEFT_CURLY_BRACKET = 0x007b;\n/** ( */\nexport const LEFT_PARENTHESIS = 0x0028;\n/** [ */\nexport const LEFT_SQUARE_BRACKET = 0x005b;\n/** < */\nexport const LESS_THAN_SIGN = 0x003c;\n/** \\n */\nexport const LINE_FEED = 0x00a;\n/** \\v */\nexport const LINE_TABULATION = 0x00b;\n/** _ */\nexport const LOW_LINE = 0x005f;\n/** \\x10FFFF */\nexport const MAXIMUM_ALLOWED_CODEPOINT = 0x10FFFF;\n/** \\x00 */\nexport const NULL = 0x000;\n/** # */\nexport const NUMBER_SIGN = 0x0023;\n/** % */\nexport const PERCENTAGE_SIGN = 0x0025;\n/** + */\nexport const PLUS_SIGN = 0x002b;\n/** \" */\nexport const QUOTATION_MARK = 0x0022;\n/** \uFFFD */\nexport const REPLACEMENT_CHARACTER = 0xFFFD;\n/** \\ */\nexport const REVERSE_SOLIDUS = 0x005c;\n/** } */\nexport const RIGHT_CURLY_BRACKET = 0x007d;\n/** ) */\nexport const RIGHT_PARENTHESIS = 0x0029;\n/** ] */\nexport const RIGHT_SQUARE_BRACKET = 0x005d;\n/** ; */\nexport const SEMICOLON = 0x003b;\n/** \\u0E */\nexport const SHIFT_OUT = 0x00e;\n/** / */\nexport const SOLIDUS = 0x002f;\n/** \\u20 */\nexport const SPACE = 0x0020;\n/** u */\nexport const LATIN_SMALL_LETTER_U = 0x0075;\n/** U */\nexport const LATIN_CAPITAL_LETTER_U = 0x0055;\n/** r */\nexport const LATIN_SMALL_LETTER_R = 0x0072;\n/** R */\nexport const LATIN_CAPITAL_LETTER_R = 0x0052;\n/** l */\nexport const LATIN_SMALL_LETTER_L = 0x006c;\n/** L */\nexport const LATIN_CAPITAL_LETTER_L = 0x004c;\n/** ? */\nexport const QUESTION_MARK = 0x003f;\n/** 0 */\nexport const DIGIT_ZERO = 0x0030;\n/** F */\nexport const LATIN_CAPITAL_LETTER_F = 0x0046;\n", "import { EXCLAMATION_MARK, HYPHEN_MINUS, LESS_THAN_SIGN } from '../code-points/code-points';\nimport type { CodePointReader } from '../interfaces/code-point-reader';\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#consume-token\nexport function checkIfFourCodePointsWouldStartCDO(reader: CodePointReader): boolean {\n\treturn reader.source.codePointAt(reader.cursor) === LESS_THAN_SIGN && reader.source.codePointAt(reader.cursor + 1) === EXCLAMATION_MARK && reader.source.codePointAt(reader.cursor + 2) === HYPHEN_MINUS && reader.source.codePointAt(reader.cursor + 3) === HYPHEN_MINUS;\n}\n", "import { BACKSPACE, DELETE, INFORMATION_SEPARATOR_ONE, LINE_TABULATION, LOW_LINE, HYPHEN_MINUS, NULL, SHIFT_OUT, LINE_FEED, CARRIAGE_RETURN, FORM_FEED, SPACE, CHARACTER_TABULATION } from './code-points';\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#tokenizer-definitions\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#digit\nexport function isDigitCodePoint(search: number): boolean {\n\treturn search >= 0x0030 && search <= 0x0039;\n}\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#uppercase-letter\nfunction isUppercaseLetterCodePoint(search: number): boolean {\n\treturn search >= 0x0041 && search <= 0x005a;\n}\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#lowercase-letter\nfunction isLowercaseLetterCodePoint(search: number): boolean {\n\treturn search >= 0x0061 && search <= 0x007a;\n}\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#hex-digit\nexport function isHexDigitCodePoint(search: number): boolean {\n\treturn (\n\t\t(search >= 0x0030 && search <= 0x0039) || // 0 .. 9\n\t\t(search >= 0x0061 && search <= 0x0066) || // a .. f\n\t\t(search >= 0x0041 && search <= 0x0046)    // A .. F\n\t);\n}\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#letter\nfunction isLetterCodePoint(search: number): boolean {\n\treturn isLowercaseLetterCodePoint(search) || isUppercaseLetterCodePoint(search);\n}\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#ident-start-code-point\nexport function isIdentStartCodePoint(search: number): boolean {\n\treturn isLetterCodePoint(search) || isNonASCII_IdentCodePoint(search) || search === LOW_LINE;\n}\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#ident-code-point\nexport function isIdentCodePoint(search: number): boolean {\n\treturn isIdentStartCodePoint(search) || isDigitCodePoint(search) || search === HYPHEN_MINUS;\n}\n\n// https://drafts.csswg.org/css-syntax/#non-ascii-ident-code-point\nfunction isNonASCII_IdentCodePoint(search: number): boolean {\n\tif (\n\t\tsearch === 0x00B7 ||\n\t\tsearch === 0x200C ||\n\t\tsearch === 0x200D ||\n\t\tsearch === 0x203F ||\n\t\tsearch === 0x2040 ||\n\t\tsearch === 0x200C\n\t) {\n\t\treturn true;\n\t}\n\n\tif (\n\t\t(0x00C0 <= search && search <= 0x00D6) ||\n\t\t(0x00D8 <= search && search <= 0x00F6) ||\n\t\t(0x00F8 <= search && search <= 0x037D) ||\n\t\t(0x037F <= search && search <= 0x1FFF) ||\n\t\t(0x2070 <= search && search <= 0x218F) ||\n\t\t(0x2C00 <= search && search <= 0x2FEF) ||\n\t\t(0x3001 <= search && search <= 0xD7FF) ||\n\t\t(0xF900 <= search && search <= 0xFDCF) ||\n\t\t(0xFDF0 <= search && search <= 0xFFFD)\n\t) {\n\t\treturn true;\n\t}\n\n\t// Input preprocessing\n\tif (search === 0x000) {\n\t\treturn true;\n\t} else if (isSurrogate(search)) {\n\t\treturn true;\n\t}\n\n\treturn search >= 0x10000;\n}\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#non-printable-code-point\nexport function isNonPrintableCodePoint(search: number): boolean {\n\treturn (\n\t\t(search === LINE_TABULATION) ||\n\t\t(search === DELETE) ||\n\t\t(NULL <= search && search <= BACKSPACE) ||\n\t\t(SHIFT_OUT <= search && search <= INFORMATION_SEPARATOR_ONE)\n\t);\n}\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#whitespace\nexport function isNewLine(search: number): boolean {\n\treturn search === LINE_FEED || search === CARRIAGE_RETURN || search === FORM_FEED;\n}\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#whitespace\nexport function isWhitespace(search: number): boolean {\n\treturn search === SPACE || search === LINE_FEED || search === CHARACTER_TABULATION || search === CARRIAGE_RETURN || search === FORM_FEED;\n}\n\n// https://infra.spec.whatwg.org/#surrogate\nexport function isSurrogate(search: number): boolean {\n\treturn search >= 0xd800 && search <= 0xdfff;\n}\n", "import { REVERSE_SOLIDUS } from '../code-points/code-points';\nimport { isNewLine } from '../code-points/ranges';\nimport type { CodePointReader } from '../interfaces/code-point-reader';\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#starts-with-a-valid-escape\nexport function checkIfTwoCodePointsAreAValidEscape(reader: CodePointReader): boolean {\n\treturn (\n\t\t// If the first code point is not U+005C REVERSE SOLIDUS (\\), return false.\n\t\treader.source.codePointAt(reader.cursor) === REVERSE_SOLIDUS &&\n\t\t// Otherwise, if the second code point is a newline, return false.\n\t\t!isNewLine(reader.source.codePointAt(reader.cursor + 1) ?? -1)\n\t);\n}\n", "import { HYPHEN_MINUS, REVERSE_SOLIDUS } from '../code-points/code-points';\nimport { isIdentStartCodePoint, isNewLine } from '../code-points/ranges';\nimport type { CodePointReader } from '../interfaces/code-point-reader';\nimport type { Context } from '../interfaces/context';\nimport { checkIfTwoCodePointsAreAValidEscape } from './two-code-points-are-valid-escape';\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#would-start-an-identifier\nexport function checkIfThreeCodePointsWouldStartAnIdentSequence(ctx: Context, reader: CodePointReader): boolean {\n\t// // U+002D HYPHEN-MINUS\n\tif (reader.source.codePointAt(reader.cursor) === HYPHEN_MINUS) {\n\t\t// If the second code point is a U+002D HYPHEN-MINUS return true\n\t\tif (reader.source.codePointAt(reader.cursor + 1) === HYPHEN_MINUS) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// If the second code point is an ident-start code point return true\n\t\tif (isIdentStartCodePoint(reader.source.codePointAt(reader.cursor + 1) ?? -1)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// If the second and third code points are a valid escape return true\n\t\tif (reader.source.codePointAt(reader.cursor + 1) === REVERSE_SOLIDUS && !isNewLine(reader.source.codePointAt(reader.cursor + 2) ?? -1)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t// ident-start code point\n\t// Return true.\n\tif (isIdentStartCodePoint(reader.source.codePointAt(reader.cursor) ?? -1)) {\n\t\treturn true;\n\t}\n\n\t// U+005C REVERSE SOLIDUS (\\)\n\treturn checkIfTwoCodePointsAreAValidEscape(reader);\n}\n", "import { FULL_STOP, HYPHEN_MINUS, PLUS_SIGN } from '../code-points/code-points';\nimport { isDigitCodePoint } from '../code-points/ranges';\nimport type { CodePointReader } from '../interfaces/code-point-reader';\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#starts-with-a-number\nexport function checkIfThreeCodePointsWouldStartANumber(reader: CodePointReader): boolean {\n\tif (reader.source.codePointAt(reader.cursor) === PLUS_SIGN || reader.source.codePointAt(reader.cursor) === HYPHEN_MINUS) { // U+002B PLUS SIGN (+) or U+002D HYPHEN-MINUS (-)\n\t\t// If the second code point is a digit, return true.\n\t\tif (isDigitCodePoint(reader.source.codePointAt(reader.cursor + 1) ?? -1)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Otherwise, if the second code point is a U+002E FULL STOP (.)\n\t\tif (reader.source.codePointAt(reader.cursor + 1) === FULL_STOP) {\n\t\t\t// and the third code point is a digit, return true.\n\t\t\treturn isDigitCodePoint(reader.source.codePointAt(reader.cursor + 2) ?? -1);\n\t\t}\n\n\t\t// Otherwise, return false.\n\t\treturn false;\n\n\t} else if (reader.source.codePointAt(reader.cursor) === FULL_STOP) { // U+002E FULL STOP (.)\n\t\t// If the second code point is a digit, return true.\n\t\t// Otherwise, return false.\n\t\treturn isDigitCodePoint(reader.source.codePointAt(reader.cursor + 1) ?? -1);\n\t}\n\n\treturn isDigitCodePoint(reader.source.codePointAt(reader.cursor) ?? -1); // digit\n}\n", "import { ASTERISK, SOLIDUS } from '../code-points/code-points';\nimport type { CodePointReader } from '../interfaces/code-point-reader';\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#consume-comments\nexport function checkIfTwoCodePointsStartAComment(reader: CodePointReader): boolean {\n\treturn (\n\t\treader.source.codePointAt(reader.cursor) === SOLIDUS &&\n\t\treader.source.codePointAt(reader.cursor + 1) === ASTERISK\n\t);\n}\n", "import { GREATER_THAN_SIGN, HYPHEN_MINUS } from '../code-points/code-points';\nimport type { CodePointReader } from '../interfaces/code-point-reader';\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#consume-token\nexport function checkIfThreeCodePointsWouldStartCDC(reader: CodePointReader): boolean {\n\treturn reader.source.codePointAt(reader.cursor) === HYPHEN_MINUS && reader.source.codePointAt(reader.cursor + 1) === HYPHEN_MINUS && reader.source.codePointAt(reader.cursor + 2) === GREATER_THAN_SIGN;\n}\n", "/* eslint-disable @typescript-eslint/no-empty-object-type */\n\n/**\n * All possible CSS token types\n */\nexport enum TokenType {\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#comment-diagram}\n\t */\n\tComment = 'comment',\n\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-at-keyword-token}\n\t */\n\tAtKeyword = 'at-keyword-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-bad-string-token}\n\t */\n\tBadString = 'bad-string-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-bad-url-token}\n\t */\n\tBadURL = 'bad-url-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-cdc-token}\n\t */\n\tCDC = 'CDC-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-cdo-token}\n\t */\n\tCDO = 'CDO-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-colon-token}\n\t */\n\tColon = 'colon-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-comma-token}\n\t */\n\tComma = 'comma-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-delim-token}\n\t */\n\tDelim = 'delim-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-dimension-token}\n\t */\n\tDimension = 'dimension-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-eof-token}\n\t */\n\tEOF = 'EOF-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-function-token}\n\t */\n\tFunction = 'function-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-hash-token}\n\t */\n\tHash = 'hash-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-ident-token}\n\t */\n\tIdent = 'ident-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-percentage-token}\n\t */\n\tNumber = 'number-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-percentage-token}\n\t */\n\tPercentage = 'percentage-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-semicolon-token}\n\t */\n\tSemicolon = 'semicolon-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-string-token}\n\t */\n\tString = 'string-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-url-token}\n\t */\n\tURL = 'url-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-whitespace-token}\n\t */\n\tWhitespace = 'whitespace-token',\n\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#tokendef-open-paren}\n\t */\n\tOpenParen = '(-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#tokendef-close-paren}\n\t */\n\tCloseParen = ')-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#tokendef-open-square}\n\t */\n\tOpenSquare = '[-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#tokendef-close-square}\n\t */\n\tCloseSquare = ']-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#tokendef-open-curly}\n\t */\n\tOpenCurly = '{-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#tokendef-close-curly}\n\t */\n\tCloseCurly = '}-token',\n\n\t/**\n\t * Only appears in the token stream when the `unicodeRangesAllowed` option is set to true.\n\t *\n\t * @example\n\t * ```js\n\t * import { tokenize } from '@csstools/css-tokenizer';\n\t *\n\t * const tokens = tokenize({\n\t * \tcss: `U+0025-00FF, U+4??`,\n\t * \tunicodeRangesAllowed: true,\n\t * });\n\t *\n\t * console.log(tokens);\n\t * ```\n\t *\n\t * @see {@link https://drafts.csswg.org/css-syntax/#typedef-unicode-range-token}\n\t */\n\tUnicodeRange = 'unicode-range-token',\n}\n\n/**\n * The type of number token\n * Either `integer` or `number`\n */\nexport enum NumberType {\n\tInteger = 'integer',\n\tNumber = 'number',\n}\n\n/**\n * The type of hash token\n */\nexport enum HashType {\n\t/**\n\t * The hash token did not start with an ident sequence (e.g. `#-2`)\n\t */\n\tUnrestricted = 'unrestricted',\n\t/**\n\t * The hash token started with an ident sequence (e.g. `#foo`)\n\t * Only hash tokens with the \"id\" type are valid ID selectors.\n\t */\n\tID = 'id',\n}\n\nexport interface TokenAtKeyword extends Token<TokenType.AtKeyword, {\n\t/**\n\t * The unescaped at-keyword name without the leading `@`.\n\t */\n\tvalue: string\n}> {}\nexport interface TokenBadString extends Token<TokenType.BadString, undefined> {}\nexport interface TokenBadURL extends Token<TokenType.BadURL, undefined> {}\nexport interface TokenCDC extends Token<TokenType.CDC, undefined> {}\nexport interface TokenCDO extends Token<TokenType.CDO, undefined> {}\nexport interface TokenColon extends Token<TokenType.Colon, undefined> {}\nexport interface TokenComma extends Token<TokenType.Comma, undefined> {}\nexport interface TokenComment extends Token<TokenType.Comment, undefined> {}\nexport interface TokenDelim extends Token<TokenType.Delim, {\n\t/**\n\t * The delim character.\n\t */\n\tvalue: string\n}> {}\nexport interface TokenDimension extends Token<TokenType.Dimension, {\n\t/**\n\t * The numeric value.\n\t */\n\tvalue: number,\n\t/**\n\t * The unescaped unit name.\n\t */\n\tunit: string,\n\t/**\n\t * `integer` or `number`\n\t */\n\ttype: NumberType\n\t/**\n\t * The sign character as it appeared in the source.\n\t * This is only useful if you need to determine if a value was written as \"2px\" or \"+2px\".\n\t */\n\tsignCharacter?: '+' | '-',\n}> {}\nexport interface TokenEOF extends Token<TokenType.EOF, undefined> {}\nexport interface TokenFunction extends Token<TokenType.Function, {\n\t/**\n\t * The unescaped function name without the trailing `(`.\n\t */\n\tvalue: string\n}> {}\nexport interface TokenHash extends Token<TokenType.Hash, {\n\t/**\n\t * The unescaped hash value without the leading `#`.\n\t */\n\tvalue: string,\n\t/**\n\t * The hash type.\n\t */\n\ttype: HashType\n}> {}\nexport interface TokenIdent extends Token<TokenType.Ident, {\n\t/**\n\t * The unescaped ident value.\n\t */\n\tvalue: string\n}> {}\nexport interface TokenNumber extends Token<TokenType.Number, {\n\t/**\n\t * The numeric value.\n\t */\n\tvalue: number,\n\t/**\n\t * `integer` or `number`\n\t */\n\ttype: NumberType\n\t/**\n\t * The sign character as it appeared in the source.\n\t * This is only useful if you need to determine if a value was written as \"2\" or \"+2\".\n\t */\n\tsignCharacter?: '+' | '-',\n}> {}\nexport interface TokenPercentage extends Token<TokenType.Percentage, {\n\t/**\n * The numeric value.\n */\n\tvalue: number,\n\t/**\n\t * The sign character as it appeared in the source.\n\t * This is only useful if you need to determine if a value was written as \"2%\" or \"+2%\".\n\t */\n\tsignCharacter?: '+' | '-',\n}> {}\nexport interface TokenSemicolon extends Token<TokenType.Semicolon, undefined> {}\nexport interface TokenString extends Token<TokenType.String, {\n\t/**\n\t * The unescaped string value without the leading and trailing quotes.\n\t */\n\tvalue: string\n}> {}\nexport interface TokenURL extends Token<TokenType.URL, {\n\t/**\n\t * The unescaped URL value without the leading `url(` and trailing `)`.\n\t */\n\tvalue: string\n}> {}\nexport interface TokenWhitespace extends Token<TokenType.Whitespace, undefined> {}\n\nexport interface TokenOpenParen extends Token<TokenType.OpenParen, undefined> {}\nexport interface TokenCloseParen extends Token<TokenType.CloseParen, undefined> {}\nexport interface TokenOpenSquare extends Token<TokenType.OpenSquare, undefined> {}\nexport interface TokenCloseSquare extends Token<TokenType.CloseSquare, undefined> {}\nexport interface TokenOpenCurly extends Token<TokenType.OpenCurly, undefined> {}\nexport interface TokenCloseCurly extends Token<TokenType.CloseCurly, undefined> {}\n\nexport interface TokenUnicodeRange extends Token<TokenType.UnicodeRange, {\n\tstartOfRange: number,\n\tendOfRange: number\n}> {}\n\n/**\n * The union of all possible CSS tokens\n */\nexport type CSSToken = TokenAtKeyword |\n\tTokenBadString |\n\tTokenBadURL |\n\tTokenCDC |\n\tTokenCDO |\n\tTokenColon |\n\tTokenComma |\n\tTokenComment |\n\tTokenDelim |\n\tTokenDimension |\n\tTokenEOF |\n\tTokenFunction |\n\tTokenHash |\n\tTokenIdent |\n\tTokenNumber |\n\tTokenPercentage |\n\tTokenSemicolon |\n\tTokenString |\n\tTokenURL |\n\tTokenWhitespace |\n\tTokenOpenParen |\n\tTokenCloseParen |\n\tTokenOpenSquare |\n\tTokenCloseSquare |\n\tTokenOpenCurly |\n\tTokenCloseCurly |\n\tTokenUnicodeRange;\n\n/**\n * The union of all possible CSS tokens that represent a numeric value\n */\nexport type NumericToken =\n\tTokenDimension |\n\tTokenNumber |\n\tTokenPercentage;\n\n/**\n * The CSS Token interface\n *\n * @remarks\n * CSS Tokens are fully typed and have a strict structure.\n * This makes it easier to iterate and analyze a token stream.\n *\n * The string representation and the parsed value are stored separately for many token types.\n * It is always assumed that the string representation will be used when stringifying, while the parsed value should be used when analyzing tokens.\n */\nexport interface Token<T extends TokenType, U> extends Array<T | string | number | U> {\n\t/**\n\t * The type of token\n\t */\n\t0: T,\n\t/**\n\t * The token representation\n\t *\n\t * @remarks\n\t * This field will be used when stringifying the token.\n\t * Any stored value is assumed to be valid CSS.\n\t *\n\t * You should never use this field when analyzing the token when there is a parsed value available.\n\t * But you must store mutated values here.\n\t */\n\t1: string,\n\t/**\n\t * Start position of representation\n\t */\n\t2: number,\n\t/**\n\t * End position of representation\n\t */\n\t3: number,\n\t/**\n\t * Extra data\n\t *\n\t * @remarks\n\t * This holds the parsed value of each token.\n\t * These values are unescaped, unquoted, converted to numbers, etc.\n\t *\n\t * You should always use this field when analyzing the token.\n\t * But you must not assume that mutating only this field will have any effect.\n\t */\n\t4: U,\n}\n\n/**\n * Get the mirror variant type of a given token type\n *\n * @example\n *\n * ```js\n * const input = TokenType.OpenParen;\n * const output = mirrorVariantType(input);\n *\n * console.log(output); // TokenType.CloseParen\n * ```\n */\nexport function mirrorVariantType(type: TokenType): TokenType | null {\n\tswitch (type) {\n\t\tcase TokenType.OpenParen:\n\t\t\treturn TokenType.CloseParen;\n\t\tcase TokenType.CloseParen:\n\t\t\treturn TokenType.OpenParen;\n\n\t\tcase TokenType.OpenCurly:\n\t\t\treturn TokenType.CloseCurly;\n\t\tcase TokenType.CloseCurly:\n\t\t\treturn TokenType.OpenCurly;\n\n\t\tcase TokenType.OpenSquare:\n\t\t\treturn TokenType.CloseSquare;\n\t\tcase TokenType.CloseSquare:\n\t\t\treturn TokenType.OpenSquare;\n\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n\n/**\n * Get the mirror variant of a given token\n *\n * @example\n *\n * ```js\n * const input = [TokenType.OpenParen, '(', 0, 1, undefined];\n * const output = mirrorVariant(input);\n *\n * console.log(output); // [TokenType.CloseParen, ')', -1, -1, undefined]\n * ```\n */\nexport function mirrorVariant(token: CSSToken): CSSToken | null {\n\tswitch (token[0]) {\n\t\tcase TokenType.OpenParen:\n\t\t\treturn [TokenType.CloseParen, ')', -1, -1, undefined];\n\t\tcase TokenType.CloseParen:\n\t\t\treturn [TokenType.OpenParen, '(', -1, -1, undefined];\n\n\t\tcase TokenType.OpenCurly:\n\t\t\treturn [TokenType.CloseCurly, '}', -1, -1, undefined];\n\t\tcase TokenType.CloseCurly:\n\t\t\treturn [TokenType.OpenCurly, '{', -1, -1, undefined];\n\n\t\tcase TokenType.OpenSquare:\n\t\t\treturn [TokenType.CloseSquare, ']', -1, -1, undefined];\n\t\tcase TokenType.CloseSquare:\n\t\t\treturn [TokenType.OpenSquare, '[', -1, -1, undefined];\n\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n", "import { ASTERISK, SOLIDUS } from '../code-points/code-points';\nimport type { CodePointReader } from '../interfaces/code-point-reader';\nimport type { Context } from '../interfaces/context';\nimport { ParseErrorMessage, ParseErrorWithToken } from '../interfaces/error';\nimport type { CSSToken, TokenComment} from '../interfaces/token';\nimport { TokenType } from '../interfaces/token';\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#consume-comment\nexport function consumeComment(ctx: Context, reader: CodePointReader): TokenComment {\n\treader.advanceCodePoint(2);\n\n\twhile (true) {\n\t\tconst codePoint = reader.readCodePoint();\n\t\tif (typeof codePoint === \"undefined\") {\n\t\t\tconst token: CSSToken = [\n\t\t\t\tTokenType.Comment,\n\t\t\t\treader.source.slice(reader.representationStart, reader.representationEnd + 1),\n\t\t\t\treader.representationStart,\n\t\t\t\treader.representationEnd,\n\t\t\t\tundefined,\n\t\t\t];\n\n\t\t\tctx.onParseError(new ParseErrorWithToken(\n\t\t\t\tParseErrorMessage.UnexpectedEOFInComment,\n\t\t\t\treader.representationStart,\n\t\t\t\treader.representationEnd,\n\t\t\t\t[\n\t\t\t\t\t'4.3.2. Consume comments',\n\t\t\t\t\t'Unexpected EOF',\n\t\t\t\t],\n\t\t\t\ttoken\n\t\t\t));\n\n\t\t\treturn token;\n\t\t}\n\n\t\tif (codePoint !== ASTERISK) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (typeof reader.source.codePointAt(reader.cursor) === \"undefined\") {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (reader.source.codePointAt(reader.cursor) === SOLIDUS) {\n\t\t\treader.advanceCodePoint();\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn [\n\t\tTokenType.Comment,\n\t\treader.source.slice(reader.representationStart, reader.representationEnd + 1),\n\t\treader.representationStart,\n\t\treader.representationEnd,\n\t\tundefined,\n\t];\n}\n", "import { CARRIAGE_RETURN, LINE_FEED, MAXIMUM_ALLOWED_CODEPOINT, REPLACEMENT_CHARACTER } from '../code-points/code-points';\nimport { isHexDigitCodePoint, isSurrogate, isWhitespace } from '../code-points/ranges';\nimport type { CodePointReader } from '../interfaces/code-point-reader';\nimport type { Context } from '../interfaces/context';\nimport { ParseError, ParseErrorMessage } from '../interfaces/error';\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#consume-escaped-code-point\nexport function consumeEscapedCodePoint(ctx: Context, reader: CodePointReader): number {\n\tconst codePoint = reader.readCodePoint();\n\tif (typeof codePoint === \"undefined\") {\n\t\tctx.onParseError(new ParseError(\n\t\t\tParseErrorMessage.UnexpectedEOFInEscapedCodePoint,\n\t\t\treader.representationStart,\n\t\t\treader.representationEnd,\n\t\t\t[\n\t\t\t\t'4.3.7. Consume an escaped code point',\n\t\t\t\t'Unexpected EOF',\n\t\t\t],\n\t\t));\n\n\t\treturn REPLACEMENT_CHARACTER;\n\t}\n\n\tif (isHexDigitCodePoint(codePoint)) {\n\t\tconst hexSequence: Array<number> = [codePoint];\n\n\t\tlet nextCodePoint: number | undefined;\n\t\twhile ((typeof (nextCodePoint = reader.source.codePointAt(reader.cursor)) !== \"undefined\") && isHexDigitCodePoint(nextCodePoint) && hexSequence.length < 6) {\n\t\t\thexSequence.push(nextCodePoint);\n\t\t\treader.advanceCodePoint();\n\t\t}\n\n\t\tif (isWhitespace(reader.source.codePointAt(reader.cursor) ?? -1)) {\n\t\t\tif (\n\t\t\t\treader.source.codePointAt(reader.cursor) === CARRIAGE_RETURN &&\n\t\t\t\treader.source.codePointAt(reader.cursor + 1) === LINE_FEED\n\t\t\t) {\n\t\t\t\treader.advanceCodePoint();\n\t\t\t}\n\n\t\t\treader.advanceCodePoint();\n\t\t}\n\n\t\tconst codePointLiteral = parseInt(String.fromCodePoint(...hexSequence), 16);\n\t\tif (codePointLiteral === 0 || isSurrogate(codePointLiteral)) {\n\t\t\treturn REPLACEMENT_CHARACTER;\n\t\t}\n\t\tif (codePointLiteral > MAXIMUM_ALLOWED_CODEPOINT) {\n\t\t\treturn REPLACEMENT_CHARACTER;\n\t\t}\n\n\t\treturn codePointLiteral;\n\t}\n\n\tif (codePoint === 0 || isSurrogate(codePoint)) {\n\t\treturn REPLACEMENT_CHARACTER;\n\t}\n\n\treturn codePoint;\n}\n", "import { checkIfTwoCodePointsAreAValidEscape } from '../checks/two-code-points-are-valid-escape';\nimport { NULL, REPLACEMENT_CHARACTER } from '../code-points/code-points';\nimport { isIdentCodePoint, isSurrogate } from '../code-points/ranges';\nimport type { CodePointReader } from '../interfaces/code-point-reader';\nimport type { Context } from '../interfaces/context';\nimport { consumeEscapedCodePoint } from './escaped-code-point';\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#consume-name\nexport function consumeIdentSequence(ctx: Context, reader: CodePointReader): Array<number> {\n\tconst result: Array<number> = [];\n\n\twhile (true) {\n\t\tconst codePoint = reader.source.codePointAt(reader.cursor) ?? -1;\n\t\tif (codePoint === NULL || isSurrogate(codePoint)) {\n\t\t\tresult.push(REPLACEMENT_CHARACTER);\n\t\t\treader.advanceCodePoint(1 + +(codePoint > 0xffff));\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (isIdentCodePoint(codePoint)) {\n\t\t\tresult.push(codePoint);\n\t\t\treader.advanceCodePoint(1 + +(codePoint > 0xffff));\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (checkIfTwoCodePointsAreAValidEscape(reader)) {\n\t\t\treader.advanceCodePoint();\n\t\t\tresult.push(consumeEscapedCodePoint(ctx, reader));\n\t\t\tcontinue;\n\t\t}\n\n\t\treturn result;\n\t}\n}\n", "import { checkIfThreeCodePointsWouldStartAnIdentSequence } from '../checks/three-code-points-would-start-ident-sequence';\nimport { checkIfTwoCodePointsAreAValidEscape } from '../checks/two-code-points-are-valid-escape';\nimport { isIdentCodePoint } from '../code-points/ranges';\nimport type { CodePointReader } from '../interfaces/code-point-reader';\nimport type { Context } from '../interfaces/context';\nimport type { TokenDelim, TokenHash} from '../interfaces/token';\nimport { HashType, TokenType } from '../interfaces/token';\nimport { consumeIdentSequence } from './ident-sequence';\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#consume-token\nexport function consumeHashToken(ctx: Context, reader: CodePointReader): TokenDelim|TokenHash {\n\treader.advanceCodePoint();\n\n\tconst codePoint = reader.source.codePointAt(reader.cursor);\n\tif (\n\t\t(typeof codePoint !== \"undefined\") && (\n\t\t\tisIdentCodePoint(codePoint) ||\n\t\t\tcheckIfTwoCodePointsAreAValidEscape(reader)\n\t\t)\n\t) {\n\t\tlet hashType = HashType.Unrestricted;\n\n\t\tif (checkIfThreeCodePointsWouldStartAnIdentSequence(ctx, reader)) {\n\t\t\thashType = HashType.ID;\n\t\t}\n\n\t\tconst identSequence = consumeIdentSequence(ctx, reader);\n\t\treturn [\n\t\t\tTokenType.Hash,\n\t\t\treader.source.slice(reader.representationStart, reader.representationEnd + 1),\n\t\t\treader.representationStart,\n\t\t\treader.representationEnd,\n\t\t\t{\n\t\t\t\tvalue: String.fromCodePoint(...identSequence),\n\t\t\t\ttype: hashType,\n\t\t\t},\n\t\t];\n\t}\n\n\treturn [\n\t\tTokenType.Delim,\n\t\t'#',\n\t\treader.representationStart,\n\t\treader.representationEnd,\n\t\t{\n\t\t\tvalue: '#',\n\t\t},\n\t];\n}\n", "import { FULL_STOP, HYPHEN_MINUS, LATIN_CAPITAL_LETTER_E, LATIN_SMALL_LETTER_E, PLUS_SIGN } from '../code-points/code-points';\nimport { isDigitCodePoint } from '../code-points/ranges';\nimport type { CodePointReader } from '../interfaces/code-point-reader';\nimport type { Context } from '../interfaces/context';\nimport { NumberType } from '../interfaces/token';\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#consume-number\nexport function consumeNumber(ctx: Context, reader: CodePointReader): NumberType {\n\t// 1. Initially set type to \"integer\".\n\tlet type = NumberType.Integer;\n\n\t// 2. If the next input code point is U+002B PLUS SIGN (+) or U+002D HYPHEN-MINUS (-), consume it and append it to repr.\n\tif (reader.source.codePointAt(reader.cursor) === PLUS_SIGN || reader.source.codePointAt(reader.cursor) === HYPHEN_MINUS) {\n\t\treader.advanceCodePoint();\n\t}\n\n\t// 3. While the next input code point is a digit, consume it and append it to repr.\n\twhile (isDigitCodePoint(reader.source.codePointAt(reader.cursor) ?? -1)) {\n\t\treader.advanceCodePoint();\n\t}\n\n\t// 4. If the next 2 input code points are U+002E FULL STOP (.) followed by a digit, then:\n\tif (reader.source.codePointAt(reader.cursor) === FULL_STOP && isDigitCodePoint(reader.source.codePointAt(reader.cursor + 1) ?? -1)) {\n\t\t// 4.1. Consume them.\n\t\treader.advanceCodePoint(2);\n\n\t\t// 4.3. Set type to \"number\".\n\t\ttype = NumberType.Number;\n\n\t\t// 4.4. While the next input code point is a digit, consume it and append it to repr.\n\t\twhile (isDigitCodePoint(reader.source.codePointAt(reader.cursor) ?? -1)) {\n\t\t\treader.advanceCodePoint();\n\t\t}\n\t}\n\n\t// 5. If the next 2 or 3 input code points are U+0045 LATIN CAPITAL LETTER E (E) or U+0065 LATIN SMALL LETTER E (e),\n\t// optionally followed by U+002D HYPHEN-MINUS (-) or U+002B PLUS SIGN (+),\n\t// followed by a digit, then:\n\tif (reader.source.codePointAt(reader.cursor) === LATIN_SMALL_LETTER_E || reader.source.codePointAt(reader.cursor) === LATIN_CAPITAL_LETTER_E) {\n\t\tif (isDigitCodePoint(reader.source.codePointAt(reader.cursor + 1) ?? -1)) {\n\t\t\t// 5.1. Consume them.\n\t\t\treader.advanceCodePoint(2);\n\t\t} else if (\n\t\t\t(reader.source.codePointAt(reader.cursor + 1) === HYPHEN_MINUS || reader.source.codePointAt(reader.cursor + 1) === PLUS_SIGN) &&\n\t\t\tisDigitCodePoint(reader.source.codePointAt(reader.cursor + 2) ?? -1)\n\t\t) {\n\t\t\t// 5.1. Consume them.\n\t\t\treader.advanceCodePoint(3);\n\t\t} else {\n\t\t\treturn type;\n\t\t}\n\n\t\t// 5.3. Set type to \"number\".\n\t\ttype = NumberType.Number;\n\n\t\t// 5.4. While the next input code point is a digit, consume it and append it to repr.\n\t\twhile (isDigitCodePoint(reader.source.codePointAt(reader.cursor) ?? -1)) {\n\t\t\treader.advanceCodePoint();\n\t\t}\n\t}\n\n\treturn type;\n}\n", "import { checkIfThreeCodePointsWouldStartAnIdentSequence } from '../checks/three-code-points-would-start-ident-sequence';\nimport { HYPHEN_MINUS, PERCENTAGE_SIGN, PLUS_SIGN } from '../code-points/code-points';\nimport type { CodePointReader } from '../interfaces/code-point-reader';\nimport type { Context } from '../interfaces/context';\nimport type { TokenDimension, TokenNumber, TokenPercentage} from '../interfaces/token';\nimport { TokenType } from '../interfaces/token';\nimport { consumeIdentSequence } from './ident-sequence';\nimport { consumeNumber } from './number';\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#consume-numeric-token\nexport function consumeNumericToken(ctx: Context, reader: CodePointReader): TokenPercentage|TokenNumber|TokenDimension {\n\tlet signCharacter: undefined | '+' | '-' = undefined;\n\n\t{\n\t\tconst peeked = reader.source.codePointAt(reader.cursor);\n\t\tif (peeked === HYPHEN_MINUS) {\n\t\t\tsignCharacter = '-';\n\t\t} else if (peeked === PLUS_SIGN) {\n\t\t\tsignCharacter = '+';\n\t\t}\n\t}\n\n\tconst numberType = consumeNumber(ctx, reader);\n\tconst numberValue = parseFloat(reader.source.slice(reader.representationStart, reader.representationEnd + 1));\n\n\tif (checkIfThreeCodePointsWouldStartAnIdentSequence(ctx, reader)) {\n\t\tconst unit = consumeIdentSequence(ctx, reader);\n\t\treturn [\n\t\t\tTokenType.Dimension,\n\t\t\treader.source.slice(reader.representationStart, reader.representationEnd + 1),\n\t\t\treader.representationStart,\n\t\t\treader.representationEnd,\n\t\t\t{\n\t\t\t\tvalue: numberValue,\n\t\t\t\tsignCharacter: signCharacter,\n\t\t\t\ttype: numberType,\n\t\t\t\tunit: String.fromCodePoint(...unit),\n\t\t\t},\n\t\t];\n\t}\n\n\tif (reader.source.codePointAt(reader.cursor) === PERCENTAGE_SIGN) {\n\t\treader.advanceCodePoint();\n\n\t\treturn [\n\t\t\tTokenType.Percentage,\n\t\t\treader.source.slice(reader.representationStart, reader.representationEnd + 1),\n\t\t\treader.representationStart,\n\t\t\treader.representationEnd,\n\t\t\t{\n\t\t\t\tvalue: numberValue,\n\t\t\t\tsignCharacter: signCharacter,\n\t\t\t},\n\t\t];\n\t}\n\n\treturn [\n\t\tTokenType.Number,\n\t\treader.source.slice(reader.representationStart, reader.representationEnd + 1),\n\t\treader.representationStart,\n\t\treader.representationEnd,\n\t\t{\n\t\t\tvalue: numberValue,\n\t\t\tsignCharacter: signCharacter,\n\t\t\ttype: numberType,\n\t\t},\n\t];\n}\n", "import { isWhitespace } from '../code-points/ranges';\nimport type { CodePointReader } from '../interfaces/code-point-reader';\nimport type { TokenWhitespace } from '../interfaces/token';\nimport { TokenType } from '../interfaces/token';\n\nexport function consumeWhiteSpace(reader: CodePointReader): TokenWhitespace {\n\twhile (isWhitespace(reader.source.codePointAt(reader.cursor) ?? -1)) {\n\t\treader.advanceCodePoint();\n\t}\n\n\treturn [\n\t\tTokenType.Whitespace,\n\t\treader.source.slice(reader.representationStart, reader.representationEnd + 1),\n\t\treader.representationStart,\n\t\treader.representationEnd,\n\t\tundefined,\n\t];\n}\n", "import type { CodePointReader } from './interfaces/code-point-reader';\n\n/**\n * @internal\n */\nexport class Reader implements CodePointReader {\n\tcursor = 0;\n\tsource = '';\n\n\trepresentationStart = 0;\n\trepresentationEnd = -1;\n\n\tconstructor(source: string) {\n\t\tthis.source = source;\n\t}\n\n\tadvanceCodePoint(n = 1): void {\n\t\tthis.cursor = this.cursor + n;\n\t\tthis.representationEnd = this.cursor - 1;\n\t}\n\n\treadCodePoint(): number | undefined {\n\t\tconst codePoint = this.source.codePointAt(this.cursor);\n\t\tif (typeof codePoint === \"undefined\") {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis.cursor = this.cursor + 1;\n\t\tthis.representationEnd = this.cursor - 1;\n\n\t\treturn codePoint;\n\t}\n\n\tunreadCodePoint(n = 1): void {\n\t\tthis.cursor = this.cursor - n;\n\t\tthis.representationEnd = this.cursor - 1;\n\n\t\treturn;\n\t}\n\n\tresetRepresentation(): void {\n\t\tthis.representationStart = this.cursor;\n\t\tthis.representationEnd = -1;\n\t}\n}\n", "import { CARRIAGE_RETURN, LINE_FEED, NULL, REPLACEMENT_CHARACTER, REVERSE_SOLIDUS } from '../code-points/code-points';\nimport { isNewLine, isSurrogate } from '../code-points/ranges';\nimport type { CodePointReader } from '../interfaces/code-point-reader';\nimport type { Context } from '../interfaces/context';\nimport { ParseErrorWithToken, ParseErrorMessage } from '../interfaces/error';\nimport type { CSSToken, TokenBadString, TokenString} from '../interfaces/token';\nimport { TokenType } from '../interfaces/token';\nimport { consumeEscapedCodePoint } from './escaped-code-point';\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#consume-string-token\nexport function consumeStringToken(ctx: Context, reader: CodePointReader): TokenBadString|TokenString {\n\tlet result = '';\n\n\tconst first = reader.readCodePoint();\n\n\twhile (true) {\n\t\tconst next = reader.readCodePoint();\n\n\t\tif (typeof next === \"undefined\") {\n\t\t\tconst token: CSSToken = [TokenType.String, reader.source.slice(reader.representationStart, reader.representationEnd + 1), reader.representationStart, reader.representationEnd, { value: result }];\n\n\t\t\tctx.onParseError(new ParseErrorWithToken(\n\t\t\t\tParseErrorMessage.UnexpectedEOFInString,\n\t\t\t\treader.representationStart,\n\t\t\t\treader.representationEnd,\n\t\t\t\t[\n\t\t\t\t\t'4.3.5. Consume a string token',\n\t\t\t\t\t'Unexpected EOF',\n\t\t\t\t],\n\t\t\t\ttoken\n\t\t\t));\n\n\t\t\treturn token;\n\t\t}\n\n\t\tif (isNewLine(next)) {\n\t\t\treader.unreadCodePoint();\n\n\t\t\tconst token: CSSToken = [TokenType.BadString, reader.source.slice(reader.representationStart, reader.representationEnd + 1), reader.representationStart, reader.representationEnd, undefined];\n\n\t\t\tctx.onParseError(new ParseErrorWithToken(\n\t\t\t\tParseErrorMessage.UnexpectedNewLineInString,\n\t\t\t\treader.representationStart,\n\t\t\t\t(\n\t\t\t\t\t(\n\t\t\t\t\t\treader.source.codePointAt(reader.cursor) === CARRIAGE_RETURN &&\n\t\t\t\t\t\treader.source.codePointAt(reader.cursor + 1) === LINE_FEED\n\t\t\t\t\t) ?\n\t\t\t\t\t\t// CR LF\n\t\t\t\t\t\treader.representationEnd + 2 :\n\t\t\t\t\t\t// LF\n\t\t\t\t\t\treader.representationEnd + 1\n\t\t\t\t),\n\t\t\t\t[\n\t\t\t\t\t'4.3.5. Consume a string token',\n\t\t\t\t\t'Unexpected newline',\n\t\t\t\t],\n\t\t\t\ttoken\n\t\t\t));\n\n\t\t\treturn token;\n\t\t}\n\n\t\tif (next === first) {\n\t\t\treturn [TokenType.String, reader.source.slice(reader.representationStart, reader.representationEnd + 1), reader.representationStart, reader.representationEnd, { value: result }];\n\t\t}\n\n\t\tif (next === REVERSE_SOLIDUS) {\n\t\t\tif (typeof reader.source.codePointAt(reader.cursor) === \"undefined\") {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (isNewLine(reader.source.codePointAt(reader.cursor) ?? -1)) {\n\t\t\t\tif (\n\t\t\t\t\treader.source.codePointAt(reader.cursor) === CARRIAGE_RETURN &&\n\t\t\t\t\treader.source.codePointAt(reader.cursor + 1) === LINE_FEED\n\t\t\t\t) {\n\t\t\t\t\treader.advanceCodePoint();\n\t\t\t\t}\n\n\t\t\t\treader.advanceCodePoint();\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tresult = result + String.fromCodePoint(consumeEscapedCodePoint(ctx, reader));\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (next === NULL || isSurrogate(next)) {\n\t\t\tresult = result + String.fromCodePoint(REPLACEMENT_CHARACTER);\n\t\t\tcontinue;\n\t\t}\n\n\t\tresult = result + String.fromCodePoint(next);\n\t}\n}\n", "import { LATIN_CAPITAL_LETTER_L, LATIN_CAPITAL_LETTER_R, LATIN_CAPITAL_LETTER_U, LATIN_SMALL_LETTER_L, LATIN_SMALL_LETTER_R, LATIN_SMALL_LETTER_U } from '../code-points/code-points';\n\nexport function checkIfCodePointsMatchURLIdent(codePoints: Array<number>): boolean {\n\treturn (\n\t\tcodePoints.length === 3 &&\n\t\t(\n\t\t\tcodePoints[0] === LATIN_SMALL_LETTER_U ||\n\t\t\tcodePoints[0] === LATIN_CAPITAL_LETTER_U\n\t\t) &&\n\t\t(\n\t\t\tcodePoints[1] === LATIN_SMALL_LETTER_R ||\n\t\t\tcodePoints[1] === LATIN_CAPITAL_LETTER_R\n\t\t) &&\n\t\t(\n\t\t\tcodePoints[2] === LATIN_SMALL_LETTER_L ||\n\t\t\tcodePoints[2] === LATIN_CAPITAL_LETTER_L\n\t\t)\n\t);\n}\n", "import { checkIfTwoCodePointsAreAValidEscape } from '../checks/two-code-points-are-valid-escape';\nimport { RIGHT_PARENTHESIS } from '../code-points/code-points';\nimport type { CodePointReader } from '../interfaces/code-point-reader';\nimport type { Context } from '../interfaces/context';\nimport { consumeEscapedCodePoint } from './escaped-code-point';\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#consume-remnants-of-bad-url\nexport function consumeBadURL(ctx: Context, reader: CodePointReader): void {\n\twhile (true) {\n\t\tconst codePoint = reader.source.codePointAt(reader.cursor);\n\t\tif (typeof codePoint === \"undefined\") {\n\t\t\treturn;\n\t\t}\n\n\t\tif (codePoint === RIGHT_PARENTHESIS) {\n\t\t\treader.advanceCodePoint();\n\t\t\treturn;\n\t\t}\n\n\t\tif (checkIfTwoCodePointsAreAValidEscape(reader)) {\n\t\t\treader.advanceCodePoint();\n\t\t\tconsumeEscapedCodePoint(ctx, reader);\n\t\t\tcontinue;\n\t\t}\n\n\t\treader.advanceCodePoint();\n\t\tcontinue;\n\t}\n}\n", "import { checkIfTwoCodePointsAreAValidEscape } from '../checks/two-code-points-are-valid-escape';\nimport { APOSTROPHE, LEFT_PARENTHESIS, NULL, QUOTATION_MARK, REPLACEMENT_CHARACTER, REVERSE_SOLIDUS, RIGHT_PARENTHESIS } from '../code-points/code-points';\nimport { isNonPrintableCodePoint, isSurrogate, isWhitespace } from '../code-points/ranges';\nimport type { CodePointReader } from '../interfaces/code-point-reader';\nimport type { Context } from '../interfaces/context';\nimport { ParseErrorWithToken, ParseErrorMessage } from '../interfaces/error';\nimport type { CSSToken, TokenBadURL, TokenURL } from '../interfaces/token';\nimport { TokenType } from '../interfaces/token';\nimport { consumeBadURL } from './bad-url';\nimport { consumeEscapedCodePoint } from './escaped-code-point';\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#consume-url-token\nexport function consumeUrlToken(ctx: Context, reader: CodePointReader): TokenURL|TokenBadURL {\n\twhile (isWhitespace(reader.source.codePointAt(reader.cursor) ?? -1)) {\n\t\treader.advanceCodePoint();\n\t}\n\n\tlet string = '';\n\n\twhile (true) {\n\t\tif (typeof reader.source.codePointAt(reader.cursor) === \"undefined\") {\n\t\t\tconst token: CSSToken = [\n\t\t\t\tTokenType.URL,\n\t\t\t\treader.source.slice(reader.representationStart, reader.representationEnd + 1),\n\t\t\t\treader.representationStart,\n\t\t\t\treader.representationEnd,\n\t\t\t\t{\n\t\t\t\t\tvalue: string,\n\t\t\t\t},\n\t\t\t];\n\n\t\t\tctx.onParseError(new ParseErrorWithToken(\n\t\t\t\tParseErrorMessage.UnexpectedEOFInURL,\n\t\t\t\treader.representationStart,\n\t\t\t\treader.representationEnd,\n\t\t\t\t[\n\t\t\t\t\t'4.3.6. Consume a url token',\n\t\t\t\t\t'Unexpected EOF',\n\t\t\t\t],\n\t\t\t\ttoken,\n\t\t\t));\n\n\t\t\treturn token;\n\t\t}\n\n\t\tif (reader.source.codePointAt(reader.cursor) === RIGHT_PARENTHESIS) {\n\t\t\treader.advanceCodePoint();\n\t\t\treturn [\n\t\t\t\tTokenType.URL,\n\t\t\t\treader.source.slice(reader.representationStart, reader.representationEnd + 1),\n\t\t\t\treader.representationStart,\n\t\t\t\treader.representationEnd,\n\t\t\t\t{\n\t\t\t\t\tvalue: string,\n\t\t\t\t},\n\t\t\t];\n\t\t}\n\n\t\tif (isWhitespace(reader.source.codePointAt(reader.cursor) ?? -1)) {\n\t\t\treader.advanceCodePoint();\n\t\t\twhile (isWhitespace(reader.source.codePointAt(reader.cursor) ?? -1)) {\n\t\t\t\treader.advanceCodePoint();\n\t\t\t}\n\n\t\t\tif (typeof reader.source.codePointAt(reader.cursor) === \"undefined\") {\n\t\t\t\tconst token: CSSToken = [\n\t\t\t\t\tTokenType.URL,\n\t\t\t\t\treader.source.slice(reader.representationStart, reader.representationEnd + 1),\n\t\t\t\t\treader.representationStart,\n\t\t\t\t\treader.representationEnd,\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue: string,\n\t\t\t\t\t},\n\t\t\t\t];\n\n\t\t\t\tctx.onParseError(new ParseErrorWithToken(\n\t\t\t\t\tParseErrorMessage.UnexpectedEOFInURL,\n\t\t\t\t\treader.representationStart,\n\t\t\t\t\treader.representationEnd,\n\t\t\t\t\t[\n\t\t\t\t\t\t'4.3.6. Consume a url token',\n\t\t\t\t\t\t'Consume as much whitespace as possible',\n\t\t\t\t\t\t'Unexpected EOF',\n\t\t\t\t\t],\n\t\t\t\t\ttoken\n\t\t\t\t));\n\n\t\t\t\treturn token;\n\t\t\t}\n\n\t\t\tif (reader.source.codePointAt(reader.cursor) === RIGHT_PARENTHESIS) {\n\t\t\t\treader.advanceCodePoint();\n\t\t\t\treturn [\n\t\t\t\t\tTokenType.URL,\n\t\t\t\t\treader.source.slice(reader.representationStart, reader.representationEnd + 1),\n\t\t\t\t\treader.representationStart,\n\t\t\t\t\treader.representationEnd,\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue: string,\n\t\t\t\t\t},\n\t\t\t\t];\n\t\t\t}\n\n\t\t\tconsumeBadURL(ctx, reader);\n\t\t\treturn [\n\t\t\t\tTokenType.BadURL,\n\t\t\t\treader.source.slice(reader.representationStart, reader.representationEnd + 1),\n\t\t\t\treader.representationStart,\n\t\t\t\treader.representationEnd,\n\t\t\t\tundefined,\n\t\t\t];\n\t\t}\n\n\t\tconst codePoint = reader.source.codePointAt(reader.cursor);\n\t\tif (codePoint === QUOTATION_MARK || codePoint === APOSTROPHE || codePoint === LEFT_PARENTHESIS || isNonPrintableCodePoint(codePoint ?? -1)) {\n\t\t\tconsumeBadURL(ctx, reader);\n\n\t\t\tconst token: CSSToken = [\n\t\t\t\tTokenType.BadURL,\n\t\t\t\treader.source.slice(reader.representationStart, reader.representationEnd + 1),\n\t\t\t\treader.representationStart,\n\t\t\t\treader.representationEnd,\n\t\t\t\tundefined,\n\t\t\t];\n\n\t\t\tctx.onParseError(new ParseErrorWithToken(\n\t\t\t\tParseErrorMessage.UnexpectedCharacterInURL,\n\t\t\t\treader.representationStart,\n\t\t\t\treader.representationEnd,\n\t\t\t\t[\n\t\t\t\t\t'4.3.6. Consume a url token',\n\t\t\t\t\t'Unexpected U+0022 QUOTATION MARK (\"), U+0027 APOSTROPHE (\\'), U+0028 LEFT PARENTHESIS (() or non-printable code point',\n\t\t\t\t],\n\t\t\t\ttoken\n\t\t\t));\n\n\t\t\treturn token;\n\t\t}\n\n\t\tif (codePoint === REVERSE_SOLIDUS) {\n\t\t\tif (checkIfTwoCodePointsAreAValidEscape(reader)) {\n\t\t\t\treader.advanceCodePoint();\n\t\t\t\tstring = string + String.fromCodePoint(consumeEscapedCodePoint(ctx, reader));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconsumeBadURL(ctx, reader);\n\n\t\t\tconst token: CSSToken = [\n\t\t\t\tTokenType.BadURL,\n\t\t\t\treader.source.slice(reader.representationStart, reader.representationEnd + 1),\n\t\t\t\treader.representationStart,\n\t\t\t\treader.representationEnd,\n\t\t\t\tundefined,\n\t\t\t]\n\n\t\t\tctx.onParseError(new ParseErrorWithToken(\n\t\t\t\tParseErrorMessage.InvalidEscapeSequenceInURL,\n\t\t\t\treader.representationStart,\n\t\t\t\treader.representationEnd,\n\t\t\t\t[\n\t\t\t\t\t'4.3.6. Consume a url token',\n\t\t\t\t\t'U+005C REVERSE SOLIDUS (\\\\)',\n\t\t\t\t\t'The input stream does not start with a valid escape sequence',\n\t\t\t\t],\n\t\t\t\ttoken\n\t\t\t));\n\n\t\t\treturn token;\n\t\t}\n\n\t\tif (reader.source.codePointAt(reader.cursor) === NULL || isSurrogate(reader.source.codePointAt(reader.cursor) ?? -1)) {\n\t\t\tstring = string + String.fromCodePoint(REPLACEMENT_CHARACTER);\n\t\t\treader.advanceCodePoint();\n\t\t\tcontinue;\n\t\t}\n\n\t\tstring = string + reader.source[reader.cursor];\n\t\treader.advanceCodePoint();\n\t}\n}\n", "import { checkIfCodePointsMatchURLIdent } from '../checks/matches-url-ident';\nimport { APOSTROPHE, LEFT_PARENTHESIS, QUOTATION_MARK } from '../code-points/code-points';\nimport { isWhitespace } from '../code-points/ranges';\nimport type { CodePointReader } from '../interfaces/code-point-reader';\nimport type { Context } from '../interfaces/context';\nimport type { TokenBadURL, TokenFunction, TokenIdent, TokenURL } from '../interfaces/token';\nimport { TokenType } from '../interfaces/token';\nimport { consumeIdentSequence } from './ident-sequence';\nimport { consumeUrlToken } from './url-token';\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#consume-ident-like-token\nexport function consumeIdentLikeToken(ctx: Context, reader: CodePointReader): TokenIdent | TokenFunction | TokenURL | TokenBadURL {\n\tconst codePoints = consumeIdentSequence(ctx, reader);\n\n\tif (reader.source.codePointAt(reader.cursor) !== LEFT_PARENTHESIS) {\n\t\treturn [\n\t\t\tTokenType.Ident,\n\t\t\treader.source.slice(reader.representationStart, reader.representationEnd + 1),\n\t\t\treader.representationStart,\n\t\t\treader.representationEnd,\n\t\t\t{\n\t\t\t\tvalue: String.fromCodePoint(...codePoints),\n\t\t\t},\n\t\t];\n\t}\n\n\tif (checkIfCodePointsMatchURLIdent(codePoints)) {\n\t\treader.advanceCodePoint();\n\n\t\tlet read = 0;\n\t\twhile (true) {\n\t\t\tconst firstIsWhitespace = isWhitespace(reader.source.codePointAt(reader.cursor) ?? -1);\n\t\t\tconst secondIsWhitespace = isWhitespace(reader.source.codePointAt(reader.cursor + 1) ?? -1);\n\t\t\tif (firstIsWhitespace && secondIsWhitespace) {\n\t\t\t\tread = read + 1;\n\t\t\t\treader.advanceCodePoint(1);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst firstNonWhitespace = firstIsWhitespace ? reader.source.codePointAt(reader.cursor + 1) : reader.source.codePointAt(reader.cursor);\n\t\t\tif (firstNonWhitespace === QUOTATION_MARK || firstNonWhitespace === APOSTROPHE) {\n\t\t\t\tif (read > 0) {\n\t\t\t\t\t// https://github.com/w3c/csswg-drafts/issues/8280#issuecomment-1370566921\n\t\t\t\t\treader.unreadCodePoint(read);\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\tTokenType.Function,\n\t\t\t\t\treader.source.slice(reader.representationStart, reader.representationEnd + 1),\n\t\t\t\t\treader.representationStart,\n\t\t\t\t\treader.representationEnd,\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue: String.fromCodePoint(...codePoints),\n\t\t\t\t\t},\n\t\t\t\t];\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\treturn consumeUrlToken(ctx, reader);\n\t}\n\n\treader.advanceCodePoint();\n\treturn [\n\t\tTokenType.Function,\n\t\treader.source.slice(reader.representationStart, reader.representationEnd + 1),\n\t\treader.representationStart,\n\t\treader.representationEnd,\n\t\t{\n\t\t\tvalue: String.fromCodePoint(...codePoints),\n\t\t},\n\t];\n}\n", "import { LATIN_CAPITAL_LETTER_U, LATIN_SMALL_LETTER_U, PLUS_SIGN, QUESTION_MARK } from '../code-points/code-points';\nimport { isHexDigitCodePoint } from '../code-points/ranges';\nimport type { CodePointReader } from '../interfaces/code-point-reader';\n\n// https://drafts.csswg.org/css-syntax/#starts-a-unicode-range\nexport function checkIfThreeCodePointsWouldStartAUnicodeRange(reader: CodePointReader): boolean {\n\tif (\n\t\t// The first code point is either U+0055 LATIN CAPITAL LETTER U (U) or U+0075 LATIN SMALL LETTER U (u)\n\t\t(\n\t\t\treader.source.codePointAt(reader.cursor) === LATIN_SMALL_LETTER_U ||\n\t\t\treader.source.codePointAt(reader.cursor) === LATIN_CAPITAL_LETTER_U\n\t\t) &&\n\t\t// The second code point is U+002B PLUS SIGN (+).\n\t\treader.source.codePointAt(reader.cursor + 1) === PLUS_SIGN &&\n\t\t// The third code point is either U+003F QUESTION MARK (?) or a hex digit\n\t\t(\n\t\t\treader.source.codePointAt(reader.cursor + 2) === QUESTION_MARK ||\n\t\t\tisHexDigitCodePoint(reader.source.codePointAt(reader.cursor + 2) ?? -1)\n\t\t)\n\t) {\n\t\t// then return true.\n\t\treturn true;\n\t}\n\n\t// Otherwise return false.\n\treturn false;\n}\n", "import { DIGIT_ZERO, HYPHEN_MINUS, LATIN_CAPITAL_LETTER_F, QUESTION_MARK } from '../code-points/code-points';\nimport { isHexDigitCodePoint } from '../code-points/ranges';\nimport type { CodePointReader } from '../interfaces/code-point-reader';\nimport type { Context } from '../interfaces/context';\nimport type { TokenUnicodeRange } from '../interfaces/token';\nimport { TokenType } from '../interfaces/token';\n\n// https://drafts.csswg.org/css-syntax/#starts-a-unicode-range\nexport function consumeUnicodeRangeToken(ctx: Context, reader: CodePointReader): TokenUnicodeRange {\n\t// 1. Consume the next two input code points and discard them.\n\treader.advanceCodePoint(2);\n\n\tconst firstSegment: Array<number> = [];\n\tconst secondSegment: Array<number> = [];\n\n\t// 2. Consume as many hex digits as possible,\n\t// but no more than 6.\n\tlet codePoint: number | undefined;\n\twhile (\n\t\t(typeof (codePoint = reader.source.codePointAt(reader.cursor)) !== \"undefined\") &&\n\t\tfirstSegment.length < 6 &&\n\t\tisHexDigitCodePoint(codePoint)\n\t) {\n\t\tfirstSegment.push(codePoint);\n\t\treader.advanceCodePoint();\n\t}\n\n\t// 2. If less than 6 hex digits were consumed,\n\t// consume as many U+003F QUESTION MARK (?) code points as possible,\n\t// but no more than enough to make the total of hex digits and U+003F QUESTION MARK (?) code points equal to 6.\n\twhile (\n\t\t(typeof (codePoint = reader.source.codePointAt(reader.cursor)) !== \"undefined\") &&\n\t\tfirstSegment.length < 6 &&\n\t\tcodePoint === QUESTION_MARK\n\t) {\n\t\tif (secondSegment.length === 0) {\n\t\t\tsecondSegment.push(...firstSegment);\n\t\t}\n\n\t\t// 3. If first segment contains any question mark code points, then:\n\t\t// 3.1 Replace the question marks in first segment with U+0030 DIGIT ZERO (0) code points.\n\t\tfirstSegment.push(DIGIT_ZERO);\n\t\t// 3.2.Replace the question marks in first segment with U+0046 LATIN CAPITAL LETTER F (F) code points.\n\t\tsecondSegment.push(LATIN_CAPITAL_LETTER_F);\n\t\treader.advanceCodePoint();\n\t}\n\n\tif (!secondSegment.length) {\n\t\t// 5. If the next 2 input code points are U+002D HYPHEN-MINUS (-) followed by a hex digit\n\t\tif (\n\t\t\treader.source.codePointAt(reader.cursor) === HYPHEN_MINUS &&\n\t\t\tisHexDigitCodePoint(reader.source.codePointAt(reader.cursor + 1) ?? -1)\n\t\t) {\n\t\t\t// 5.1. Consume the next input code point.\n\t\t\treader.advanceCodePoint();\n\n\t\t\t// 5.2 Consume as many hex digits as possible,\n\t\t\t// but no more than 6.\n\t\t\twhile (\n\t\t\t\t(typeof (codePoint = reader.source.codePointAt(reader.cursor)) !== \"undefined\") &&\n\t\t\t\tsecondSegment.length < 6 &&\n\t\t\t\tisHexDigitCodePoint(codePoint)\n\t\t\t) {\n\t\t\t\tsecondSegment.push(codePoint);\n\t\t\t\treader.advanceCodePoint();\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!secondSegment.length) {\n\t\t// Interpret the consumed code points as a hexadecimal number.\n\t\tconst startOfRange = parseInt(String.fromCodePoint(...firstSegment), 16);\n\n\t\t// Return a new <unicode-range-token> both starting and ending at start of range.\n\t\treturn [\n\t\t\tTokenType.UnicodeRange,\n\t\t\treader.source.slice(reader.representationStart, reader.representationEnd + 1),\n\t\t\treader.representationStart,\n\t\t\treader.representationEnd,\n\t\t\t{\n\t\t\t\tstartOfRange: startOfRange,\n\t\t\t\tendOfRange: startOfRange,\n\t\t\t},\n\t\t];\n\t}\n\n\t// Interpret the consumed code points as a hexadecimal number.\n\tconst startOfRange = parseInt(String.fromCodePoint(...firstSegment), 16);\n\tconst endOfRange = parseInt(String.fromCodePoint(...secondSegment), 16);\n\n\t// Return a new <unicode-range-token> starting at start of range and ending at end of range.\n\treturn [\n\t\tTokenType.UnicodeRange,\n\t\treader.source.slice(reader.representationStart, reader.representationEnd + 1),\n\t\treader.representationStart,\n\t\treader.representationEnd,\n\t\t{\n\t\t\tstartOfRange: startOfRange,\n\t\t\tendOfRange: endOfRange,\n\t\t},\n\t];\n}\n", "import { checkIfFourCodePointsWouldStartCDO } from './checks/four-code-points-would-start-cdo';\nimport { checkIfThreeCodePointsWouldStartAnIdentSequence } from './checks/three-code-points-would-start-ident-sequence';\nimport { checkIfThreeCodePointsWouldStartANumber } from './checks/three-code-points-would-start-number';\nimport { checkIfTwoCodePointsStartAComment } from './checks/two-code-points-start-comment';\nimport { checkIfThreeCodePointsWouldStartCDC } from './checks/three-code-points-would-start-cdc';\nimport { APOSTROPHE, CARRIAGE_RETURN, CHARACTER_TABULATION, COLON, COMMA, COMMERCIAL_AT, FORM_FEED, FULL_STOP, HYPHEN_MINUS, LATIN_CAPITAL_LETTER_U, LATIN_SMALL_LETTER_U, LEFT_CURLY_BRACKET, LEFT_PARENTHESIS, LEFT_SQUARE_BRACKET, LESS_THAN_SIGN, LINE_FEED, NUMBER_SIGN, PLUS_SIGN, QUOTATION_MARK, REVERSE_SOLIDUS, RIGHT_CURLY_BRACKET, RIGHT_PARENTHESIS, RIGHT_SQUARE_BRACKET, SEMICOLON, SOLIDUS, SPACE } from './code-points/code-points';\nimport { isDigitCodePoint, isIdentStartCodePoint } from './code-points/ranges';\nimport { consumeComment } from './consume/comment';\nimport { consumeHashToken } from './consume/hash-token';\nimport { consumeIdentSequence } from './consume/ident-sequence';\nimport { consumeNumericToken } from './consume/numeric-token';\nimport { consumeWhiteSpace } from './consume/whitespace-token';\nimport type { CSSToken} from './interfaces/token';\nimport { TokenType } from './interfaces/token';\nimport { Reader } from './reader';\nimport { consumeStringToken } from './consume/string-token';\nimport { consumeIdentLikeToken } from './consume/ident-like-token';\nimport { checkIfTwoCodePointsAreAValidEscape } from './checks/two-code-points-are-valid-escape';\nimport type { ParseError} from './interfaces/error';\nimport { ParseErrorMessage, ParseErrorWithToken } from './interfaces/error';\nimport { checkIfThreeCodePointsWouldStartAUnicodeRange } from './checks/three-code-points-would-start-unicode-range';\nimport { consumeUnicodeRangeToken } from './consume/unicode-range-token';\n\n/**\n * Tokenize a CSS string into a list of tokens.\n */\nexport function tokenize(\n\tinput: {\n\t\tcss: { valueOf(): string },\n\t\tunicodeRangesAllowed?: boolean,\n\t},\n\toptions?: {\n\t\tonParseError?: (error: ParseError) => void\n\t},\n): Array<CSSToken> {\n\tconst t = tokenizer(input, options);\n\n\tconst tokens: Array<CSSToken> = [];\n\n\twhile (!t.endOfFile()) {\n\t\ttokens.push(t.nextToken());\n\t}\n\n\ttokens.push(t.nextToken()); // EOF-token\n\n\treturn tokens;\n}\n\n/**\n * Create a tokenizer for a CSS string.\n */\nexport function tokenizer(\n\tinput: {\n\t\tcss: {\n\t\t\tvalueOf(): string\n\t\t},\n\t\tunicodeRangesAllowed?: boolean,\n\t},\n\toptions?: {\n\t\tonParseError?: (error: ParseError) => void\n\t},\n): { nextToken: () => CSSToken, endOfFile: () => boolean } {\n\tconst css = input.css.valueOf();\n\tconst unicodeRangesAllowed = input.unicodeRangesAllowed ?? false;\n\n\tconst reader = new Reader(css);\n\n\tconst ctx = {\n\t\tonParseError: options?.onParseError ?? noop,\n\t};\n\n\tfunction endOfFile(): boolean {\n\t\treturn typeof reader.source.codePointAt(reader.cursor) === \"undefined\";\n\t}\n\n\tfunction nextToken(): CSSToken {\n\t\treader.resetRepresentation();\n\n\t\tconst peeked = reader.source.codePointAt(reader.cursor);\n\t\tif (typeof peeked === \"undefined\") {\n\t\t\treturn [TokenType.EOF, '', -1, -1, undefined];\n\t\t}\n\n\t\tif (peeked === SOLIDUS && checkIfTwoCodePointsStartAComment(reader)) {\n\t\t\treturn consumeComment(ctx, reader);\n\t\t}\n\n\t\tif (\n\t\t\tunicodeRangesAllowed && (\n\t\t\t\tpeeked === LATIN_SMALL_LETTER_U ||\n\t\t\t\tpeeked === LATIN_CAPITAL_LETTER_U\n\t\t\t) &&\n\t\t\tcheckIfThreeCodePointsWouldStartAUnicodeRange(reader)\n\t\t) {\n\t\t\treturn consumeUnicodeRangeToken(ctx, reader);\n\t\t}\n\n\t\tif (isIdentStartCodePoint(peeked)) {\n\t\t\treturn consumeIdentLikeToken(ctx, reader);\n\t\t}\n\n\t\tif (isDigitCodePoint(peeked)) {\n\t\t\treturn consumeNumericToken(ctx, reader);\n\t\t}\n\n\t\t// Simple, one character tokens:\n\t\tswitch (peeked) {\n\t\t\tcase COMMA:\n\t\t\t\treader.advanceCodePoint();\n\t\t\t\treturn [TokenType.Comma, ',', reader.representationStart, reader.representationEnd, undefined];\n\n\t\t\tcase COLON:\n\t\t\t\treader.advanceCodePoint();\n\t\t\t\treturn [TokenType.Colon, ':', reader.representationStart, reader.representationEnd, undefined];\n\n\t\t\tcase SEMICOLON:\n\t\t\t\treader.advanceCodePoint();\n\t\t\t\treturn [TokenType.Semicolon, ';', reader.representationStart, reader.representationEnd, undefined];\n\n\t\t\tcase LEFT_PARENTHESIS:\n\t\t\t\treader.advanceCodePoint();\n\t\t\t\treturn [TokenType.OpenParen, '(', reader.representationStart, reader.representationEnd, undefined];\n\n\t\t\tcase RIGHT_PARENTHESIS:\n\t\t\t\treader.advanceCodePoint();\n\t\t\t\treturn [TokenType.CloseParen, ')', reader.representationStart, reader.representationEnd, undefined];\n\n\t\t\tcase LEFT_SQUARE_BRACKET:\n\t\t\t\treader.advanceCodePoint();\n\t\t\t\treturn [TokenType.OpenSquare, '[', reader.representationStart, reader.representationEnd, undefined];\n\n\t\t\tcase RIGHT_SQUARE_BRACKET:\n\t\t\t\treader.advanceCodePoint();\n\t\t\t\treturn [TokenType.CloseSquare, ']', reader.representationStart, reader.representationEnd, undefined];\n\n\t\t\tcase LEFT_CURLY_BRACKET:\n\t\t\t\treader.advanceCodePoint();\n\t\t\t\treturn [TokenType.OpenCurly, '{', reader.representationStart, reader.representationEnd, undefined];\n\n\t\t\tcase RIGHT_CURLY_BRACKET:\n\t\t\t\treader.advanceCodePoint();\n\t\t\t\treturn [TokenType.CloseCurly, '}', reader.representationStart, reader.representationEnd, undefined];\n\n\t\t\tcase APOSTROPHE:\n\t\t\tcase QUOTATION_MARK:\n\t\t\t\treturn consumeStringToken(ctx, reader);\n\n\t\t\tcase NUMBER_SIGN:\n\t\t\t\treturn consumeHashToken(ctx, reader);\n\n\t\t\tcase PLUS_SIGN:\n\t\t\tcase FULL_STOP:\n\t\t\t\tif (checkIfThreeCodePointsWouldStartANumber(reader)) {\n\t\t\t\t\treturn consumeNumericToken(ctx, reader);\n\t\t\t\t}\n\n\t\t\t\treader.advanceCodePoint();\n\t\t\t\treturn [TokenType.Delim, reader.source[reader.representationStart], reader.representationStart, reader.representationEnd, {\n\t\t\t\t\tvalue: reader.source[reader.representationStart],\n\t\t\t\t}];\n\n\t\t\tcase LINE_FEED:\n\t\t\tcase CARRIAGE_RETURN:\n\t\t\tcase FORM_FEED:\n\t\t\tcase CHARACTER_TABULATION:\n\t\t\tcase SPACE:\n\t\t\t\treturn consumeWhiteSpace(reader);\n\n\t\t\tcase HYPHEN_MINUS:\n\t\t\t\tif (checkIfThreeCodePointsWouldStartANumber(reader)) {\n\t\t\t\t\treturn consumeNumericToken(ctx, reader);\n\t\t\t\t}\n\n\t\t\t\tif (checkIfThreeCodePointsWouldStartCDC(reader)) {\n\t\t\t\t\treader.advanceCodePoint(3);\n\n\t\t\t\t\treturn [TokenType.CDC, '-->', reader.representationStart, reader.representationEnd, undefined];\n\t\t\t\t}\n\n\t\t\t\tif (checkIfThreeCodePointsWouldStartAnIdentSequence(ctx, reader)) {\n\t\t\t\t\treturn consumeIdentLikeToken(ctx, reader);\n\t\t\t\t}\n\n\t\t\t\treader.advanceCodePoint();\n\t\t\t\treturn [TokenType.Delim, '-', reader.representationStart, reader.representationEnd, {\n\t\t\t\t\tvalue: '-',\n\t\t\t\t}];\n\n\t\t\tcase LESS_THAN_SIGN:\n\t\t\t\tif (checkIfFourCodePointsWouldStartCDO(reader)) {\n\t\t\t\t\treader.advanceCodePoint(4);\n\n\t\t\t\t\treturn [TokenType.CDO, '<!--', reader.representationStart, reader.representationEnd, undefined];\n\t\t\t\t}\n\n\t\t\t\treader.advanceCodePoint();\n\t\t\t\treturn [TokenType.Delim, '<', reader.representationStart, reader.representationEnd, {\n\t\t\t\t\tvalue: '<',\n\t\t\t\t}];\n\n\t\t\tcase COMMERCIAL_AT:\n\t\t\t\treader.advanceCodePoint();\n\t\t\t\tif (checkIfThreeCodePointsWouldStartAnIdentSequence(ctx, reader)) {\n\t\t\t\t\tconst identSequence = consumeIdentSequence(ctx, reader);\n\n\t\t\t\t\treturn [TokenType.AtKeyword, reader.source.slice(reader.representationStart, reader.representationEnd + 1), reader.representationStart, reader.representationEnd, {\n\t\t\t\t\t\tvalue: String.fromCodePoint(...identSequence),\n\t\t\t\t\t}];\n\t\t\t\t}\n\n\t\t\t\treturn [TokenType.Delim, '@', reader.representationStart, reader.representationEnd, {\n\t\t\t\t\tvalue: '@',\n\t\t\t\t}];\n\n\t\t\tcase REVERSE_SOLIDUS: {\n\t\t\t\tif (checkIfTwoCodePointsAreAValidEscape(reader)) {\n\t\t\t\t\treturn consumeIdentLikeToken(ctx, reader);\n\t\t\t\t}\n\n\t\t\t\treader.advanceCodePoint();\n\n\t\t\t\tconst token: CSSToken = [TokenType.Delim, '\\\\', reader.representationStart, reader.representationEnd, {\n\t\t\t\t\tvalue: '\\\\',\n\t\t\t\t}];\n\n\t\t\t\tctx.onParseError(new ParseErrorWithToken(\n\t\t\t\t\tParseErrorMessage.InvalidEscapeSequenceAfterBackslash,\n\t\t\t\t\treader.representationStart,\n\t\t\t\t\treader.representationEnd,\n\t\t\t\t\t[\n\t\t\t\t\t\t'4.3.1. Consume a token',\n\t\t\t\t\t\t'U+005C REVERSE SOLIDUS (\\\\)',\n\t\t\t\t\t\t'The input stream does not start with a valid escape sequence',\n\t\t\t\t\t],\n\t\t\t\t\ttoken\n\t\t\t\t));\n\n\t\t\t\treturn token;\n\t\t\t}\n\t\t}\n\n\t\treader.advanceCodePoint();\n\t\treturn [TokenType.Delim, reader.source[reader.representationStart], reader.representationStart, reader.representationEnd, {\n\t\t\tvalue: reader.source[reader.representationStart],\n\t\t}];\n\t}\n\n\treturn {\n\t\tnextToken: nextToken,\n\t\tendOfFile: endOfFile,\n\t};\n}\n\nfunction noop(): void { /* do nothing */ }\n", "import { HYPHEN_MINUS } from '../code-points/code-points';\nimport { isHexDigitCodePoint, isIdentCodePoint, isIdentStartCodePoint } from '../code-points/ranges';\nimport type { TokenDimension, TokenIdent } from '../interfaces/token';\n\n/**\n * Set the ident value and update the string representation.\n * This handles escaping.\n */\nexport function mutateIdent(ident: TokenIdent, newValue: string): void {\n\tconst codePoints: Array<number> = [];\n\tfor (const codePoint of newValue) {\n\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\tcodePoints.push(codePoint.codePointAt(0)!);\n\t}\n\n\tconst result = String.fromCodePoint(...ensureThatValueRoundTripsAsIdent(codePoints));\n\n\tident[1] = result;\n\tident[4].value = newValue;\n}\n\n/**\n * Set the unit and update the string representation.\n * This handles escaping.\n */\nexport function mutateUnit(ident: TokenDimension, newUnit: string): void {\n\tconst codePoints: Array<number> = [];\n\tfor (const codePoint of newUnit) {\n\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\tcodePoints.push(codePoint.codePointAt(0)!);\n\t}\n\n\tconst escapedCodePoints = ensureThatValueRoundTripsAsIdent(codePoints);\n\tif (escapedCodePoints[0] === 101) { // `e`\n\t\tinsertEscapedCodePoint(escapedCodePoints, 0, escapedCodePoints[0]);\n\t}\n\n\tconst result = String.fromCodePoint(...escapedCodePoints);\n\n\tconst signCharacter = ident[4].signCharacter === '+' ? ident[4].signCharacter : '';\n\tconst numericValue = ident[4].value.toString();\n\n\tident[1] = `${signCharacter}${numericValue}${result}`;\n\tident[4].unit = newUnit;\n}\n\nfunction ensureThatValueRoundTripsAsIdent(codePoints: Array<number>): Array<number> {\n\tlet remainderStartIndex = 0;\n\n\tif (codePoints[0] === HYPHEN_MINUS && codePoints[1] === HYPHEN_MINUS) {\n\t\tremainderStartIndex = 2;\n\t} else if (codePoints[0] === HYPHEN_MINUS && codePoints[1]) {\n\t\tremainderStartIndex = 2;\n\n\t\tif (!isIdentStartCodePoint(codePoints[1])) {\n\t\t\tremainderStartIndex += insertEscapedCodePoint(codePoints, 1, codePoints[1]);\n\t\t}\n\t} else if (isIdentStartCodePoint(codePoints[0])) {\n\t\tremainderStartIndex = 1;\n\t} else {\n\t\tremainderStartIndex = 1;\n\t\tremainderStartIndex += insertEscapedCodePoint(codePoints, 0, codePoints[0]);\n\t}\n\n\tfor (let i = remainderStartIndex; i < codePoints.length; i++) {\n\t\tif (isIdentCodePoint(codePoints[i])) {\n\t\t\tcontinue;\n\t\t}\n\n\t\ti += insertEscapedCodePoint(codePoints, i, codePoints[i]);\n\t}\n\n\treturn codePoints;\n}\n\nfunction insertEscapedCodePoint(codePoints: Array<number>, index: number, codePoint: number): number {\n\tconst hexRepresentation = codePoint.toString(16);\n\tconst codePointsForHexRepresentation: Array<number> = [];\n\n\tfor (const x of hexRepresentation) {\n\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\tcodePointsForHexRepresentation.push(x.codePointAt(0)!);\n\t}\n\n\tconst next = codePoints[index + 1];\n\tif (\n\t\t(index === codePoints.length - 1) ||\n\t\t(next && isHexDigitCodePoint(next))\n\t) {\n\t\tcodePoints.splice(\n\t\t\tindex,\n\t\t\t1,\n\t\t\t92, // `\\` backslash\n\t\t\t...codePointsForHexRepresentation,\n\t\t\t32, // ` ` space\n\t\t);\n\n\t\treturn 1 + codePointsForHexRepresentation.length;\n\t}\n\n\tcodePoints.splice(\n\t\tindex,\n\t\t1,\n\t\t92, // `\\` backslash\n\t\t...codePointsForHexRepresentation,\n\t);\n\n\treturn codePointsForHexRepresentation.length;\n}\n", "import type { CSSToken, NumericToken, TokenAtKeyword, TokenBadString, TokenBadURL, TokenCDC, TokenCDO, TokenCloseCurly, TokenCloseParen, TokenCloseSquare, TokenColon, TokenComma, TokenComment, TokenDelim, TokenDimension, TokenEOF, TokenFunction, TokenHash, TokenIdent, TokenNumber, TokenOpenCurly, TokenOpenParen, TokenOpenSquare, TokenPercentage, TokenSemicolon, TokenString, TokenURL, TokenUnicodeRange, TokenWhitespace } from '../interfaces/token';\nimport { TokenType } from '../interfaces/token';\n\nconst tokenTypes = Object.values(TokenType);\n\n/**\n * Assert that a given value has the general structure of a CSS token:\n * 1. is an array.\n * 2. has at least four items.\n * 3. has a known token type.\n * 4. has a string representation.\n * 5. has a start position.\n * 6. has an end position.\n */\nexport function isToken(x: any): x is CSSToken { // eslint-disable-line @typescript-eslint/no-explicit-any\n\tif (!Array.isArray(x)) {\n\t\treturn false;\n\t}\n\n\tif (x.length < 4) {\n\t\treturn false;\n\t}\n\n\tif (!tokenTypes.includes(x[0] as TokenType)) {\n\t\treturn false;\n\t}\n\n\tif (typeof x[1] !== 'string') {\n\t\treturn false;\n\t}\n\n\tif (typeof x[2] !== 'number') {\n\t\treturn false;\n\t}\n\n\tif (typeof x[3] !== 'number') {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n/**\n * Assert that a token is a numeric token\n */\nexport function isTokenNumeric(x?: CSSToken | null): x is NumericToken {\n\tif (!x) return false;\n\n\tswitch (x[0]) {\n\t\tcase TokenType.Dimension:\n\t\tcase TokenType.Number:\n\t\tcase TokenType.Percentage:\n\t\t\treturn true;\n\t\tdefault:\n\t\t\treturn false;\n\t}\n}\n\n/**\n * Assert that a token is a whitespace or comment token\n */\nexport function isTokenWhiteSpaceOrComment(x?: CSSToken | null): x is TokenWhitespace | TokenComment {\n\tif (!x) return false;\n\n\tswitch (x[0]) {\n\t\tcase TokenType.Whitespace:\n\t\tcase TokenType.Comment:\n\t\t\treturn true;\n\t\tdefault:\n\t\t\treturn false;\n\t}\n}\n\nexport function isTokenAtKeyword(x?: CSSToken | null): x is TokenAtKeyword {\n\treturn !!x && x[0] === TokenType.AtKeyword;\n}\nexport function isTokenBadString(x?: CSSToken | null): x is TokenBadString {\n\treturn !!x && x[0] === TokenType.BadString;\n}\nexport function isTokenBadURL(x?: CSSToken | null): x is TokenBadURL {\n\treturn !!x && x[0] === TokenType.BadURL;\n}\nexport function isTokenCDC(x?: CSSToken | null): x is TokenCDC {\n\treturn !!x && x[0] === TokenType.CDC;\n}\nexport function isTokenCDO(x?: CSSToken | null): x is TokenCDO {\n\treturn !!x && x[0] === TokenType.CDO;\n}\nexport function isTokenColon(x?: CSSToken | null): x is TokenColon {\n\treturn !!x && x[0] === TokenType.Colon;\n}\nexport function isTokenComma(x?: CSSToken | null): x is TokenComma {\n\treturn !!x && x[0] === TokenType.Comma;\n}\nexport function isTokenComment(x?: CSSToken | null): x is TokenComment {\n\treturn !!x && x[0] === TokenType.Comment;\n}\nexport function isTokenDelim(x?: CSSToken | null): x is TokenDelim {\n\treturn !!x && x[0] === TokenType.Delim;\n}\nexport function isTokenDimension(x?: CSSToken | null): x is TokenDimension {\n\treturn !!x && x[0] === TokenType.Dimension;\n}\nexport function isTokenEOF(x?: CSSToken | null): x is TokenEOF {\n\treturn !!x && x[0] === TokenType.EOF;\n}\nexport function isTokenFunction(x?: CSSToken | null): x is TokenFunction {\n\treturn !!x && x[0] === TokenType.Function;\n}\nexport function isTokenHash(x?: CSSToken | null): x is TokenHash {\n\treturn !!x && x[0] === TokenType.Hash;\n}\nexport function isTokenIdent(x?: CSSToken | null): x is TokenIdent {\n\treturn !!x && x[0] === TokenType.Ident;\n}\nexport function isTokenNumber(x?: CSSToken | null): x is TokenNumber {\n\treturn !!x && x[0] === TokenType.Number;\n}\nexport function isTokenPercentage(x?: CSSToken | null): x is TokenPercentage {\n\treturn !!x && x[0] === TokenType.Percentage;\n}\nexport function isTokenSemicolon(x?: CSSToken | null): x is TokenSemicolon {\n\treturn !!x && x[0] === TokenType.Semicolon;\n}\nexport function isTokenString(x?: CSSToken | null): x is TokenString {\n\treturn !!x && x[0] === TokenType.String;\n}\nexport function isTokenURL(x?: CSSToken | null): x is TokenURL {\n\treturn !!x && x[0] === TokenType.URL;\n}\nexport function isTokenWhitespace(x?: CSSToken | null): x is TokenWhitespace {\n\treturn !!x && x[0] === TokenType.Whitespace;\n}\nexport function isTokenOpenParen(x?: CSSToken | null): x is TokenOpenParen {\n\treturn !!x && x[0] === TokenType.OpenParen;\n}\nexport function isTokenCloseParen(x?: CSSToken | null): x is TokenCloseParen {\n\treturn !!x && x[0] === TokenType.CloseParen;\n}\nexport function isTokenOpenSquare(x?: CSSToken | null): x is TokenOpenSquare {\n\treturn !!x && x[0] === TokenType.OpenSquare;\n}\nexport function isTokenCloseSquare(x?: CSSToken | null): x is TokenCloseSquare {\n\treturn !!x && x[0] === TokenType.CloseSquare;\n}\nexport function isTokenOpenCurly(x?: CSSToken | null): x is TokenOpenCurly {\n\treturn !!x && x[0] === TokenType.OpenCurly;\n}\nexport function isTokenCloseCurly(x?: CSSToken | null): x is TokenCloseCurly {\n\treturn !!x && x[0] === TokenType.CloseCurly;\n}\nexport function isTokenUnicodeRange(x?: CSSToken | null): x is TokenUnicodeRange {\n\treturn !!x && x[0] === TokenType.UnicodeRange;\n}\n"],
  "mappings": "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",
  "names": ["TokenType", "NumberType", "HashType", "startOfRange"]
}
