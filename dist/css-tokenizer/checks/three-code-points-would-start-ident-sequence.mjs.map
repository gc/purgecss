{
  "version": 3,
  "sources": ["../../../src/css-tokenizer/code-points/code-points.ts", "../../../src/css-tokenizer/code-points/ranges.ts", "../../../src/css-tokenizer/checks/two-code-points-are-valid-escape.ts", "../../../src/css-tokenizer/checks/three-code-points-would-start-ident-sequence.ts"],
  "sourcesContent": ["/** ' */\nexport const APOSTROPHE = 0x0027;\n/** * */\nexport const ASTERISK = 0x002a;\n/** \\b */\nexport const BACKSPACE = 0x008;\n/** \\r */\nexport const CARRIAGE_RETURN = 0x00d;\n/** \\t */\nexport const CHARACTER_TABULATION = 0x009;\n/** : */\nexport const COLON = 0x003a;\n/** , */\nexport const COMMA = 0x002c;\n/** @ */\nexport const COMMERCIAL_AT = 0x0040;\n/** \\x7F */\nexport const DELETE = 0x007f;\n/** ! */\nexport const EXCLAMATION_MARK = 0x0021;\n/** \\f */\nexport const FORM_FEED = 0x000c;\n/** . */\nexport const FULL_STOP = 0x002e;\n/** > */\nexport const GREATER_THAN_SIGN = 0x003e;\n/** - */\nexport const HYPHEN_MINUS = 0x002d;\n/** \\x1F */\nexport const INFORMATION_SEPARATOR_ONE = 0x001f;\n/** E */\nexport const LATIN_CAPITAL_LETTER_E = 0x0045;\n/** e */\nexport const LATIN_SMALL_LETTER_E = 0x0065;\n/** { */\nexport const LEFT_CURLY_BRACKET = 0x007b;\n/** ( */\nexport const LEFT_PARENTHESIS = 0x0028;\n/** [ */\nexport const LEFT_SQUARE_BRACKET = 0x005b;\n/** < */\nexport const LESS_THAN_SIGN = 0x003c;\n/** \\n */\nexport const LINE_FEED = 0x00a;\n/** \\v */\nexport const LINE_TABULATION = 0x00b;\n/** _ */\nexport const LOW_LINE = 0x005f;\n/** \\x10FFFF */\nexport const MAXIMUM_ALLOWED_CODEPOINT = 0x10FFFF;\n/** \\x00 */\nexport const NULL = 0x000;\n/** # */\nexport const NUMBER_SIGN = 0x0023;\n/** % */\nexport const PERCENTAGE_SIGN = 0x0025;\n/** + */\nexport const PLUS_SIGN = 0x002b;\n/** \" */\nexport const QUOTATION_MARK = 0x0022;\n/** \uFFFD */\nexport const REPLACEMENT_CHARACTER = 0xFFFD;\n/** \\ */\nexport const REVERSE_SOLIDUS = 0x005c;\n/** } */\nexport const RIGHT_CURLY_BRACKET = 0x007d;\n/** ) */\nexport const RIGHT_PARENTHESIS = 0x0029;\n/** ] */\nexport const RIGHT_SQUARE_BRACKET = 0x005d;\n/** ; */\nexport const SEMICOLON = 0x003b;\n/** \\u0E */\nexport const SHIFT_OUT = 0x00e;\n/** / */\nexport const SOLIDUS = 0x002f;\n/** \\u20 */\nexport const SPACE = 0x0020;\n/** u */\nexport const LATIN_SMALL_LETTER_U = 0x0075;\n/** U */\nexport const LATIN_CAPITAL_LETTER_U = 0x0055;\n/** r */\nexport const LATIN_SMALL_LETTER_R = 0x0072;\n/** R */\nexport const LATIN_CAPITAL_LETTER_R = 0x0052;\n/** l */\nexport const LATIN_SMALL_LETTER_L = 0x006c;\n/** L */\nexport const LATIN_CAPITAL_LETTER_L = 0x004c;\n/** ? */\nexport const QUESTION_MARK = 0x003f;\n/** 0 */\nexport const DIGIT_ZERO = 0x0030;\n/** F */\nexport const LATIN_CAPITAL_LETTER_F = 0x0046;\n", "import { BACKSPACE, DELETE, INFORMATION_SEPARATOR_ONE, LINE_TABULATION, LOW_LINE, HYPHEN_MINUS, NULL, SHIFT_OUT, LINE_FEED, CARRIAGE_RETURN, FORM_FEED, SPACE, CHARACTER_TABULATION } from './code-points';\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#tokenizer-definitions\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#digit\nexport function isDigitCodePoint(search: number): boolean {\n\treturn search >= 0x0030 && search <= 0x0039;\n}\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#uppercase-letter\nfunction isUppercaseLetterCodePoint(search: number): boolean {\n\treturn search >= 0x0041 && search <= 0x005a;\n}\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#lowercase-letter\nfunction isLowercaseLetterCodePoint(search: number): boolean {\n\treturn search >= 0x0061 && search <= 0x007a;\n}\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#hex-digit\nexport function isHexDigitCodePoint(search: number): boolean {\n\treturn (\n\t\t(search >= 0x0030 && search <= 0x0039) || // 0 .. 9\n\t\t(search >= 0x0061 && search <= 0x0066) || // a .. f\n\t\t(search >= 0x0041 && search <= 0x0046)    // A .. F\n\t);\n}\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#letter\nfunction isLetterCodePoint(search: number): boolean {\n\treturn isLowercaseLetterCodePoint(search) || isUppercaseLetterCodePoint(search);\n}\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#ident-start-code-point\nexport function isIdentStartCodePoint(search: number): boolean {\n\treturn isLetterCodePoint(search) || isNonASCII_IdentCodePoint(search) || search === LOW_LINE;\n}\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#ident-code-point\nexport function isIdentCodePoint(search: number): boolean {\n\treturn isIdentStartCodePoint(search) || isDigitCodePoint(search) || search === HYPHEN_MINUS;\n}\n\n// https://drafts.csswg.org/css-syntax/#non-ascii-ident-code-point\nfunction isNonASCII_IdentCodePoint(search: number): boolean {\n\tif (\n\t\tsearch === 0x00B7 ||\n\t\tsearch === 0x200C ||\n\t\tsearch === 0x200D ||\n\t\tsearch === 0x203F ||\n\t\tsearch === 0x2040 ||\n\t\tsearch === 0x200C\n\t) {\n\t\treturn true;\n\t}\n\n\tif (\n\t\t(0x00C0 <= search && search <= 0x00D6) ||\n\t\t(0x00D8 <= search && search <= 0x00F6) ||\n\t\t(0x00F8 <= search && search <= 0x037D) ||\n\t\t(0x037F <= search && search <= 0x1FFF) ||\n\t\t(0x2070 <= search && search <= 0x218F) ||\n\t\t(0x2C00 <= search && search <= 0x2FEF) ||\n\t\t(0x3001 <= search && search <= 0xD7FF) ||\n\t\t(0xF900 <= search && search <= 0xFDCF) ||\n\t\t(0xFDF0 <= search && search <= 0xFFFD)\n\t) {\n\t\treturn true;\n\t}\n\n\t// Input preprocessing\n\tif (search === 0x000) {\n\t\treturn true;\n\t} else if (isSurrogate(search)) {\n\t\treturn true;\n\t}\n\n\treturn search >= 0x10000;\n}\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#non-printable-code-point\nexport function isNonPrintableCodePoint(search: number): boolean {\n\treturn (\n\t\t(search === LINE_TABULATION) ||\n\t\t(search === DELETE) ||\n\t\t(NULL <= search && search <= BACKSPACE) ||\n\t\t(SHIFT_OUT <= search && search <= INFORMATION_SEPARATOR_ONE)\n\t);\n}\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#whitespace\nexport function isNewLine(search: number): boolean {\n\treturn search === LINE_FEED || search === CARRIAGE_RETURN || search === FORM_FEED;\n}\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#whitespace\nexport function isWhitespace(search: number): boolean {\n\treturn search === SPACE || search === LINE_FEED || search === CHARACTER_TABULATION || search === CARRIAGE_RETURN || search === FORM_FEED;\n}\n\n// https://infra.spec.whatwg.org/#surrogate\nexport function isSurrogate(search: number): boolean {\n\treturn search >= 0xd800 && search <= 0xdfff;\n}\n", "import { REVERSE_SOLIDUS } from '../code-points/code-points';\nimport { isNewLine } from '../code-points/ranges';\nimport type { CodePointReader } from '../interfaces/code-point-reader';\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#starts-with-a-valid-escape\nexport function checkIfTwoCodePointsAreAValidEscape(reader: CodePointReader): boolean {\n\treturn (\n\t\t// If the first code point is not U+005C REVERSE SOLIDUS (\\), return false.\n\t\treader.source.codePointAt(reader.cursor) === REVERSE_SOLIDUS &&\n\t\t// Otherwise, if the second code point is a newline, return false.\n\t\t!isNewLine(reader.source.codePointAt(reader.cursor + 1) ?? -1)\n\t);\n}\n", "import { HYPHEN_MINUS, REVERSE_SOLIDUS } from '../code-points/code-points';\nimport { isIdentStartCodePoint, isNewLine } from '../code-points/ranges';\nimport type { CodePointReader } from '../interfaces/code-point-reader';\nimport type { Context } from '../interfaces/context';\nimport { checkIfTwoCodePointsAreAValidEscape } from './two-code-points-are-valid-escape';\n\n// https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#would-start-an-identifier\nexport function checkIfThreeCodePointsWouldStartAnIdentSequence(ctx: Context, reader: CodePointReader): boolean {\n\t// // U+002D HYPHEN-MINUS\n\tif (reader.source.codePointAt(reader.cursor) === HYPHEN_MINUS) {\n\t\t// If the second code point is a U+002D HYPHEN-MINUS return true\n\t\tif (reader.source.codePointAt(reader.cursor + 1) === HYPHEN_MINUS) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// If the second code point is an ident-start code point return true\n\t\tif (isIdentStartCodePoint(reader.source.codePointAt(reader.cursor + 1) ?? -1)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// If the second and third code points are a valid escape return true\n\t\tif (reader.source.codePointAt(reader.cursor + 1) === REVERSE_SOLIDUS && !isNewLine(reader.source.codePointAt(reader.cursor + 2) ?? -1)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t// ident-start code point\n\t// Return true.\n\tif (isIdentStartCodePoint(reader.source.codePointAt(reader.cursor) ?? -1)) {\n\t\treturn true;\n\t}\n\n\t// U+005C REVERSE SOLIDUS (\\)\n\treturn checkIfTwoCodePointsAreAValidEscape(reader);\n}\n"],
  "mappings": ";;;;AAOO,IAAM,kBAAkB;AAcxB,IAAM,YAAY;AAMlB,IAAM,eAAe;AAgBrB,IAAM,YAAY;AAIlB,IAAM,WAAW;AAgBjB,IAAM,kBAAkB;;;ACtD/B,SAAS,2BAA2B,QAAyB;AAC5D,SAAO,UAAU,MAAU,UAAU;AACtC;AAFS;AAKT,SAAS,2BAA2B,QAAyB;AAC5D,SAAO,UAAU,MAAU,UAAU;AACtC;AAFS;AAcT,SAAS,kBAAkB,QAAyB;AACnD,SAAO,2BAA2B,MAAM,KAAK,2BAA2B,MAAM;AAC/E;AAFS;AAKF,SAAS,sBAAsB,QAAyB;AAC9D,SAAO,kBAAkB,MAAM,KAAK,0BAA0B,MAAM,KAAK,WAAW;AACrF;AAFgB;AAUhB,SAAS,0BAA0B,QAAyB;AAC3D,MACC,WAAW,OACX,WAAW,QACX,WAAW,QACX,WAAW,QACX,WAAW,QACX,WAAW,MACV;AACD,WAAO;AAAA,EACR;AAEA,MACE,OAAU,UAAU,UAAU,OAC9B,OAAU,UAAU,UAAU,OAC9B,OAAU,UAAU,UAAU,OAC9B,OAAU,UAAU,UAAU,QAC9B,QAAU,UAAU,UAAU,QAC9B,SAAU,UAAU,UAAU,SAC9B,SAAU,UAAU,UAAU,SAC9B,SAAU,UAAU,UAAU,SAC9B,SAAU,UAAU,UAAU,OAC9B;AACD,WAAO;AAAA,EACR;AAGA,MAAI,WAAW,GAAO;AACrB,WAAO;AAAA,EACR,WAAW,YAAY,MAAM,GAAG;AAC/B,WAAO;AAAA,EACR;AAEA,SAAO,UAAU;AAClB;AAlCS;AA+CF,SAAS,UAAU,QAAyB;AAClD,SAAO,WAAW,aAAa,WAAW,mBAAmB,WAAW;AACzE;AAFgB;AAUT,SAAS,YAAY,QAAyB;AACpD,SAAO,UAAU,SAAU,UAAU;AACtC;AAFgB;;;AC/FT,SAAS,oCAAoC,QAAkC;AACrF;AAAA;AAAA,IAEC,OAAO,OAAO,YAAY,OAAO,MAAM,MAAM;AAAA,IAE7C,CAAC,UAAU,OAAO,OAAO,YAAY,OAAO,SAAS,CAAC,KAAK,EAAE;AAAA;AAE/D;AAPgB;;;ACET,SAAS,gDAAgD,KAAc,QAAkC;AAE/G,MAAI,OAAO,OAAO,YAAY,OAAO,MAAM,MAAM,cAAc;AAE9D,QAAI,OAAO,OAAO,YAAY,OAAO,SAAS,CAAC,MAAM,cAAc;AAClE,aAAO;AAAA,IACR;AAGA,QAAI,sBAAsB,OAAO,OAAO,YAAY,OAAO,SAAS,CAAC,KAAK,EAAE,GAAG;AAC9E,aAAO;AAAA,IACR;AAGA,QAAI,OAAO,OAAO,YAAY,OAAO,SAAS,CAAC,MAAM,mBAAmB,CAAC,UAAU,OAAO,OAAO,YAAY,OAAO,SAAS,CAAC,KAAK,EAAE,GAAG;AACvI,aAAO;AAAA,IACR;AAEA,WAAO;AAAA,EACR;AAIA,MAAI,sBAAsB,OAAO,OAAO,YAAY,OAAO,MAAM,KAAK,EAAE,GAAG;AAC1E,WAAO;AAAA,EACR;AAGA,SAAO,oCAAoC,MAAM;AAClD;AA7BgB;",
  "names": []
}
