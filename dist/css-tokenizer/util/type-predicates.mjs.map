{
  "version": 3,
  "sources": ["../../../src/css-tokenizer/interfaces/token.ts", "../../../src/css-tokenizer/util/type-predicates.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-empty-object-type */\n\n/**\n * All possible CSS token types\n */\nexport enum TokenType {\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#comment-diagram}\n\t */\n\tComment = 'comment',\n\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-at-keyword-token}\n\t */\n\tAtKeyword = 'at-keyword-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-bad-string-token}\n\t */\n\tBadString = 'bad-string-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-bad-url-token}\n\t */\n\tBadURL = 'bad-url-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-cdc-token}\n\t */\n\tCDC = 'CDC-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-cdo-token}\n\t */\n\tCDO = 'CDO-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-colon-token}\n\t */\n\tColon = 'colon-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-comma-token}\n\t */\n\tComma = 'comma-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-delim-token}\n\t */\n\tDelim = 'delim-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-dimension-token}\n\t */\n\tDimension = 'dimension-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-eof-token}\n\t */\n\tEOF = 'EOF-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-function-token}\n\t */\n\tFunction = 'function-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-hash-token}\n\t */\n\tHash = 'hash-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-ident-token}\n\t */\n\tIdent = 'ident-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-percentage-token}\n\t */\n\tNumber = 'number-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-percentage-token}\n\t */\n\tPercentage = 'percentage-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-semicolon-token}\n\t */\n\tSemicolon = 'semicolon-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-string-token}\n\t */\n\tString = 'string-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-url-token}\n\t */\n\tURL = 'url-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-whitespace-token}\n\t */\n\tWhitespace = 'whitespace-token',\n\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#tokendef-open-paren}\n\t */\n\tOpenParen = '(-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#tokendef-close-paren}\n\t */\n\tCloseParen = ')-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#tokendef-open-square}\n\t */\n\tOpenSquare = '[-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#tokendef-close-square}\n\t */\n\tCloseSquare = ']-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#tokendef-open-curly}\n\t */\n\tOpenCurly = '{-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#tokendef-close-curly}\n\t */\n\tCloseCurly = '}-token',\n\n\t/**\n\t * Only appears in the token stream when the `unicodeRangesAllowed` option is set to true.\n\t *\n\t * @example\n\t * ```js\n\t * import { tokenize } from '@csstools/css-tokenizer';\n\t *\n\t * const tokens = tokenize({\n\t * \tcss: `U+0025-00FF, U+4??`,\n\t * \tunicodeRangesAllowed: true,\n\t * });\n\t *\n\t * console.log(tokens);\n\t * ```\n\t *\n\t * @see {@link https://drafts.csswg.org/css-syntax/#typedef-unicode-range-token}\n\t */\n\tUnicodeRange = 'unicode-range-token',\n}\n\n/**\n * The type of number token\n * Either `integer` or `number`\n */\nexport enum NumberType {\n\tInteger = 'integer',\n\tNumber = 'number',\n}\n\n/**\n * The type of hash token\n */\nexport enum HashType {\n\t/**\n\t * The hash token did not start with an ident sequence (e.g. `#-2`)\n\t */\n\tUnrestricted = 'unrestricted',\n\t/**\n\t * The hash token started with an ident sequence (e.g. `#foo`)\n\t * Only hash tokens with the \"id\" type are valid ID selectors.\n\t */\n\tID = 'id',\n}\n\nexport interface TokenAtKeyword extends Token<TokenType.AtKeyword, {\n\t/**\n\t * The unescaped at-keyword name without the leading `@`.\n\t */\n\tvalue: string\n}> {}\nexport interface TokenBadString extends Token<TokenType.BadString, undefined> {}\nexport interface TokenBadURL extends Token<TokenType.BadURL, undefined> {}\nexport interface TokenCDC extends Token<TokenType.CDC, undefined> {}\nexport interface TokenCDO extends Token<TokenType.CDO, undefined> {}\nexport interface TokenColon extends Token<TokenType.Colon, undefined> {}\nexport interface TokenComma extends Token<TokenType.Comma, undefined> {}\nexport interface TokenComment extends Token<TokenType.Comment, undefined> {}\nexport interface TokenDelim extends Token<TokenType.Delim, {\n\t/**\n\t * The delim character.\n\t */\n\tvalue: string\n}> {}\nexport interface TokenDimension extends Token<TokenType.Dimension, {\n\t/**\n\t * The numeric value.\n\t */\n\tvalue: number,\n\t/**\n\t * The unescaped unit name.\n\t */\n\tunit: string,\n\t/**\n\t * `integer` or `number`\n\t */\n\ttype: NumberType\n\t/**\n\t * The sign character as it appeared in the source.\n\t * This is only useful if you need to determine if a value was written as \"2px\" or \"+2px\".\n\t */\n\tsignCharacter?: '+' | '-',\n}> {}\nexport interface TokenEOF extends Token<TokenType.EOF, undefined> {}\nexport interface TokenFunction extends Token<TokenType.Function, {\n\t/**\n\t * The unescaped function name without the trailing `(`.\n\t */\n\tvalue: string\n}> {}\nexport interface TokenHash extends Token<TokenType.Hash, {\n\t/**\n\t * The unescaped hash value without the leading `#`.\n\t */\n\tvalue: string,\n\t/**\n\t * The hash type.\n\t */\n\ttype: HashType\n}> {}\nexport interface TokenIdent extends Token<TokenType.Ident, {\n\t/**\n\t * The unescaped ident value.\n\t */\n\tvalue: string\n}> {}\nexport interface TokenNumber extends Token<TokenType.Number, {\n\t/**\n\t * The numeric value.\n\t */\n\tvalue: number,\n\t/**\n\t * `integer` or `number`\n\t */\n\ttype: NumberType\n\t/**\n\t * The sign character as it appeared in the source.\n\t * This is only useful if you need to determine if a value was written as \"2\" or \"+2\".\n\t */\n\tsignCharacter?: '+' | '-',\n}> {}\nexport interface TokenPercentage extends Token<TokenType.Percentage, {\n\t/**\n * The numeric value.\n */\n\tvalue: number,\n\t/**\n\t * The sign character as it appeared in the source.\n\t * This is only useful if you need to determine if a value was written as \"2%\" or \"+2%\".\n\t */\n\tsignCharacter?: '+' | '-',\n}> {}\nexport interface TokenSemicolon extends Token<TokenType.Semicolon, undefined> {}\nexport interface TokenString extends Token<TokenType.String, {\n\t/**\n\t * The unescaped string value without the leading and trailing quotes.\n\t */\n\tvalue: string\n}> {}\nexport interface TokenURL extends Token<TokenType.URL, {\n\t/**\n\t * The unescaped URL value without the leading `url(` and trailing `)`.\n\t */\n\tvalue: string\n}> {}\nexport interface TokenWhitespace extends Token<TokenType.Whitespace, undefined> {}\n\nexport interface TokenOpenParen extends Token<TokenType.OpenParen, undefined> {}\nexport interface TokenCloseParen extends Token<TokenType.CloseParen, undefined> {}\nexport interface TokenOpenSquare extends Token<TokenType.OpenSquare, undefined> {}\nexport interface TokenCloseSquare extends Token<TokenType.CloseSquare, undefined> {}\nexport interface TokenOpenCurly extends Token<TokenType.OpenCurly, undefined> {}\nexport interface TokenCloseCurly extends Token<TokenType.CloseCurly, undefined> {}\n\nexport interface TokenUnicodeRange extends Token<TokenType.UnicodeRange, {\n\tstartOfRange: number,\n\tendOfRange: number\n}> {}\n\n/**\n * The union of all possible CSS tokens\n */\nexport type CSSToken = TokenAtKeyword |\n\tTokenBadString |\n\tTokenBadURL |\n\tTokenCDC |\n\tTokenCDO |\n\tTokenColon |\n\tTokenComma |\n\tTokenComment |\n\tTokenDelim |\n\tTokenDimension |\n\tTokenEOF |\n\tTokenFunction |\n\tTokenHash |\n\tTokenIdent |\n\tTokenNumber |\n\tTokenPercentage |\n\tTokenSemicolon |\n\tTokenString |\n\tTokenURL |\n\tTokenWhitespace |\n\tTokenOpenParen |\n\tTokenCloseParen |\n\tTokenOpenSquare |\n\tTokenCloseSquare |\n\tTokenOpenCurly |\n\tTokenCloseCurly |\n\tTokenUnicodeRange;\n\n/**\n * The union of all possible CSS tokens that represent a numeric value\n */\nexport type NumericToken =\n\tTokenDimension |\n\tTokenNumber |\n\tTokenPercentage;\n\n/**\n * The CSS Token interface\n *\n * @remarks\n * CSS Tokens are fully typed and have a strict structure.\n * This makes it easier to iterate and analyze a token stream.\n *\n * The string representation and the parsed value are stored separately for many token types.\n * It is always assumed that the string representation will be used when stringifying, while the parsed value should be used when analyzing tokens.\n */\nexport interface Token<T extends TokenType, U> extends Array<T | string | number | U> {\n\t/**\n\t * The type of token\n\t */\n\t0: T,\n\t/**\n\t * The token representation\n\t *\n\t * @remarks\n\t * This field will be used when stringifying the token.\n\t * Any stored value is assumed to be valid CSS.\n\t *\n\t * You should never use this field when analyzing the token when there is a parsed value available.\n\t * But you must store mutated values here.\n\t */\n\t1: string,\n\t/**\n\t * Start position of representation\n\t */\n\t2: number,\n\t/**\n\t * End position of representation\n\t */\n\t3: number,\n\t/**\n\t * Extra data\n\t *\n\t * @remarks\n\t * This holds the parsed value of each token.\n\t * These values are unescaped, unquoted, converted to numbers, etc.\n\t *\n\t * You should always use this field when analyzing the token.\n\t * But you must not assume that mutating only this field will have any effect.\n\t */\n\t4: U,\n}\n\n/**\n * Get the mirror variant type of a given token type\n *\n * @example\n *\n * ```js\n * const input = TokenType.OpenParen;\n * const output = mirrorVariantType(input);\n *\n * console.log(output); // TokenType.CloseParen\n * ```\n */\nexport function mirrorVariantType(type: TokenType): TokenType | null {\n\tswitch (type) {\n\t\tcase TokenType.OpenParen:\n\t\t\treturn TokenType.CloseParen;\n\t\tcase TokenType.CloseParen:\n\t\t\treturn TokenType.OpenParen;\n\n\t\tcase TokenType.OpenCurly:\n\t\t\treturn TokenType.CloseCurly;\n\t\tcase TokenType.CloseCurly:\n\t\t\treturn TokenType.OpenCurly;\n\n\t\tcase TokenType.OpenSquare:\n\t\t\treturn TokenType.CloseSquare;\n\t\tcase TokenType.CloseSquare:\n\t\t\treturn TokenType.OpenSquare;\n\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n\n/**\n * Get the mirror variant of a given token\n *\n * @example\n *\n * ```js\n * const input = [TokenType.OpenParen, '(', 0, 1, undefined];\n * const output = mirrorVariant(input);\n *\n * console.log(output); // [TokenType.CloseParen, ')', -1, -1, undefined]\n * ```\n */\nexport function mirrorVariant(token: CSSToken): CSSToken | null {\n\tswitch (token[0]) {\n\t\tcase TokenType.OpenParen:\n\t\t\treturn [TokenType.CloseParen, ')', -1, -1, undefined];\n\t\tcase TokenType.CloseParen:\n\t\t\treturn [TokenType.OpenParen, '(', -1, -1, undefined];\n\n\t\tcase TokenType.OpenCurly:\n\t\t\treturn [TokenType.CloseCurly, '}', -1, -1, undefined];\n\t\tcase TokenType.CloseCurly:\n\t\t\treturn [TokenType.OpenCurly, '{', -1, -1, undefined];\n\n\t\tcase TokenType.OpenSquare:\n\t\t\treturn [TokenType.CloseSquare, ']', -1, -1, undefined];\n\t\tcase TokenType.CloseSquare:\n\t\t\treturn [TokenType.OpenSquare, '[', -1, -1, undefined];\n\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n", "import type { CSSToken, NumericToken, TokenAtKeyword, TokenBadString, TokenBadURL, TokenCDC, TokenCDO, TokenCloseCurly, TokenCloseParen, TokenCloseSquare, TokenColon, TokenComma, TokenComment, TokenDelim, TokenDimension, TokenEOF, TokenFunction, TokenHash, TokenIdent, TokenNumber, TokenOpenCurly, TokenOpenParen, TokenOpenSquare, TokenPercentage, TokenSemicolon, TokenString, TokenURL, TokenUnicodeRange, TokenWhitespace } from '../interfaces/token';\nimport { TokenType } from '../interfaces/token';\n\nconst tokenTypes = Object.values(TokenType);\n\n/**\n * Assert that a given value has the general structure of a CSS token:\n * 1. is an array.\n * 2. has at least four items.\n * 3. has a known token type.\n * 4. has a string representation.\n * 5. has a start position.\n * 6. has an end position.\n */\nexport function isToken(x: any): x is CSSToken { // eslint-disable-line @typescript-eslint/no-explicit-any\n\tif (!Array.isArray(x)) {\n\t\treturn false;\n\t}\n\n\tif (x.length < 4) {\n\t\treturn false;\n\t}\n\n\tif (!tokenTypes.includes(x[0] as TokenType)) {\n\t\treturn false;\n\t}\n\n\tif (typeof x[1] !== 'string') {\n\t\treturn false;\n\t}\n\n\tif (typeof x[2] !== 'number') {\n\t\treturn false;\n\t}\n\n\tif (typeof x[3] !== 'number') {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n/**\n * Assert that a token is a numeric token\n */\nexport function isTokenNumeric(x?: CSSToken | null): x is NumericToken {\n\tif (!x) return false;\n\n\tswitch (x[0]) {\n\t\tcase TokenType.Dimension:\n\t\tcase TokenType.Number:\n\t\tcase TokenType.Percentage:\n\t\t\treturn true;\n\t\tdefault:\n\t\t\treturn false;\n\t}\n}\n\n/**\n * Assert that a token is a whitespace or comment token\n */\nexport function isTokenWhiteSpaceOrComment(x?: CSSToken | null): x is TokenWhitespace | TokenComment {\n\tif (!x) return false;\n\n\tswitch (x[0]) {\n\t\tcase TokenType.Whitespace:\n\t\tcase TokenType.Comment:\n\t\t\treturn true;\n\t\tdefault:\n\t\t\treturn false;\n\t}\n}\n\nexport function isTokenAtKeyword(x?: CSSToken | null): x is TokenAtKeyword {\n\treturn !!x && x[0] === TokenType.AtKeyword;\n}\nexport function isTokenBadString(x?: CSSToken | null): x is TokenBadString {\n\treturn !!x && x[0] === TokenType.BadString;\n}\nexport function isTokenBadURL(x?: CSSToken | null): x is TokenBadURL {\n\treturn !!x && x[0] === TokenType.BadURL;\n}\nexport function isTokenCDC(x?: CSSToken | null): x is TokenCDC {\n\treturn !!x && x[0] === TokenType.CDC;\n}\nexport function isTokenCDO(x?: CSSToken | null): x is TokenCDO {\n\treturn !!x && x[0] === TokenType.CDO;\n}\nexport function isTokenColon(x?: CSSToken | null): x is TokenColon {\n\treturn !!x && x[0] === TokenType.Colon;\n}\nexport function isTokenComma(x?: CSSToken | null): x is TokenComma {\n\treturn !!x && x[0] === TokenType.Comma;\n}\nexport function isTokenComment(x?: CSSToken | null): x is TokenComment {\n\treturn !!x && x[0] === TokenType.Comment;\n}\nexport function isTokenDelim(x?: CSSToken | null): x is TokenDelim {\n\treturn !!x && x[0] === TokenType.Delim;\n}\nexport function isTokenDimension(x?: CSSToken | null): x is TokenDimension {\n\treturn !!x && x[0] === TokenType.Dimension;\n}\nexport function isTokenEOF(x?: CSSToken | null): x is TokenEOF {\n\treturn !!x && x[0] === TokenType.EOF;\n}\nexport function isTokenFunction(x?: CSSToken | null): x is TokenFunction {\n\treturn !!x && x[0] === TokenType.Function;\n}\nexport function isTokenHash(x?: CSSToken | null): x is TokenHash {\n\treturn !!x && x[0] === TokenType.Hash;\n}\nexport function isTokenIdent(x?: CSSToken | null): x is TokenIdent {\n\treturn !!x && x[0] === TokenType.Ident;\n}\nexport function isTokenNumber(x?: CSSToken | null): x is TokenNumber {\n\treturn !!x && x[0] === TokenType.Number;\n}\nexport function isTokenPercentage(x?: CSSToken | null): x is TokenPercentage {\n\treturn !!x && x[0] === TokenType.Percentage;\n}\nexport function isTokenSemicolon(x?: CSSToken | null): x is TokenSemicolon {\n\treturn !!x && x[0] === TokenType.Semicolon;\n}\nexport function isTokenString(x?: CSSToken | null): x is TokenString {\n\treturn !!x && x[0] === TokenType.String;\n}\nexport function isTokenURL(x?: CSSToken | null): x is TokenURL {\n\treturn !!x && x[0] === TokenType.URL;\n}\nexport function isTokenWhitespace(x?: CSSToken | null): x is TokenWhitespace {\n\treturn !!x && x[0] === TokenType.Whitespace;\n}\nexport function isTokenOpenParen(x?: CSSToken | null): x is TokenOpenParen {\n\treturn !!x && x[0] === TokenType.OpenParen;\n}\nexport function isTokenCloseParen(x?: CSSToken | null): x is TokenCloseParen {\n\treturn !!x && x[0] === TokenType.CloseParen;\n}\nexport function isTokenOpenSquare(x?: CSSToken | null): x is TokenOpenSquare {\n\treturn !!x && x[0] === TokenType.OpenSquare;\n}\nexport function isTokenCloseSquare(x?: CSSToken | null): x is TokenCloseSquare {\n\treturn !!x && x[0] === TokenType.CloseSquare;\n}\nexport function isTokenOpenCurly(x?: CSSToken | null): x is TokenOpenCurly {\n\treturn !!x && x[0] === TokenType.OpenCurly;\n}\nexport function isTokenCloseCurly(x?: CSSToken | null): x is TokenCloseCurly {\n\treturn !!x && x[0] === TokenType.CloseCurly;\n}\nexport function isTokenUnicodeRange(x?: CSSToken | null): x is TokenUnicodeRange {\n\treturn !!x && x[0] === TokenType.UnicodeRange;\n}\n"],
  "mappings": "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",
  "names": ["TokenType"]
}
