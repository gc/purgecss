{
  "version": 3,
  "sources": ["../../../src/css-tokenizer/interfaces/token.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-empty-object-type */\n\n/**\n * All possible CSS token types\n */\nexport enum TokenType {\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#comment-diagram}\n\t */\n\tComment = 'comment',\n\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-at-keyword-token}\n\t */\n\tAtKeyword = 'at-keyword-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-bad-string-token}\n\t */\n\tBadString = 'bad-string-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-bad-url-token}\n\t */\n\tBadURL = 'bad-url-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-cdc-token}\n\t */\n\tCDC = 'CDC-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-cdo-token}\n\t */\n\tCDO = 'CDO-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-colon-token}\n\t */\n\tColon = 'colon-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-comma-token}\n\t */\n\tComma = 'comma-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-delim-token}\n\t */\n\tDelim = 'delim-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-dimension-token}\n\t */\n\tDimension = 'dimension-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-eof-token}\n\t */\n\tEOF = 'EOF-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-function-token}\n\t */\n\tFunction = 'function-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-hash-token}\n\t */\n\tHash = 'hash-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-ident-token}\n\t */\n\tIdent = 'ident-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-percentage-token}\n\t */\n\tNumber = 'number-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-percentage-token}\n\t */\n\tPercentage = 'percentage-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-semicolon-token}\n\t */\n\tSemicolon = 'semicolon-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-string-token}\n\t */\n\tString = 'string-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-url-token}\n\t */\n\tURL = 'url-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-whitespace-token}\n\t */\n\tWhitespace = 'whitespace-token',\n\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#tokendef-open-paren}\n\t */\n\tOpenParen = '(-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#tokendef-close-paren}\n\t */\n\tCloseParen = ')-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#tokendef-open-square}\n\t */\n\tOpenSquare = '[-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#tokendef-close-square}\n\t */\n\tCloseSquare = ']-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#tokendef-open-curly}\n\t */\n\tOpenCurly = '{-token',\n\t/**\n\t * @see {@link https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#tokendef-close-curly}\n\t */\n\tCloseCurly = '}-token',\n\n\t/**\n\t * Only appears in the token stream when the `unicodeRangesAllowed` option is set to true.\n\t *\n\t * @example\n\t * ```js\n\t * import { tokenize } from '@csstools/css-tokenizer';\n\t *\n\t * const tokens = tokenize({\n\t * \tcss: `U+0025-00FF, U+4??`,\n\t * \tunicodeRangesAllowed: true,\n\t * });\n\t *\n\t * console.log(tokens);\n\t * ```\n\t *\n\t * @see {@link https://drafts.csswg.org/css-syntax/#typedef-unicode-range-token}\n\t */\n\tUnicodeRange = 'unicode-range-token',\n}\n\n/**\n * The type of number token\n * Either `integer` or `number`\n */\nexport enum NumberType {\n\tInteger = 'integer',\n\tNumber = 'number',\n}\n\n/**\n * The type of hash token\n */\nexport enum HashType {\n\t/**\n\t * The hash token did not start with an ident sequence (e.g. `#-2`)\n\t */\n\tUnrestricted = 'unrestricted',\n\t/**\n\t * The hash token started with an ident sequence (e.g. `#foo`)\n\t * Only hash tokens with the \"id\" type are valid ID selectors.\n\t */\n\tID = 'id',\n}\n\nexport interface TokenAtKeyword extends Token<TokenType.AtKeyword, {\n\t/**\n\t * The unescaped at-keyword name without the leading `@`.\n\t */\n\tvalue: string\n}> {}\nexport interface TokenBadString extends Token<TokenType.BadString, undefined> {}\nexport interface TokenBadURL extends Token<TokenType.BadURL, undefined> {}\nexport interface TokenCDC extends Token<TokenType.CDC, undefined> {}\nexport interface TokenCDO extends Token<TokenType.CDO, undefined> {}\nexport interface TokenColon extends Token<TokenType.Colon, undefined> {}\nexport interface TokenComma extends Token<TokenType.Comma, undefined> {}\nexport interface TokenComment extends Token<TokenType.Comment, undefined> {}\nexport interface TokenDelim extends Token<TokenType.Delim, {\n\t/**\n\t * The delim character.\n\t */\n\tvalue: string\n}> {}\nexport interface TokenDimension extends Token<TokenType.Dimension, {\n\t/**\n\t * The numeric value.\n\t */\n\tvalue: number,\n\t/**\n\t * The unescaped unit name.\n\t */\n\tunit: string,\n\t/**\n\t * `integer` or `number`\n\t */\n\ttype: NumberType\n\t/**\n\t * The sign character as it appeared in the source.\n\t * This is only useful if you need to determine if a value was written as \"2px\" or \"+2px\".\n\t */\n\tsignCharacter?: '+' | '-',\n}> {}\nexport interface TokenEOF extends Token<TokenType.EOF, undefined> {}\nexport interface TokenFunction extends Token<TokenType.Function, {\n\t/**\n\t * The unescaped function name without the trailing `(`.\n\t */\n\tvalue: string\n}> {}\nexport interface TokenHash extends Token<TokenType.Hash, {\n\t/**\n\t * The unescaped hash value without the leading `#`.\n\t */\n\tvalue: string,\n\t/**\n\t * The hash type.\n\t */\n\ttype: HashType\n}> {}\nexport interface TokenIdent extends Token<TokenType.Ident, {\n\t/**\n\t * The unescaped ident value.\n\t */\n\tvalue: string\n}> {}\nexport interface TokenNumber extends Token<TokenType.Number, {\n\t/**\n\t * The numeric value.\n\t */\n\tvalue: number,\n\t/**\n\t * `integer` or `number`\n\t */\n\ttype: NumberType\n\t/**\n\t * The sign character as it appeared in the source.\n\t * This is only useful if you need to determine if a value was written as \"2\" or \"+2\".\n\t */\n\tsignCharacter?: '+' | '-',\n}> {}\nexport interface TokenPercentage extends Token<TokenType.Percentage, {\n\t/**\n * The numeric value.\n */\n\tvalue: number,\n\t/**\n\t * The sign character as it appeared in the source.\n\t * This is only useful if you need to determine if a value was written as \"2%\" or \"+2%\".\n\t */\n\tsignCharacter?: '+' | '-',\n}> {}\nexport interface TokenSemicolon extends Token<TokenType.Semicolon, undefined> {}\nexport interface TokenString extends Token<TokenType.String, {\n\t/**\n\t * The unescaped string value without the leading and trailing quotes.\n\t */\n\tvalue: string\n}> {}\nexport interface TokenURL extends Token<TokenType.URL, {\n\t/**\n\t * The unescaped URL value without the leading `url(` and trailing `)`.\n\t */\n\tvalue: string\n}> {}\nexport interface TokenWhitespace extends Token<TokenType.Whitespace, undefined> {}\n\nexport interface TokenOpenParen extends Token<TokenType.OpenParen, undefined> {}\nexport interface TokenCloseParen extends Token<TokenType.CloseParen, undefined> {}\nexport interface TokenOpenSquare extends Token<TokenType.OpenSquare, undefined> {}\nexport interface TokenCloseSquare extends Token<TokenType.CloseSquare, undefined> {}\nexport interface TokenOpenCurly extends Token<TokenType.OpenCurly, undefined> {}\nexport interface TokenCloseCurly extends Token<TokenType.CloseCurly, undefined> {}\n\nexport interface TokenUnicodeRange extends Token<TokenType.UnicodeRange, {\n\tstartOfRange: number,\n\tendOfRange: number\n}> {}\n\n/**\n * The union of all possible CSS tokens\n */\nexport type CSSToken = TokenAtKeyword |\n\tTokenBadString |\n\tTokenBadURL |\n\tTokenCDC |\n\tTokenCDO |\n\tTokenColon |\n\tTokenComma |\n\tTokenComment |\n\tTokenDelim |\n\tTokenDimension |\n\tTokenEOF |\n\tTokenFunction |\n\tTokenHash |\n\tTokenIdent |\n\tTokenNumber |\n\tTokenPercentage |\n\tTokenSemicolon |\n\tTokenString |\n\tTokenURL |\n\tTokenWhitespace |\n\tTokenOpenParen |\n\tTokenCloseParen |\n\tTokenOpenSquare |\n\tTokenCloseSquare |\n\tTokenOpenCurly |\n\tTokenCloseCurly |\n\tTokenUnicodeRange;\n\n/**\n * The union of all possible CSS tokens that represent a numeric value\n */\nexport type NumericToken =\n\tTokenDimension |\n\tTokenNumber |\n\tTokenPercentage;\n\n/**\n * The CSS Token interface\n *\n * @remarks\n * CSS Tokens are fully typed and have a strict structure.\n * This makes it easier to iterate and analyze a token stream.\n *\n * The string representation and the parsed value are stored separately for many token types.\n * It is always assumed that the string representation will be used when stringifying, while the parsed value should be used when analyzing tokens.\n */\nexport interface Token<T extends TokenType, U> extends Array<T | string | number | U> {\n\t/**\n\t * The type of token\n\t */\n\t0: T,\n\t/**\n\t * The token representation\n\t *\n\t * @remarks\n\t * This field will be used when stringifying the token.\n\t * Any stored value is assumed to be valid CSS.\n\t *\n\t * You should never use this field when analyzing the token when there is a parsed value available.\n\t * But you must store mutated values here.\n\t */\n\t1: string,\n\t/**\n\t * Start position of representation\n\t */\n\t2: number,\n\t/**\n\t * End position of representation\n\t */\n\t3: number,\n\t/**\n\t * Extra data\n\t *\n\t * @remarks\n\t * This holds the parsed value of each token.\n\t * These values are unescaped, unquoted, converted to numbers, etc.\n\t *\n\t * You should always use this field when analyzing the token.\n\t * But you must not assume that mutating only this field will have any effect.\n\t */\n\t4: U,\n}\n\n/**\n * Get the mirror variant type of a given token type\n *\n * @example\n *\n * ```js\n * const input = TokenType.OpenParen;\n * const output = mirrorVariantType(input);\n *\n * console.log(output); // TokenType.CloseParen\n * ```\n */\nexport function mirrorVariantType(type: TokenType): TokenType | null {\n\tswitch (type) {\n\t\tcase TokenType.OpenParen:\n\t\t\treturn TokenType.CloseParen;\n\t\tcase TokenType.CloseParen:\n\t\t\treturn TokenType.OpenParen;\n\n\t\tcase TokenType.OpenCurly:\n\t\t\treturn TokenType.CloseCurly;\n\t\tcase TokenType.CloseCurly:\n\t\t\treturn TokenType.OpenCurly;\n\n\t\tcase TokenType.OpenSquare:\n\t\t\treturn TokenType.CloseSquare;\n\t\tcase TokenType.CloseSquare:\n\t\t\treturn TokenType.OpenSquare;\n\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n\n/**\n * Get the mirror variant of a given token\n *\n * @example\n *\n * ```js\n * const input = [TokenType.OpenParen, '(', 0, 1, undefined];\n * const output = mirrorVariant(input);\n *\n * console.log(output); // [TokenType.CloseParen, ')', -1, -1, undefined]\n * ```\n */\nexport function mirrorVariant(token: CSSToken): CSSToken | null {\n\tswitch (token[0]) {\n\t\tcase TokenType.OpenParen:\n\t\t\treturn [TokenType.CloseParen, ')', -1, -1, undefined];\n\t\tcase TokenType.CloseParen:\n\t\t\treturn [TokenType.OpenParen, '(', -1, -1, undefined];\n\n\t\tcase TokenType.OpenCurly:\n\t\t\treturn [TokenType.CloseCurly, '}', -1, -1, undefined];\n\t\tcase TokenType.CloseCurly:\n\t\t\treturn [TokenType.OpenCurly, '{', -1, -1, undefined];\n\n\t\tcase TokenType.OpenSquare:\n\t\t\treturn [TokenType.CloseSquare, ']', -1, -1, undefined];\n\t\tcase TokenType.CloseSquare:\n\t\t\treturn [TokenType.OpenSquare, '[', -1, -1, undefined];\n\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n"],
  "mappings": ";;;;AAKO,IAAK,YAAL,kBAAKA,eAAL;AAIN,EAAAA,WAAA,aAAU;AAKV,EAAAA,WAAA,eAAY;AAIZ,EAAAA,WAAA,eAAY;AAIZ,EAAAA,WAAA,YAAS;AAIT,EAAAA,WAAA,SAAM;AAIN,EAAAA,WAAA,SAAM;AAIN,EAAAA,WAAA,WAAQ;AAIR,EAAAA,WAAA,WAAQ;AAIR,EAAAA,WAAA,WAAQ;AAIR,EAAAA,WAAA,eAAY;AAIZ,EAAAA,WAAA,SAAM;AAIN,EAAAA,WAAA,cAAW;AAIX,EAAAA,WAAA,UAAO;AAIP,EAAAA,WAAA,WAAQ;AAIR,EAAAA,WAAA,YAAS;AAIT,EAAAA,WAAA,gBAAa;AAIb,EAAAA,WAAA,eAAY;AAIZ,EAAAA,WAAA,YAAS;AAIT,EAAAA,WAAA,SAAM;AAIN,EAAAA,WAAA,gBAAa;AAKb,EAAAA,WAAA,eAAY;AAIZ,EAAAA,WAAA,gBAAa;AAIb,EAAAA,WAAA,gBAAa;AAIb,EAAAA,WAAA,iBAAc;AAId,EAAAA,WAAA,eAAY;AAIZ,EAAAA,WAAA,gBAAa;AAmBb,EAAAA,WAAA,kBAAe;AA7HJ,SAAAA;AAAA,GAAA;AAoIL,IAAK,aAAL,kBAAKC,gBAAL;AACN,EAAAA,YAAA,aAAU;AACV,EAAAA,YAAA,YAAS;AAFE,SAAAA;AAAA,GAAA;AAQL,IAAK,WAAL,kBAAKC,cAAL;AAIN,EAAAA,UAAA,kBAAe;AAKf,EAAAA,UAAA,QAAK;AATM,SAAAA;AAAA,GAAA;AAgOL,SAAS,kBAAkB,MAAmC;AACpE,UAAQ,MAAM;AAAA,IACb,KAAK;AACJ,aAAO;AAAA,IACR,KAAK;AACJ,aAAO;AAAA,IAER,KAAK;AACJ,aAAO;AAAA,IACR,KAAK;AACJ,aAAO;AAAA,IAER,KAAK;AACJ,aAAO;AAAA,IACR,KAAK;AACJ,aAAO;AAAA,IAER;AACC,aAAO;AAAA,EACT;AACD;AApBgB;AAkCT,SAAS,cAAc,OAAkC;AAC/D,UAAQ,MAAM,CAAC,GAAG;AAAA,IACjB,KAAK;AACJ,aAAO,CAAC,4BAAsB,KAAK,IAAI,IAAI,MAAS;AAAA,IACrD,KAAK;AACJ,aAAO,CAAC,2BAAqB,KAAK,IAAI,IAAI,MAAS;AAAA,IAEpD,KAAK;AACJ,aAAO,CAAC,4BAAsB,KAAK,IAAI,IAAI,MAAS;AAAA,IACrD,KAAK;AACJ,aAAO,CAAC,2BAAqB,KAAK,IAAI,IAAI,MAAS;AAAA,IAEpD,KAAK;AACJ,aAAO,CAAC,6BAAuB,KAAK,IAAI,IAAI,MAAS;AAAA,IACtD,KAAK;AACJ,aAAO,CAAC,4BAAsB,KAAK,IAAI,IAAI,MAAS;AAAA,IAErD;AACC,aAAO;AAAA,EACT;AACD;AApBgB;",
  "names": ["TokenType", "NumberType", "HashType"]
}
