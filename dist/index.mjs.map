{
  "version": 3,
  "sources": ["../src/postcss/css-syntax-error.js", "../src/postcss/stringifier.js", "../src/postcss/stringify.js", "../src/postcss/symbols.js", "../src/postcss/node.js", "../src/postcss/comment.js", "../src/postcss/declaration.js", "../src/postcss/container.js", "../src/postcss/at-rule.js", "../src/postcss/root.js", "../src/postcss/list.js", "../src/postcss/rule.js", "../src/postcss/input.js", "../src/postcss/tokenize.js", "../src/postcss/parser.js", "../src/postcss/parse.js", "../src/postcss/document.js", "../src/postcss/map-generator.js", "../src/postcss/warn-once.js", "../src/postcss/warning.js", "../src/postcss/result.js", "../src/postcss/postcss.js", "../src/postcss/fromJSON.js", "../src/postcss/processor.js", "../src/postcss/no-work-result.js", "../src/postcss/lazy-result.js", "../src/postcss-selector-parser/util/unesc.js", "../src/postcss-selector-parser/util/getProp.js", "../src/postcss-selector-parser/util/ensureObject.js", "../src/postcss-selector-parser/selectors/node.js", "../src/postcss-selector-parser/selectors/types.js", "../src/postcss-selector-parser/selectors/container.js", "../src/postcss-selector-parser/selectors/root.js", "../src/postcss-selector-parser/selectors/selector.js", "../src/cssesc/index.js", "../src/postcss-selector-parser/selectors/className.js", "../src/postcss-selector-parser/selectors/comment.js", "../src/postcss-selector-parser/selectors/id.js", "../src/postcss-selector-parser/selectors/namespace.js", "../src/postcss-selector-parser/selectors/tag.js", "../src/postcss-selector-parser/selectors/string.js", "../src/postcss-selector-parser/selectors/pseudo.js", "../src/postcss-selector-parser/selectors/attribute.js", "../src/postcss-selector-parser/selectors/universal.js", "../src/postcss-selector-parser/selectors/combinator.js", "../src/postcss-selector-parser/selectors/nesting.js", "../src/postcss-selector-parser/sortAscending.js", "../src/postcss-selector-parser/tokenTypes.js", "../src/postcss-selector-parser/tokenize.js", "../src/postcss-selector-parser/parser.js", "../src/postcss-selector-parser/processor.js", "../src/postcss-selector-parser/selectors/index.js", "../src/postcss-selector-parser/selectors/constructors.js", "../src/postcss-selector-parser/selectors/guards.js", "../src/postcss-selector-parser/index.js", "../src/ExtractorResultSets.ts", "../src/options.ts", "../src/VariablesStructure.ts", "../src/index.ts"],
  "sourcesContent": ["\nexport class CssSyntaxError extends Error {\n  constructor(message, line, column, source, file, plugin) {\n    super(message)\n    this.name = 'CssSyntaxError'\n    this.reason = message\n\n    if (file) {\n      this.file = file\n    }\n    if (source) {\n      this.source = source\n    }\n    if (plugin) {\n      this.plugin = plugin\n    }\n    if (typeof line !== 'undefined' && typeof column !== 'undefined') {\n      if (typeof line === 'number') {\n        this.line = line\n        this.column = column\n      } else {\n        this.line = line.line\n        this.column = line.column\n        this.endLine = column.line\n        this.endColumn = column.column\n      }\n    }\n\n    this.setMessage()\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CssSyntaxError)\n    }\n  }\n\n  setMessage() {\n    this.message = this.plugin ? this.plugin + ': ' : ''\n    this.message += this.file ? this.file : '<css input>'\n    if (typeof this.line !== 'undefined') {\n      this.message += ':' + this.line + ':' + this.column\n    }\n    this.message += ': ' + this.reason\n  }\n\n  showSourceCode() {\n      return '';\n  }\n\n  toString() {\n    let code = this.showSourceCode()\n    if (code) {\n      code = '\\n\\n' + code + '\\n'\n    }\n    return this.name + ': ' + this.message + code\n  }\n}\n", "const DEFAULT_RAW = {\n  after: '\\n',\n  beforeClose: '\\n',\n  beforeComment: '\\n',\n  beforeDecl: '\\n',\n  beforeOpen: ' ',\n  beforeRule: '\\n',\n  colon: ': ',\n  commentLeft: ' ',\n  commentRight: ' ',\n  emptyBody: '',\n  indent: '    ',\n  semicolon: false\n}\n\nfunction capitalize(str) {\n  return str[0].toUpperCase() + str.slice(1)\n}\n\nexport class Stringifier {\n  constructor(builder) {\n    this.builder = builder\n  }\n\n  atrule(node, semicolon) {\n    let name = '@' + node.name\n    const params = node.params ? this.rawValue(node, 'params') : ''\n\n    if (typeof node.raws.afterName !== 'undefined') {\n      name += node.raws.afterName\n    } else if (params) {\n      name += ' '\n    }\n\n    if (node.nodes) {\n      this.block(node, name + params)\n    } else {\n      const end = (node.raws.between || '') + (semicolon ? ';' : '')\n      this.builder(name + params + end, node)\n    }\n  }\n\n  beforeAfter(node, detect) {\n    let value\n    if (node.type === 'decl') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (node.type === 'comment') {\n      value = this.raw(node, null, 'beforeComment')\n    } else if (detect === 'before') {\n      value = this.raw(node, null, 'beforeRule')\n    } else {\n      value = this.raw(node, null, 'beforeClose')\n    }\n\n    let buf = node.parent\n    let depth = 0\n    while (buf && buf.type !== 'root') {\n      depth += 1\n      buf = buf.parent\n    }\n\n    if (value.includes('\\n')) {\n      const indent = this.raw(node, null, 'indent')\n      if (indent.length) {\n        for (let step = 0; step < depth; step++) value += indent\n      }\n    }\n\n    return value\n  }\n\n  block(node, start) {\n    const between = this.raw(node, 'between', 'beforeOpen')\n    this.builder(start + between + '{', node, 'start')\n\n    let after\n    if (node.nodes && node.nodes.length) {\n      this.body(node)\n      after = this.raw(node, 'after')\n    } else {\n      after = this.raw(node, 'after', 'emptyBody')\n    }\n\n    if (after) this.builder(after)\n    this.builder('}', node, 'end')\n  }\n\n  body(node) {\n    let last = node.nodes.length - 1\n    while (last > 0) {\n      if (node.nodes[last].type !== 'comment') break\n      last -= 1\n    }\n\n    const semicolon = this.raw(node, 'semicolon')\n    for (let i = 0; i < node.nodes.length; i++) {\n      const child = node.nodes[i]\n      const before = this.raw(child, 'before')\n      if (before) this.builder(before)\n      this.stringify(child, last !== i || semicolon)\n    }\n  }\n\n  comment(node) {\n    const left = this.raw(node, 'left', 'commentLeft')\n    const right = this.raw(node, 'right', 'commentRight')\n    this.builder('/*' + left + node.text + right + '*/', node)\n  }\n\n  decl(node, semicolon) {\n    const between = this.raw(node, 'between', 'colon')\n    let string = node.prop + between + this.rawValue(node, 'value')\n\n    if (node.important) {\n      string += node.raws.important || ' !important'\n    }\n\n    if (semicolon) string += ';'\n    this.builder(string, node)\n  }\n\n  document(node) {\n    this.body(node)\n  }\n\n  raw(node, own, detect) {\n    let value\n    if (!detect) detect = own\n\n    // Already had\n    if (own) {\n      value = node.raws[own]\n      if (typeof value !== 'undefined') return value\n    }\n\n    const parent = node.parent\n\n    if (detect === 'before') {\n      // Hack for first rule in CSS\n      if (!parent || (parent.type === 'root' && parent.first === node)) {\n        return ''\n      }\n\n      // `root` nodes in `document` should use only their own raws\n      if (parent && parent.type === 'document') {\n        return ''\n      }\n    }\n\n    // Floating child without parent\n    if (!parent) return DEFAULT_RAW[detect]\n\n    // Detect style by other nodes\n    const root = node.root()\n    if (!root.rawCache) root.rawCache = {}\n    if (typeof root.rawCache[detect] !== 'undefined') {\n      return root.rawCache[detect]\n    }\n\n    if (detect === 'before' || detect === 'after') {\n      return this.beforeAfter(node, detect)\n    } else {\n      const method = 'raw' + capitalize(detect)\n      if (this[method]) {\n        value = this[method](root, node)\n      } else {\n        root.walk(i => {\n          value = i.raws[own]\n          if (typeof value !== 'undefined') return false\n        })\n      }\n    }\n\n    if (typeof value === 'undefined') value = DEFAULT_RAW[detect]\n\n    root.rawCache[detect] = value\n    return value\n  }\n\n  rawBeforeClose(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length > 0) {\n        if (typeof i.raws.after !== 'undefined') {\n          value = i.raws.after\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeComment(root, node) {\n    let value\n    root.walkComments(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeDecl(root, node) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeRule')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeOpen(root) {\n    let value\n    root.walk(i => {\n      if (i.type !== 'decl') {\n        value = i.raws.between\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawBeforeRule(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && (i.parent !== root || root.first !== i)) {\n        if (typeof i.raws.before !== 'undefined') {\n          value = i.raws.before\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawColon(root) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.between !== 'undefined') {\n        value = i.raws.between.replace(/[^\\s:]/g, '')\n        return false\n      }\n    })\n    return value\n  }\n\n  rawEmptyBody(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length === 0) {\n        value = i.raws.after\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawIndent(root) {\n    if (root.raws.indent) return root.raws.indent\n    let value\n    root.walk(i => {\n      const p = i.parent\n      if (p && p !== root && p.parent && p.parent === root) {\n        if (typeof i.raws.before !== 'undefined') {\n          const parts = i.raws.before.split('\\n')\n          value = parts[parts.length - 1]\n          value = value.replace(/\\S/g, '')\n          return false\n        }\n      }\n    })\n    return value\n  }\n\n  rawSemicolon(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length && i.last.type === 'decl') {\n        value = i.raws.semicolon\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawValue(node, prop) {\n    const value = node[prop]\n    const raw = node.raws[prop]\n    if (raw && raw.value === value) {\n      return raw.raw\n    }\n\n    return value\n  }\n\n  root(node) {\n    this.body(node)\n    if (node.raws.after) this.builder(node.raws.after)\n  }\n\n  rule(node) {\n    this.block(node, this.rawValue(node, 'selector'))\n    if (node.raws.ownSemicolon) {\n      this.builder(node.raws.ownSemicolon, node, 'end')\n    }\n  }\n\n  stringify(node, semicolon) {\n    /* c8 ignore start */\n    if (!this[node.type]) {\n      throw new Error(\n        'Unknown AST node type ' +\n          node.type +\n          '. ' +\n          'Maybe you need to change PostCSS stringifier.'\n      )\n    }\n    /* c8 ignore stop */\n    this[node.type](node, semicolon)\n  }\n}", "\n\nimport { Stringifier } from \"./stringifier\";\n\nexport function stringify(node, builder) {\n  const str = new Stringifier(builder)\n  str.stringify(node)\n}", "\n\nexport const isClean = Symbol('isClean')\n\nexport const my = Symbol('my')\n", "import { CssSyntaxError } from \"./css-syntax-error\";\nimport { Stringifier } from \"./stringifier\";\nimport { stringify } from \"./stringify\";\nimport { isClean, my } from \"./symbols\";\n\nfunction cloneNode(obj, parent) {\n  const cloned = new obj.constructor()\n\n  for (const i in obj) {\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) {\n      /* c8 ignore next 2 */\n      continue\n    }\n    if (i === 'proxyCache') continue\n    let value = obj[i]\n    const type = typeof value\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent\n    } else if (i === 'source') {\n      cloned[i] = value\n    } else if (Array.isArray(value)) {\n      cloned[i] = value.map(j => cloneNode(j, cloned))\n    } else {\n      if (type === 'object' && value !== null) value = cloneNode(value)\n      cloned[i] = value\n    }\n  }\n\n  return cloned\n}\n\nfunction sourceOffset(inputCSS, position) {\n  // Not all custom syntaxes support `offset` in `source.start` and `source.end`\n  if (\n    position &&\n    typeof position.offset !== 'undefined'\n  ) {\n    return position.offset;\n  }\n\n  let column = 1\n  let line = 1\n  let offset = 0\n\n  for (let i = 0; i < inputCSS.length; i++) {\n    if (line === position.line && column === position.column) {\n      offset = i\n      break\n    }\n\n    if (inputCSS[i] === '\\n') {\n      column = 1\n      line += 1\n    } else {\n      column += 1\n    }\n  }\n\n  return offset\n}\n\nexport class Node {\n  constructor(defaults = {}) {\n    this.raws = {}\n    this[isClean] = false\n    this[my] = true\n\n    for (const name in defaults) {\n      if (name === 'nodes') {\n        this.nodes = []\n        for (const node of defaults[name]) {\n          if (typeof node.clone === 'function') {\n            this.append(node.clone())\n          } else {\n            this.append(node)\n          }\n        }\n      } else {\n        this[name] = defaults[name]\n      }\n    }\n  }\n\n  addToError(error) {\n    error.postcssNode = this\n    if (error.stack && this.source && /\\n\\s{4}at /.test(error.stack)) {\n      const s = this.source\n      error.stack = error.stack.replace(\n        /\\n\\s{4}at /,\n        `$&${s.input.from}:${s.start.line}:${s.start.column}$&`\n      )\n    }\n    return error\n  }\n\n  after(add) {\n    this.parent.insertAfter(this, add)\n    return this\n  }\n\n  assign(overrides = {}) {\n    for (const name in overrides) {\n      this[name] = overrides[name]\n    }\n    return this\n  }\n\n  before(add) {\n    this.parent.insertBefore(this, add)\n    return this\n  }\n\n  cleanRaws(keepBetween) {\n    delete this.raws.before\n    delete this.raws.after\n    if (!keepBetween) delete this.raws.between\n  }\n\n  clone(overrides = {}) {\n    const cloned = cloneNode(this)\n    for (const name in overrides) {\n      cloned[name] = overrides[name]\n    }\n    return cloned\n  }\n\n  cloneAfter(overrides = {}) {\n    const cloned = this.clone(overrides)\n    this.parent.insertAfter(this, cloned)\n    return cloned\n  }\n\n  cloneBefore(overrides = {}) {\n    const cloned = this.clone(overrides)\n    this.parent.insertBefore(this, cloned)\n    return cloned\n  }\n\n  error(message, opts = {}) {\n    if (this.source) {\n      const { end, start } = this.rangeBy(opts)\n      return this.source.input.error(\n        message,\n        { column: start.column, line: start.line },\n        { column: end.column, line: end.line },\n        opts\n      )\n    }\n    return new CssSyntaxError(message)\n  }\n\n  getProxyProcessor() {\n    return {\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else {\n          return node[prop]\n        }\n      },\n\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (\n          prop === 'prop' ||\n          prop === 'value' ||\n          prop === 'name' ||\n          prop === 'params' ||\n          prop === 'important' ||\n          /* c8 ignore next */\n          prop === 'text'\n        ) {\n          node.markDirty()\n        }\n        return true\n      }\n    }\n  }\n\n  /* c8 ignore next 3 */\n  markClean() {\n    this[isClean] = true\n  }\n\n  markDirty() {\n    if (this[isClean]) {\n      this[isClean] = false\n      let next = this\n      while ((next = next.parent)) {\n        next[isClean] = false\n      }\n    }\n  }\n\n  next() {\n    if (!this.parent) return undefined\n    const index = this.parent.index(this)\n    return this.parent.nodes[index + 1]\n  }\n\n  positionBy(opts) {\n    let pos = this.source.start\n    if (opts.index) {\n      pos = this.positionInside(opts.index)\n    } else if (opts.word) {\n      const stringRepresentation = this.source.input.css.slice(\n        sourceOffset(this.source.input.css, this.source.start),\n        sourceOffset(this.source.input.css, this.source.end)\n      )\n      const index = stringRepresentation.indexOf(opts.word)\n      if (index !== -1) pos = this.positionInside(index)\n    }\n    return pos\n  }\n\n  positionInside(index) {\n    let column = this.source.start.column\n    let line = this.source.start.line\n    const offset = sourceOffset(this.source.input.css, this.source.start)\n    const end = offset + index\n\n    for (let i = offset; i < end; i++) {\n      if (this.source.input.css[i] === '\\n') {\n        column = 1\n        line += 1\n      } else {\n        column += 1\n      }\n    }\n\n    return { column, line }\n  }\n\n  prev() {\n    if (!this.parent) return undefined\n    const index = this.parent.index(this)\n    return this.parent.nodes[index - 1]\n  }\n\n  rangeBy(opts) {\n    let start = {\n      column: this.source.start.column,\n      line: this.source.start.line\n    }\n    let end = this.source.end\n      ? {\n          column: this.source.end.column + 1,\n          line: this.source.end.line\n        }\n      : {\n          column: start.column + 1,\n          line: start.line\n        }\n\n    if (opts.word) {\n      const stringRepresentation = this.source.input.css.slice(\n        sourceOffset(this.source.input.css, this.source.start),\n        sourceOffset(this.source.input.css, this.source.end)\n      )\n      const index = stringRepresentation.indexOf(opts.word)\n      if (index !== -1) {\n        start = this.positionInside(index)\n        end = this.positionInside(\n          index + opts.word.length,\n        )\n      }\n    } else {\n      if (opts.start) {\n        start = {\n          column: opts.start.column,\n          line: opts.start.line\n        }\n      } else if (opts.index) {\n        start = this.positionInside(opts.index)\n      }\n\n      if (opts.end) {\n        end = {\n          column: opts.end.column,\n          line: opts.end.line\n        }\n      } else if (typeof opts.endIndex === 'number') {\n        end = this.positionInside(opts.endIndex)\n      } else if (opts.index) {\n        end = this.positionInside(opts.index + 1)\n      }\n    }\n\n    if (\n      end.line < start.line ||\n      (end.line === start.line && end.column <= start.column)\n    ) {\n      end = { column: start.column + 1, line: start.line }\n    }\n\n    return { end, start }\n  }\n\n  raw(prop, defaultType) {\n    const str = new Stringifier()\n    return str.raw(this, prop, defaultType)\n  }\n\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this)\n    }\n    this.parent = undefined\n    return this\n  }\n\n  replaceWith(...nodes) {\n    if (this.parent) {\n      let bookmark = this\n      let foundSelf = false\n      for (const node of nodes) {\n        if (node === this) {\n          foundSelf = true\n        } else if (foundSelf) {\n          this.parent.insertAfter(bookmark, node)\n          bookmark = node\n        } else {\n          this.parent.insertBefore(bookmark, node)\n        }\n      }\n\n      if (!foundSelf) {\n        this.remove()\n      }\n    }\n\n    return this\n  }\n\n  root() {\n    let result = this\n    while (result.parent && result.parent.type !== 'document') {\n      result = result.parent\n    }\n    return result\n  }\n\n  toJSON(_, inputs) {\n    const fixed = {}\n    const emitInputs = inputs == null\n    inputs = inputs || new Map()\n    let inputsNextIndex = 0\n\n    for (const name in this) {\n      if (!Object.prototype.hasOwnProperty.call(this, name)) {\n        /* c8 ignore next 2 */\n        continue\n      }\n      if (name === 'parent' || name === 'proxyCache') continue\n      const value = this[name]\n\n      if (Array.isArray(value)) {\n        fixed[name] = value.map(i => {\n          if (typeof i === 'object' && i.toJSON) {\n            return i.toJSON(null, inputs)\n          } else {\n            return i\n          }\n        })\n      } else if (typeof value === 'object' && value.toJSON) {\n        fixed[name] = value.toJSON(null, inputs)\n      } else if (name === 'source') {\n        let inputId = inputs.get(value.input)\n        if (inputId == null) {\n          inputId = inputsNextIndex\n          inputs.set(value.input, inputsNextIndex)\n          inputsNextIndex++\n        }\n        fixed[name] = {\n          end: value.end,\n          inputId,\n          start: value.start\n        }\n      } else {\n        fixed[name] = value\n      }\n    }\n\n    if (emitInputs) {\n      fixed.inputs = [...inputs.keys()].map(input => input.toJSON())\n    }\n\n    return fixed\n  }\n\n  toProxy() {\n    if (!this.proxyCache) {\n      this.proxyCache = new Proxy(this, this.getProxyProcessor())\n    }\n    return this.proxyCache\n  }\n\n  toString(stringifier = stringify) {\n    if (stringifier.stringify) stringifier = stringifier.stringify\n    let result = ''\n    stringifier(this, i => {\n      result += i\n    })\n    return result\n  }\n\n  warn(result, text, opts) {\n    const data = { node: this }\n    for (const i in opts) data[i] = opts[i]\n    return result.warn(text, data)\n  }\n\n  get proxyOf() {\n    return this\n  }\n}", "import { Node } from './node';\n\nexport class Comment extends Node {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'comment'\n  }\n}", "import { Node } from \"./node.js\";\n\nexport class Declaration extends Node {\n  constructor(defaults) {\n    if (\n      defaults &&\n      typeof defaults.value !== 'undefined' &&\n      typeof defaults.value !== 'string'\n    ) {\n      defaults = { ...defaults, value: String(defaults.value) }\n    }\n    super(defaults)\n    this.type = 'decl'\n  }\n\n  get variable() {\n    return this.prop.startsWith('--') || this.prop[0] === '$'\n  }\n}\n", "\n\nimport { Comment } from './comment';\nimport { Declaration } from './declaration';\nimport { isClean, my } from \"./symbols\";\nimport { Node } from \"./node\";\n\nlet AtRule, parse, Root, Rule\n\nfunction cleanSource(nodes) {\n  return nodes.map(i => {\n    if (i.nodes) i.nodes = cleanSource(i.nodes)\n    delete i.source\n    return i\n  })\n}\n\nfunction markTreeDirty(node) {\n  node[isClean] = false\n  if (node.proxyOf.nodes) {\n    for (const i of node.proxyOf.nodes) {\n      markTreeDirty(i)\n    }\n  }\n}\n\nexport class Container extends Node {\n  append(...children) {\n    for (const child of children) {\n      const nodes = this.normalize(child, this.last)\n      for (const node of nodes) this.proxyOf.nodes.push(node)\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  cleanRaws(keepBetween) {\n    super.cleanRaws(keepBetween)\n    if (this.nodes) {\n      for (const node of this.nodes) node.cleanRaws(keepBetween)\n    }\n  }\n\n  each(callback) {\n    if (!this.proxyOf.nodes) return undefined\n    const iterator = this.getIterator()\n\n    let index, result\n    while (this.indexes[iterator] < this.proxyOf.nodes.length) {\n      index = this.indexes[iterator]\n      result = callback(this.proxyOf.nodes[index], index)\n      if (result === false) break\n\n      this.indexes[iterator] += 1\n    }\n\n    delete this.indexes[iterator]\n    return result\n  }\n\n  every(condition) {\n    return this.nodes.every(condition)\n  }\n\n  getIterator() {\n    if (!this.lastEach) this.lastEach = 0\n    if (!this.indexes) this.indexes = {}\n\n    this.lastEach += 1\n    const iterator = this.lastEach\n    this.indexes[iterator] = 0\n\n    return iterator\n  }\n\n  getProxyProcessor() {\n    return {\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (!node[prop]) {\n          return node[prop]\n        } else if (\n          prop === 'each' ||\n          (typeof prop === 'string' && prop.startsWith('walk'))\n        ) {\n          return (...args) => {\n            return node[prop](\n              ...args.map(i => {\n                if (typeof i === 'function') {\n                  return (child, index) => i(child.toProxy(), index)\n                } else {\n                  return i\n                }\n              })\n            )\n          }\n        } else if (prop === 'every' || prop === 'some') {\n          return cb => {\n            return node[prop]((child, ...other) =>\n              cb(child.toProxy(), ...other)\n            )\n          }\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else if (prop === 'nodes') {\n          return node.nodes.map(i => i.toProxy())\n        } else if (prop === 'first' || prop === 'last') {\n          return node[prop].toProxy()\n        } else {\n          return node[prop]\n        }\n      },\n\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (prop === 'name' || prop === 'params' || prop === 'selector') {\n          node.markDirty()\n        }\n        return true\n      }\n    }\n  }\n\n  index(child) {\n    if (typeof child === 'number') return child\n    if (child.proxyOf) child = child.proxyOf\n    return this.proxyOf.nodes.indexOf(child)\n  }\n\n  insertAfter(exist, add) {\n    let existIndex = this.index(exist)\n    const nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse()\n    existIndex = this.index(exist)\n    for (const node of nodes) this.proxyOf.nodes.splice(existIndex + 1, 0, node)\n\n    let index\n    for (const id in this.indexes) {\n      index = this.indexes[id]\n      if (existIndex < index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  insertBefore(exist, add) {\n    let existIndex = this.index(exist)\n    const type = existIndex === 0 ? 'prepend' : false\n    const nodes = this.normalize(\n      add,\n      this.proxyOf.nodes[existIndex],\n      type\n    ).reverse()\n    existIndex = this.index(exist)\n    for (const node of nodes) this.proxyOf.nodes.splice(existIndex, 0, node)\n\n    let index\n    for (const id in this.indexes) {\n      index = this.indexes[id]\n      if (existIndex <= index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  normalize(nodes, sample) {\n    if (typeof nodes === 'string') {\n      nodes = cleanSource(parse(nodes).nodes)\n    } else if (typeof nodes === 'undefined') {\n      nodes = []\n    } else if (Array.isArray(nodes)) {\n      nodes = nodes.slice(0)\n      for (const i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type === 'root' && this.type !== 'document') {\n      nodes = nodes.nodes.slice(0)\n      for (const i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type) {\n      nodes = [nodes]\n    } else if (nodes.prop) {\n      if (typeof nodes.value === 'undefined') {\n        throw new Error('Value field is missed in node creation')\n      } else if (typeof nodes.value !== 'string') {\n        nodes.value = String(nodes.value)\n      }\n      nodes = [new Declaration(nodes)]\n    } else if (nodes.selector || nodes.selectors) {\n      nodes = [new Rule(nodes)]\n    } else if (nodes.name) {\n      nodes = [new AtRule(nodes)]\n    } else if (nodes.text) {\n      nodes = [new Comment(nodes)]\n    } else {\n      throw new Error('Unknown node type in node creation')\n    }\n\n    const processed = nodes.map(i => {\n      /* c8 ignore next */\n      if (!i[my]) Container.rebuild(i)\n      i = i.proxyOf\n      if (i.parent) i.parent.removeChild(i)\n      if (i[isClean]) markTreeDirty(i)\n\n      if (!i.raws) i.raws = {}\n      if (typeof i.raws.before === 'undefined') {\n        if (sample && typeof sample.raws.before !== 'undefined') {\n          i.raws.before = sample.raws.before.replace(/\\S/g, '')\n        }\n      }\n      i.parent = this.proxyOf\n      return i\n    })\n\n    return processed\n  }\n\n  prepend(...children) {\n    children = children.reverse()\n    for (const child of children) {\n      const nodes = this.normalize(child, this.first, 'prepend').reverse()\n      for (const node of nodes) this.proxyOf.nodes.unshift(node)\n      for (const id in this.indexes) {\n        this.indexes[id] = this.indexes[id] + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  push(child) {\n    child.parent = this\n    this.proxyOf.nodes.push(child)\n    return this\n  }\n\n  removeAll() {\n    for (const node of this.proxyOf.nodes) node.parent = undefined\n    this.proxyOf.nodes = []\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeChild(child) {\n    child = this.index(child)\n    this.proxyOf.nodes[child].parent = undefined\n    this.proxyOf.nodes.splice(child, 1)\n\n    let index\n    for (const id in this.indexes) {\n      index = this.indexes[id]\n      if (index >= child) {\n        this.indexes[id] = index - 1\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  replaceValues(pattern, opts, callback) {\n    if (!callback) {\n      callback = opts\n      opts = {}\n    }\n\n    this.walkDecls(decl => {\n      if (opts.props && !opts.props.includes(decl.prop)) return\n      if (opts.fast && !decl.value.includes(opts.fast)) return\n\n      decl.value = decl.value.replace(pattern, callback)\n    })\n\n    this.markDirty()\n\n    return this\n  }\n\n  some(condition) {\n    return this.nodes.some(condition)\n  }\n\n  walk(callback) {\n    return this.each((child, i) => {\n      let result\n      try {\n        result = callback(child, i)\n      } catch (e) {\n        throw child.addToError(e)\n      }\n      if (result !== false && child.walk) {\n        result = child.walk(callback)\n      }\n\n      return result\n    })\n  }\n\n  walkAtRules(name, callback) {\n    if (!callback) {\n      callback = name\n      return this.walk((child, i) => {\n        if (child.type === 'atrule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (name instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'atrule' && name.test(child.name)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'atrule' && child.name === name) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkComments(callback) {\n    return this.walk((child, i) => {\n      if (child.type === 'comment') {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkDecls(prop, callback) {\n    if (!callback) {\n      callback = prop\n      return this.walk((child, i) => {\n        if (child.type === 'decl') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (prop instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'decl' && prop.test(child.prop)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'decl' && child.prop === prop) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkRules(selector, callback) {\n    if (!callback) {\n      callback = selector\n\n      return this.walk((child, i) => {\n        if (child.type === 'rule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (selector instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'rule' && selector.test(child.selector)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'rule' && child.selector === selector) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  get first() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[0]\n  }\n\n  get last() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1]\n  }\n}\n\nContainer.registerParse = dependant => {\n  parse = dependant\n}\n\nContainer.registerRule = dependant => {\n  Rule = dependant\n}\n\nContainer.registerAtRule = dependant => {\n  AtRule = dependant\n}\n\nContainer.registerRoot = dependant => {\n  Root = dependant\n}\n\n\n/* c8 ignore start */\nContainer.rebuild = node => {\n  if (node.type === 'atrule') {\n    Object.setPrototypeOf(node, AtRule.prototype)\n  } else if (node.type === 'rule') {\n    Object.setPrototypeOf(node, Rule.prototype)\n  } else if (node.type === 'decl') {\n    Object.setPrototypeOf(node, Declaration.prototype)\n  } else if (node.type === 'comment') {\n    Object.setPrototypeOf(node, Comment.prototype)\n  } else if (node.type === 'root') {\n    Object.setPrototypeOf(node, Root.prototype)\n  }\n\n  node[my] = true\n\n  if (node.nodes) {\n    node.nodes.forEach(child => {\n      Container.rebuild(child)\n    })\n  }\n}\n/* c8 ignore stop */\n", "\n\nimport { Container } from './container';\n\nexport class AtRule extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'atrule'\n  }\n\n  append(...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.append(...children)\n  }\n\n  prepend(...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.prepend(...children)\n  }\n}\n\nContainer.registerAtRule(AtRule)\n", "\n\nimport { Container } from \"./container\";\n\nlet LazyResult, Processor\n\nexport class Root extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'root'\n    if (!this.nodes) this.nodes = []\n  }\n\n  normalize(child, sample, type) {\n    const nodes = super.normalize(child)\n\n    if (sample) {\n      if (type === 'prepend') {\n        if (this.nodes.length > 1) {\n          sample.raws.before = this.nodes[1].raws.before\n        } else {\n          delete sample.raws.before\n        }\n      } else if (this.first !== sample) {\n        for (const node of nodes) {\n          node.raws.before = sample.raws.before\n        }\n      }\n    }\n\n    return nodes\n  }\n\n  removeChild(child, ignore) {\n    const index = this.index(child)\n\n    if (!ignore && index === 0 && this.nodes.length > 1) {\n      this.nodes[1].raws.before = this.nodes[index].raws.before\n    }\n\n    return super.removeChild(child)\n  }\n\n  toResult(opts = {}) {\n    const lazy = new LazyResult(new Processor(), this, opts)\n    return lazy.stringify()\n  }\n\n  static registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nstatic registerProcessor = dependant => {\n  Processor = dependant\n}\n}\n\nContainer.registerRoot(Root)\n", "export const list = {\n  comma(string) {\n    return list.split(string, [','], true)\n  },\n\n  space(string) {\n    const spaces = [' ', '\\n', '\\t']\n    return list.split(string, spaces)\n  },\n\n  split(string, separators, last) {\n    const array = []\n    let current = ''\n    let split = false\n\n    let func = 0\n    let inQuote = false\n    let prevQuote = ''\n    let escape = false\n\n    for (const letter of string) {\n      if (escape) {\n        escape = false\n      } else if (letter === '\\\\') {\n        escape = true\n      } else if (inQuote) {\n        if (letter === prevQuote) {\n          inQuote = false\n        }\n      } else if (letter === '\"' || letter === \"'\") {\n        inQuote = true\n        prevQuote = letter\n      } else if (letter === '(') {\n        func += 1\n      } else if (letter === ')') {\n        if (func > 0) func -= 1\n      } else if (func === 0) {\n        if (separators.includes(letter)) split = true\n      }\n\n      if (split) {\n        if (current !== '') array.push(current.trim())\n        current = ''\n        split = false\n      } else {\n        current += letter\n      }\n    }\n\n    if (last || current !== '') array.push(current.trim())\n    return array\n  }\n}\n", "import { Container } from \"./container\";\nimport { list } from './list';\n\nexport class Rule extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'rule'\n    if (!this.nodes) this.nodes = []\n  }\n\n  get selectors() {\n    return list.comma(this.selector)\n  }\n\n  set selectors(values) {\n    const match = this.selector ? this.selector.match(/,\\s*/) : null\n    const sep = match ? match[0] : ',' + this.raw('between', 'beforeOpen')\n    this.selector = values.join(sep)\n  }\n}\n\nContainer.registerRule(Rule)", "\n\nimport { CssSyntaxError } from \"./css-syntax-error\";\n\nconst fromOffsetCache = Symbol('fromOffsetCache')\n\nexport class Input {\n  constructor(css, opts = {}) {\n    if (\n      css === null ||\n      typeof css === 'undefined' ||\n      (typeof css === 'object' && !css.toString)\n    ) {\n      throw new Error(`PostCSS received ${css} instead of CSS string`)\n    }\n\n    this.css = css.toString()\n\n    if (this.css[0] === '\\uFEFF' || this.css[0] === '\\uFFFE') {\n      this.hasBOM = true\n      this.css = this.css.slice(1)\n    } else {\n      this.hasBOM = false\n    }\n\n    if (this.map) this.map.file = this.from\n  }\n\n  error(message, line, column, opts = {}) {\n    let endColumn, endLine, result\n\n    if (line && typeof line === 'object') {\n      const start = line\n      const end = column\n      if (typeof start.offset === 'number') {\n        const pos = this.fromOffset(start.offset)\n        line = pos.line\n        column = pos.col\n      } else {\n        line = start.line\n        column = start.column\n      }\n      if (typeof end.offset === 'number') {\n        const pos = this.fromOffset(end.offset)\n        endLine = pos.line\n        endColumn = pos.col\n      } else {\n        endLine = end.line\n        endColumn = end.column\n      }\n    } else if (!column) {\n      const pos = this.fromOffset(line)\n      line = pos.line\n      column = pos.col\n    }\n\n    const origin = this.origin(line, column, endLine, endColumn)\n    if (origin) {\n      result = new CssSyntaxError(\n        message,\n        origin.endLine === undefined\n          ? origin.line\n          : { column: origin.column, line: origin.line },\n        origin.endLine === undefined\n          ? origin.column\n          : { column: origin.endColumn, line: origin.endLine },\n        origin.source,\n        origin.file,\n        opts.plugin\n      )\n    } else {\n      result = new CssSyntaxError(\n        message,\n        endLine === undefined ? line : { column, line },\n        endLine === undefined ? column : { column: endColumn, line: endLine },\n        this.css,\n        this.file,\n        opts.plugin\n      )\n    }\n\n    result.input = { column, endColumn, endLine, line, source: this.css }\n    if (this.file) {\n      result.input.file = this.file\n    }\n\n    return result\n  }\n\n  fromOffset(offset) {\n    let lastLine, lineToIndex\n    if (!this[fromOffsetCache]) {\n      const lines = this.css.split('\\n')\n      lineToIndex = new Array(lines.length)\n      let prevIndex = 0\n\n      for (let i = 0, l = lines.length; i < l; i++) {\n        lineToIndex[i] = prevIndex\n        prevIndex += lines[i].length + 1\n      }\n\n      this[fromOffsetCache] = lineToIndex\n    } else {\n      lineToIndex = this[fromOffsetCache]\n    }\n    lastLine = lineToIndex[lineToIndex.length - 1]\n\n    let min = 0\n    if (offset >= lastLine) {\n      min = lineToIndex.length - 1\n    } else {\n      let max = lineToIndex.length - 2\n      let mid\n      while (min < max) {\n        mid = min + ((max - min) >> 1)\n        if (offset < lineToIndex[mid]) {\n          max = mid - 1\n        } else if (offset >= lineToIndex[mid + 1]) {\n          min = mid + 1\n        } else {\n          min = mid\n          break\n        }\n      }\n    }\n    return {\n      col: offset - lineToIndex[min] + 1,\n      line: min + 1\n    }\n  }\n\n  origin(line, column, endLine, endColumn) {\n    if (!this.map) return false\n    const consumer = this.map.consumer()\n\n    const from = consumer.originalPositionFor({ column, line })\n    if (!from.source) return false\n\n    let to\n    if (typeof endLine === 'number') {\n      to = consumer.originalPositionFor({ column: endColumn, line: endLine })\n    }\n\n    let fromUrl\n\n\n      fromUrl = new URL(\n        from.source,\n        this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile)\n      )\n\n    const result = {\n      column: from.column,\n      endColumn: to && to.column,\n      endLine: to && to.line,\n      line: from.line,\n      url: fromUrl.toString()\n    }\n\n    const source = consumer.sourceContentFor(from.source)\n    if (source) result.source = source\n\n    return result\n  }\n\n  toJSON() {\n    const json = {}\n    for (const name of ['hasBOM', 'css', 'file', 'id']) {\n      if (this[name] != null) {\n        json[name] = this[name]\n      }\n    }\n    if (this.map) {\n      json.map = { ...this.map }\n      if (json.map.consumerCache) {\n        json.map.consumerCache = undefined\n      }\n    }\n    return json\n  }\n\n  get from() {\n    return this.file || this.id\n  }\n}\n", "const SINGLE_QUOTE = \"'\".charCodeAt(0)\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0)\nconst BACKSLASH = '\\\\'.charCodeAt(0)\nconst SLASH = '/'.charCodeAt(0)\nconst NEWLINE = '\\n'.charCodeAt(0)\nconst SPACE = ' '.charCodeAt(0)\nconst FEED = '\\f'.charCodeAt(0)\nconst TAB = '\\t'.charCodeAt(0)\nconst CR = '\\r'.charCodeAt(0)\nconst OPEN_SQUARE = '['.charCodeAt(0)\nconst CLOSE_SQUARE = ']'.charCodeAt(0)\nconst OPEN_PARENTHESES = '('.charCodeAt(0)\nconst CLOSE_PARENTHESES = ')'.charCodeAt(0)\nconst OPEN_CURLY = '{'.charCodeAt(0)\nconst CLOSE_CURLY = '}'.charCodeAt(0)\nconst SEMICOLON = ';'.charCodeAt(0)\nconst ASTERISK = '*'.charCodeAt(0)\nconst COLON = ':'.charCodeAt(0)\nconst AT = '@'.charCodeAt(0)\n\nconst RE_AT_END = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g\nconst RE_BAD_BRACKET = /.[\\r\\n\"'(/\\\\]/\nconst RE_HEX_ESCAPE = /[\\da-f]/i\n\nexport function tokenizer(input, options = {}) {\n  const css = input.css.valueOf()\n  const ignore = options.ignoreErrors\n\n  let code, content, escape, next, quote\n  let currentToken, escaped, escapePos, n, prev\n\n  const length = css.length\n  let pos = 0\n  const buffer = []\n  const returned = []\n\n  function position() {\n    return pos\n  }\n\n  function unclosed(what) {\n    throw input.error('Unclosed ' + what, pos)\n  }\n\n  function endOfFile() {\n    return returned.length === 0 && pos >= length\n  }\n\n  function nextToken(opts) {\n    if (returned.length) return returned.pop()\n    if (pos >= length) return\n\n    const ignoreUnclosed = opts ? opts.ignoreUnclosed : false\n\n    code = css.charCodeAt(pos)\n\n    switch (code) {\n      case NEWLINE:\n      case SPACE:\n      case TAB:\n      case CR:\n      case FEED: {\n        next = pos\n        do {\n          next += 1\n          code = css.charCodeAt(next)\n        } while (\n          code === SPACE ||\n          code === NEWLINE ||\n          code === TAB ||\n          code === CR ||\n          code === FEED\n        )\n\n        currentToken = ['space', css.slice(pos, next)]\n        pos = next - 1\n        break\n      }\n\n      case OPEN_SQUARE:\n      case CLOSE_SQUARE:\n      case OPEN_CURLY:\n      case CLOSE_CURLY:\n      case COLON:\n      case SEMICOLON:\n      case CLOSE_PARENTHESES: {\n        const controlChar = String.fromCharCode(code)\n        currentToken = [controlChar, controlChar, pos]\n        break\n      }\n\n      case OPEN_PARENTHESES: {\n        prev = buffer.length ? buffer.pop()[1] : ''\n        n = css.charCodeAt(pos + 1)\n        if (\n          prev === 'url' &&\n          n !== SINGLE_QUOTE &&\n          n !== DOUBLE_QUOTE &&\n          n !== SPACE &&\n          n !== NEWLINE &&\n          n !== TAB &&\n          n !== FEED &&\n          n !== CR\n        ) {\n          next = pos\n          do {\n            escaped = false\n            next = css.indexOf(')', next + 1)\n            if (next === -1) {\n              if (ignore || ignoreUnclosed) {\n                next = pos\n                break\n              } else {\n                unclosed('bracket')\n              }\n            }\n            escapePos = next\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1\n              escaped = !escaped\n            }\n          } while (escaped)\n\n          currentToken = ['brackets', css.slice(pos, next + 1), pos, next]\n\n          pos = next\n        } else {\n          next = css.indexOf(')', pos + 1)\n          content = css.slice(pos, next + 1)\n\n          if (next === -1 || RE_BAD_BRACKET.test(content)) {\n            currentToken = ['(', '(', pos]\n          } else {\n            currentToken = ['brackets', content, pos, next]\n            pos = next\n          }\n        }\n\n        break\n      }\n\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE: {\n        quote = code === SINGLE_QUOTE ? \"'\" : '\"'\n        next = pos\n        do {\n          escaped = false\n          next = css.indexOf(quote, next + 1)\n          if (next === -1) {\n            if (ignore || ignoreUnclosed) {\n              next = pos + 1\n              break\n            } else {\n              unclosed('string')\n            }\n          }\n          escapePos = next\n          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n            escapePos -= 1\n            escaped = !escaped\n          }\n        } while (escaped)\n\n        currentToken = ['string', css.slice(pos, next + 1), pos, next]\n        pos = next\n        break\n      }\n\n      case AT: {\n        RE_AT_END.lastIndex = pos + 1\n        RE_AT_END.test(css)\n        if (RE_AT_END.lastIndex === 0) {\n          next = css.length - 1\n        } else {\n          next = RE_AT_END.lastIndex - 2\n        }\n\n        currentToken = ['at-word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      case BACKSLASH: {\n        next = pos\n        escape = true\n        while (css.charCodeAt(next + 1) === BACKSLASH) {\n          next += 1\n          escape = !escape\n        }\n        code = css.charCodeAt(next + 1)\n        if (\n          escape &&\n          code !== SLASH &&\n          code !== SPACE &&\n          code !== NEWLINE &&\n          code !== TAB &&\n          code !== CR &&\n          code !== FEED\n        ) {\n          next += 1\n          if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n            while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {\n              next += 1\n            }\n            if (css.charCodeAt(next + 1) === SPACE) {\n              next += 1\n            }\n          }\n        }\n\n        currentToken = ['word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      default: {\n        if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n          next = css.indexOf('*/', pos + 2) + 1\n          if (next === 0) {\n            if (ignore || ignoreUnclosed) {\n              next = css.length\n            } else {\n              unclosed('comment')\n            }\n          }\n\n          currentToken = ['comment', css.slice(pos, next + 1), pos, next]\n          pos = next\n        } else {\n          RE_WORD_END.lastIndex = pos + 1\n          RE_WORD_END.test(css)\n          if (RE_WORD_END.lastIndex === 0) {\n            next = css.length - 1\n          } else {\n            next = RE_WORD_END.lastIndex - 2\n          }\n\n          currentToken = ['word', css.slice(pos, next + 1), pos, next]\n          buffer.push(currentToken)\n          pos = next\n        }\n\n        break\n      }\n    }\n\n    pos++\n    return currentToken\n  }\n\n  function back(token) {\n    returned.push(token)\n  }\n\n  return {\n    back,\n    endOfFile,\n    nextToken,\n    position\n  }\n}\n", "\n\nimport { AtRule } from './at-rule';\nimport { Comment } from './comment';\nimport { Declaration } from './declaration';\nimport { Root } from './root';\nimport { Rule } from './rule';\nimport { tokenizer } from \"./tokenize\";\n\nconst SAFE_COMMENT_NEIGHBOR = {\n  empty: true,\n  space: true\n}\n\nfunction findLastWithPosition(tokens) {\n  for (let i = tokens.length - 1; i >= 0; i--) {\n    const token = tokens[i]\n    const pos = token[3] || token[2]\n    if (pos) return pos\n  }\n}\n\nexport class Parser {\n  constructor(input) {\n    this.input = input\n\n    this.root = new Root()\n    this.current = this.root\n    this.spaces = ''\n    this.semicolon = false\n\n    this.createTokenizer()\n    this.root.source = { input, start: { column: 1, line: 1, offset: 0 } }\n  }\n\n  atrule(token) {\n    const node = new AtRule()\n    node.name = token[1].slice(1)\n    if (node.name === '') {\n      this.unnamedAtrule(node, token)\n    }\n    this.init(node, token[2])\n\n    let type\n    let prev\n    let shift\n    let last = false\n    let open = false\n    const params = []\n    const brackets = []\n\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n      type = token[0]\n\n      if (type === '(' || type === '[') {\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (type === '{' && brackets.length > 0) {\n        brackets.push('}')\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n      }\n\n      if (brackets.length === 0) {\n        if (type === ';') {\n          node.source.end = this.getPosition(token[2])\n          node.source.end.offset++\n          this.semicolon = true\n          break\n        } else if (type === '{') {\n          open = true\n          break\n        } else if (type === '}') {\n          if (params.length > 0) {\n            shift = params.length - 1\n            prev = params[shift]\n            while (prev && prev[0] === 'space') {\n              prev = params[--shift]\n            }\n            if (prev) {\n              node.source.end = this.getPosition(prev[3] || prev[2])\n              node.source.end.offset++\n            }\n          }\n          this.end(token)\n          break\n        } else {\n          params.push(token)\n        }\n      } else {\n        params.push(token)\n      }\n\n      if (this.tokenizer.endOfFile()) {\n        last = true\n        break\n      }\n    }\n\n    node.raws.between = this.spacesAndCommentsFromEnd(params)\n    if (params.length) {\n      node.raws.afterName = this.spacesAndCommentsFromStart(params)\n      this.raw(node, 'params', params)\n      if (last) {\n        token = params[params.length - 1]\n        node.source.end = this.getPosition(token[3] || token[2])\n        node.source.end.offset++\n        this.spaces = node.raws.between\n        node.raws.between = ''\n      }\n    } else {\n      node.raws.afterName = ''\n      node.params = ''\n    }\n\n    if (open) {\n      node.nodes = []\n      this.current = node\n    }\n  }\n\n  checkMissedSemicolon(tokens) {\n    const colon = this.colon(tokens)\n    if (colon === false) return\n\n    let founded = 0\n    let token\n    for (let j = colon - 1; j >= 0; j--) {\n      token = tokens[j]\n      if (token[0] !== 'space') {\n        founded += 1\n        if (founded === 2) break\n      }\n    }\n    // If the token is a word, e.g. `!important`, `red` or any other valid property's value.\n    // Then we need to return the colon after that word token. [3] is the \"end\" colon of that word.\n    // And because we need it after that one we do +1 to get the next one.\n    throw this.input.error(\n      'Missed semicolon',\n      token[0] === 'word' ? token[3] + 1 : token[2]\n    )\n  }\n\n  colon(tokens) {\n    let brackets = 0\n    let prev, token, type\n    for (const [i, element] of tokens.entries()) {\n      token = element\n      type = token[0]\n\n      if (type === '(') {\n        brackets += 1\n      }\n      if (type === ')') {\n        brackets -= 1\n      }\n      if (brackets === 0 && type === ':') {\n        if (!prev) {\n          this.doubleColon(token)\n        } else if (prev[0] === 'word' && prev[1] === 'progid') {\n          continue\n        } else {\n          return i\n        }\n      }\n\n      prev = token\n    }\n    return false\n  }\n\n  comment(token) {\n    const node = new Comment()\n    this.init(node, token[2])\n    node.source.end = this.getPosition(token[3] || token[2])\n    node.source.end.offset++\n\n    const text = token[1].slice(2, -2)\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      const match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input)\n  }\n\n  decl(tokens, customProperty) {\n    const node = new Declaration()\n    this.init(node, tokens[0][2])\n\n    const last = tokens[tokens.length - 1]\n    if (last[0] === ';') {\n      this.semicolon = true\n      tokens.pop()\n    }\n\n    node.source.end = this.getPosition(\n      last[3] || last[2] || findLastWithPosition(tokens)\n    )\n    node.source.end.offset++\n\n    while (tokens[0][0] !== 'word') {\n      if (tokens.length === 1) this.unknownWord(tokens)\n      node.raws.before += tokens.shift()[1]\n    }\n    node.source.start = this.getPosition(tokens[0][2])\n\n    node.prop = ''\n    while (tokens.length) {\n      const type = tokens[0][0]\n      if (type === ':' || type === 'space' || type === 'comment') {\n        break\n      }\n      node.prop += tokens.shift()[1]\n    }\n\n    node.raws.between = ''\n\n    let token\n    while (tokens.length) {\n      token = tokens.shift()\n\n      if (token[0] === ':') {\n        node.raws.between += token[1]\n        break\n      } else {\n        if (token[0] === 'word' && /\\w/.test(token[1])) {\n          this.unknownWord([token])\n        }\n        node.raws.between += token[1]\n      }\n    }\n\n    if (node.prop[0] === '_' || node.prop[0] === '*') {\n      node.raws.before += node.prop[0]\n      node.prop = node.prop.slice(1)\n    }\n\n    let firstSpaces = []\n    let next\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      firstSpaces.push(tokens.shift())\n    }\n\n    this.precheckMissedSemicolon(tokens)\n\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      token = tokens[i]\n      if (token[1].toLowerCase() === '!important') {\n        node.important = true\n        let string = this.stringFrom(tokens, i)\n        string = this.spacesFromEnd(tokens) + string\n        if (string !== ' !important') node.raws.important = string\n        break\n      } else if (token[1].toLowerCase() === 'important') {\n        const cache = tokens.slice(0)\n        let str = ''\n        for (let j = i; j > 0; j--) {\n          const type = cache[j][0]\n          if (str.trim().startsWith('!') && type !== 'space') {\n            break\n          }\n          str = cache.pop()[1] + str\n        }\n        if (str.trim().startsWith('!')) {\n          node.important = true\n          node.raws.important = str\n          tokens = cache\n        }\n      }\n\n      if (token[0] !== 'space' && token[0] !== 'comment') {\n        break\n      }\n    }\n\n    const hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment')\n\n    if (hasWord) {\n      node.raws.between += firstSpaces.map(i => i[1]).join('')\n      firstSpaces = []\n    }\n    this.raw(node, 'value', firstSpaces.concat(tokens), customProperty)\n\n    if (node.value.includes(':') && !customProperty) {\n      this.checkMissedSemicolon(tokens)\n    }\n  }\n\n  doubleColon(token) {\n    throw this.input.error(\n      'Double colon',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  emptyRule(token) {\n    const node = new Rule()\n    this.init(node, token[2])\n    node.selector = ''\n    node.raws.between = ''\n    this.current = node\n  }\n\n  end(token) {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.semicolon = false\n\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n    this.spaces = ''\n\n    if (this.current.parent) {\n      this.current.source.end = this.getPosition(token[2])\n      this.current.source.end.offset++\n      this.current = this.current.parent\n    } else {\n      this.unexpectedClose(token)\n    }\n  }\n\n  endFile() {\n    if (this.current.parent) this.unclosedBlock()\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n    this.root.source.end = this.getPosition(this.tokenizer.position())\n  }\n\n  freeSemicolon(token) {\n    this.spaces += token[1]\n    if (this.current.nodes) {\n      const prev = this.current.nodes[this.current.nodes.length - 1]\n      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n        prev.raws.ownSemicolon = this.spaces\n        this.spaces = ''\n      }\n    }\n  }\n\n  // Helpers\n\n  getPosition(offset) {\n    const pos = this.input.fromOffset(offset)\n    return {\n      column: pos.col,\n      line: pos.line,\n      offset\n    }\n  }\n\n  init(node, offset) {\n    this.current.push(node)\n    node.source = {\n      input: this.input,\n      start: this.getPosition(offset)\n    }\n    node.raws.before = this.spaces\n    this.spaces = ''\n    if (node.type !== 'comment') this.semicolon = false\n  }\n\n  other(start) {\n    let end = false\n    let type = null\n    let colon = false\n    let bracket = null\n    const brackets = []\n    const customProperty = start[1].startsWith('--')\n\n    const tokens = []\n    let token = start\n    while (token) {\n      type = token[0]\n      tokens.push(token)\n\n      if (type === '(' || type === '[') {\n        if (!bracket) bracket = token\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (customProperty && colon && type === '{') {\n        if (!bracket) bracket = token\n        brackets.push('}')\n      } else if (brackets.length === 0) {\n        if (type === ';') {\n          if (colon) {\n            this.decl(tokens, customProperty)\n            return\n          } else {\n            break\n          }\n        } else if (type === '{') {\n          this.rule(tokens)\n          return\n        } else if (type === '}') {\n          this.tokenizer.back(tokens.pop())\n          end = true\n          break\n        } else if (type === ':') {\n          colon = true\n        }\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n        if (brackets.length === 0) bracket = null\n      }\n\n      token = this.tokenizer.nextToken()\n    }\n\n    if (this.tokenizer.endOfFile()) end = true\n    if (brackets.length > 0) this.unclosedBracket(bracket)\n\n    if (end && colon) {\n      if (!customProperty) {\n        while (tokens.length) {\n          token = tokens[tokens.length - 1][0]\n          if (token !== 'space' && token !== 'comment') break\n          this.tokenizer.back(tokens.pop())\n        }\n      }\n      this.decl(tokens, customProperty)\n    } else {\n      this.unknownWord(tokens)\n    }\n  }\n\n  parse() {\n    let token\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n\n      switch (token[0]) {\n        case 'space':\n          this.spaces += token[1]\n          break\n\n        case ';':\n          this.freeSemicolon(token)\n          break\n\n        case '}':\n          this.end(token)\n          break\n\n        case 'comment':\n          this.comment(token)\n          break\n\n        case 'at-word':\n          this.atrule(token)\n          break\n\n        case '{':\n          this.emptyRule(token)\n          break\n\n        default:\n          this.other(token)\n          break\n      }\n    }\n    this.endFile()\n  }\n\n  precheckMissedSemicolon(/* tokens */) {\n    // Hook for Safe Parser\n  }\n\n  raw(node, prop, tokens, customProperty) {\n    let token, type\n    const length = tokens.length\n    let value = ''\n    let clean = true\n    let next, prev\n\n    for (let i = 0; i < length; i += 1) {\n      token = tokens[i]\n      type = token[0]\n      if (type === 'space' && i === length - 1 && !customProperty) {\n        clean = false\n      } else if (type === 'comment') {\n        prev = tokens[i - 1] ? tokens[i - 1][0] : 'empty'\n        next = tokens[i + 1] ? tokens[i + 1][0] : 'empty'\n        if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next]) {\n          if (value.slice(-1) === ',') {\n            clean = false\n          } else {\n            value += token[1]\n          }\n        } else {\n          clean = false\n        }\n      } else {\n        value += token[1]\n      }\n    }\n    if (!clean) {\n      const raw = tokens.reduce((all, i) => all + i[1], '')\n      node.raws[prop] = { raw, value }\n    }\n    node[prop] = value\n  }\n\n  rule(tokens) {\n    tokens.pop()\n\n    const node = new Rule()\n    this.init(node, tokens[0][2])\n\n    node.raws.between = this.spacesAndCommentsFromEnd(tokens)\n    this.raw(node, 'selector', tokens)\n    this.current = node\n  }\n\n  spacesAndCommentsFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  // Errors\n\n  spacesAndCommentsFromStart(tokens) {\n    let next\n    let spaces = ''\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      spaces += tokens.shift()[1]\n    }\n    return spaces\n  }\n\n  spacesFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  stringFrom(tokens, from) {\n    let result = ''\n    for (let i = from; i < tokens.length; i++) {\n      result += tokens[i][1]\n    }\n    tokens.splice(from, tokens.length - from)\n    return result\n  }\n\n  unclosedBlock() {\n    const pos = this.current.source.start\n    throw this.input.error('Unclosed block', pos.line, pos.column)\n  }\n\n  unclosedBracket(bracket) {\n    throw this.input.error(\n      'Unclosed bracket',\n      { offset: bracket[2] },\n      { offset: bracket[2] + 1 }\n    )\n  }\n\n  unexpectedClose(token) {\n    throw this.input.error(\n      'Unexpected }',\n      { offset: token[2] },\n      { offset: token[2] + 1 }\n    )\n  }\n\n  unknownWord(tokens) {\n    throw this.input.error(\n      'Unknown word',\n      { offset: tokens[0][2] },\n      { offset: tokens[0][2] + tokens[0][1].length }\n    )\n  }\n\n  unnamedAtrule(node, token) {\n    throw this.input.error(\n      'At-rule without name',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n}\n", "\n\nimport { Container } from \"./container\";\nimport { Input } from './input';\nimport { Parser } from './parser';\n\nexport function parse(css, opts) {\n  const input = new Input(css, opts)\n  const parser = new Parser(input)\n  try {\n    parser.parse()\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (e.name === 'CssSyntaxError' && opts && opts.from) {\n        if (/\\.scss$/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse SCSS with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-scss parser'\n        } else if (/\\.sass/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse Sass with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-sass parser'\n        } else if (/\\.less$/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse Less with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-less parser'\n        }\n      }\n    }\n    throw e\n  }\n\n  return parser.root\n}\n\nContainer.registerParse(parse)\n", "\n\nimport { Container } from \"./container\";\n\nlet LazyResult, Processor\n\nexport class Document extends Container {\n  constructor(defaults) {\n    // type needs to be passed to super, otherwise child roots won't be normalized correctly\n    super({ type: 'document', ...defaults })\n\n    if (!this.nodes) {\n      this.nodes = []\n    }\n  }\n\n  toResult(opts = {}) {\n    const lazy = new LazyResult(new Processor(), this, opts)\n\n    return lazy.stringify()\n  }\n}\n\nDocument.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nDocument.registerProcessor = dependant => {\n  Processor = dependant\n}", "import { Input } from './input';\n\nexport class MapGenerator {\n  constructor(stringify, root, opts, cssString) {\n    this.stringify = stringify\n    this.mapOpts = opts.map || {}\n    this.root = root\n    this.opts = opts\n    this.css = cssString\n    this.originalCSS = cssString\n    this.usesFileUrls = !this.mapOpts.from && this.mapOpts.absolute\n\n    this.memoizedFileURLs = new Map()\n    this.memoizedPaths = new Map()\n    this.memoizedURLs = new Map()\n  }\n\n  addAnnotation() {\n    let content\n\n    if (this.isInline()) {\n      content =\n        'data:application/json;base64,' + this.toBase64(this.map.toString())\n    } else if (typeof this.mapOpts.annotation === 'string') {\n      content = this.mapOpts.annotation\n    } else if (typeof this.mapOpts.annotation === 'function') {\n      content = this.mapOpts.annotation(this.opts.to, this.root)\n    } else {\n      content = this.outputFile() + '.map'\n    }\n    let eol = '\\n'\n    if (this.css.includes('\\r\\n')) eol = '\\r\\n'\n\n    this.css += eol + '/*# sourceMappingURL=' + content + ' */'\n  }\n\n  applyPrevMaps() {\n   \n  }\n\n  clearAnnotation() {\n    if (this.mapOpts.annotation === false) return\n\n    if (this.root) {\n      let node\n      for (let i = this.root.nodes.length - 1; i >= 0; i--) {\n        node = this.root.nodes[i]\n        if (node.type !== 'comment') continue\n        if (node.text.startsWith('# sourceMappingURL=')) {\n          this.root.removeChild(i)\n        }\n      }\n    } else if (this.css) {\n      this.css = this.css.replace(/\\n*\\/\\*#[\\S\\s]*?\\*\\/$/gm, '')\n    }\n  }\n\n  generate() {\n    this.clearAnnotation()\n      let result = ''\n      this.stringify(this.root, i => {\n        result += i\n      })\n      return [result]\n  }\n\n  generateMap() {\n    if (this.root) {\n      this.generateString()\n    } else if (this.previous().length === 1) {\n      const prev = this.previous()[0].consumer()\n      prev.file = this.outputFile()\n      this.map = SourceMapGenerator.fromSourceMap(prev, {\n        ignoreInvalidMapping: true\n      })\n    } else {\n      this.map = new SourceMapGenerator({\n        file: this.outputFile(),\n        ignoreInvalidMapping: true\n      })\n      this.map.addMapping({\n        generated: { column: 0, line: 1 },\n        original: { column: 0, line: 1 },\n        source: this.opts.from\n          ? this.toUrl(this.path(this.opts.from))\n          : '<no source>'\n      })\n    }\n\n    if (this.isSourcesContent()) this.setSourcesContent()\n    if (this.root && this.previous().length > 0) this.applyPrevMaps()\n    if (this.isAnnotation()) this.addAnnotation()\n\n    if (this.isInline()) {\n      return [this.css]\n    } else {\n      return [this.css, this.map]\n    }\n  }\n\n  generateString() {\n    this.css = ''\n    this.map = new SourceMapGenerator({\n      file: this.outputFile(),\n      ignoreInvalidMapping: true\n    })\n\n    let line = 1\n    let column = 1\n\n    const noSource = '<no source>'\n    const mapping = {\n      generated: { column: 0, line: 0 },\n      original: { column: 0, line: 0 },\n      source: ''\n    }\n\n    let last, lines\n    this.stringify(this.root, (str, node, type) => {\n      this.css += str\n\n      if (node && type !== 'end') {\n        mapping.generated.line = line\n        mapping.generated.column = column - 1\n        if (node.source && node.source.start) {\n          mapping.source = this.sourcePath(node)\n          mapping.original.line = node.source.start.line\n          mapping.original.column = node.source.start.column - 1\n          this.map.addMapping(mapping)\n        } else {\n          mapping.source = noSource\n          mapping.original.line = 1\n          mapping.original.column = 0\n          this.map.addMapping(mapping)\n        }\n      }\n\n      lines = str.match(/\\n/g)\n      if (lines) {\n        line += lines.length\n        last = str.lastIndexOf('\\n')\n        column = str.length - last\n      } else {\n        column += str.length\n      }\n\n      if (node && type !== 'start') {\n        const p = node.parent || { raws: {} }\n        const childless =\n          node.type === 'decl' || (node.type === 'atrule' && !node.nodes)\n        if (!childless || node !== p.last || p.raws.semicolon) {\n          if (node.source && node.source.end) {\n            mapping.source = this.sourcePath(node)\n            mapping.original.line = node.source.end.line\n            mapping.original.column = node.source.end.column - 1\n            mapping.generated.line = line\n            mapping.generated.column = column - 2\n            this.map.addMapping(mapping)\n          } else {\n            mapping.source = noSource\n            mapping.original.line = 1\n            mapping.original.column = 0\n            mapping.generated.line = line\n            mapping.generated.column = column - 1\n            this.map.addMapping(mapping)\n          }\n        }\n      }\n    })\n  }\n\n  isAnnotation() {\n    if (this.isInline()) {\n      return true\n    }\n    if (typeof this.mapOpts.annotation !== 'undefined') {\n      return this.mapOpts.annotation\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.annotation)\n    }\n    return true\n  }\n\n  isInline() {\n    if (typeof this.mapOpts.inline !== 'undefined') {\n      return this.mapOpts.inline\n    }\n\n    const annotation = this.mapOpts.annotation\n    if (typeof annotation !== 'undefined' && annotation !== true) {\n      return false\n    }\n\n    if (this.previous().length) {\n      return this.previous().some(i => i.inline)\n    }\n    return true\n  }\n\n  isMap() {\n    if (typeof this.opts.map !== 'undefined') {\n      return !!this.opts.map\n    }\n    return this.previous().length > 0\n  }\n\n  isSourcesContent() {\n    if (typeof this.mapOpts.sourcesContent !== 'undefined') {\n      return this.mapOpts.sourcesContent\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.withContent())\n    }\n    return true\n  }\n\n  outputFile() {\n    if (this.opts.to) {\n      return this.path(this.opts.to)\n    } else if (this.opts.from) {\n      return this.path(this.opts.from)\n    } else {\n      return 'to.css'\n    }\n  }\n\n  path(file) {\n   return file;\n  }\n\n  previous() {\n    if (!this.previousMaps) {\n      this.previousMaps = []\n      if (this.root) {\n        this.root.walk(node => {\n          if (node.source && node.source.input.map) {\n            const map = node.source.input.map\n            if (!this.previousMaps.includes(map)) {\n              this.previousMaps.push(map)\n            }\n          }\n        })\n      } else {\n        const input = new Input(this.originalCSS, this.opts)\n        if (input.map) this.previousMaps.push(input.map)\n      }\n    }\n\n    return this.previousMaps\n  }\n\n  setSourcesContent() {\n    throw new Error(`setSourcesContent isnt implemented`);\n  }\n\n  sourcePath(node) {\n    if (this.mapOpts.from) {\n      return this.toUrl(this.mapOpts.from)\n    } else if (this.usesFileUrls) {\n      return this.toFileUrl(node.source.input.from)\n    } else {\n      return this.toUrl(this.path(node.source.input.from))\n    }\n  }\n\n  toBase64(str) {\n    if (Buffer) {\n      return Buffer.from(str).toString('base64')\n    } else {\n      return window.btoa(unescape(encodeURIComponent(str)))\n    }\n  }\n\n  toFileUrl(path) {\n    const cached = this.memoizedFileURLs.get(path)\n    if (cached) return cached\n\n      throw new Error(\n        '`map.absolute` option is not available in this PostCSS build'\n      )\n  }\n\n  toUrl(path) {\n    const cached = this.memoizedURLs.get(path)\n    if (cached) return cached\n\n    path = path.replace(/\\\\/g, '/')\n\n    const url = encodeURI(path).replace(/[#?]/g, encodeURIComponent)\n    this.memoizedURLs.set(path, url)\n\n    return url\n  }\n}\n", "const printed = {}\n\nexport  function warnOnce(message) {\n  if (printed[message]) return\n  printed[message] = true\n\n  if (typeof console !== 'undefined' && console.warn) {\n    console.warn(message)\n  }\n}\n", "export class Warning {\n  constructor(text, opts = {}) {\n    this.type = 'warning'\n    this.text = text\n\n    if (opts.node && opts.node.source) {\n      const range = opts.node.rangeBy(opts)\n      this.line = range.start.line\n      this.column = range.start.column\n      this.endLine = range.end.line\n      this.endColumn = range.end.column\n    }\n\n    for (const opt in opts) this[opt] = opts[opt]\n  }\n\n  toString() {\n    if (this.node) {\n      return this.node.error(this.text, {\n        index: this.index,\n        plugin: this.plugin,\n        word: this.word\n      }).message\n    }\n\n    if (this.plugin) {\n      return this.plugin + ': ' + this.text\n    }\n\n    return this.text\n  }\n}", "\n\nimport { Warning } from './warning';\n\nexport class Result {\n  constructor(processor, root, opts) {\n    this.processor = processor\n    this.messages = []\n    this.root = root\n    this.opts = opts\n    this.css = undefined\n    this.map = undefined\n  }\n\n  toString() {\n    return this.css\n  }\n\n  warn(text, opts = {}) {\n    if (!opts.plugin) {\n      if (this.lastPlugin && this.lastPlugin.postcssPlugin) {\n        opts.plugin = this.lastPlugin.postcssPlugin\n      }\n    }\n\n    const warning = new Warning(text, opts)\n    this.messages.push(warning)\n\n    return warning\n  }\n\n  warnings() {\n    return this.messages.filter(i => i.type === 'warning')\n  }\n\n  get content() {\n    return this.css\n  }\n}", "import { AtRule } from './at-rule';\nimport { Comment } from './comment';\nimport { Declaration } from './declaration';\nimport { Root } from './root';\nimport { Rule } from './rule';\nimport { parse } from \"./parse\";\nimport { list } from \"./list\";\nimport { Input } from './input';\nimport { stringify } from \"./stringify\";\nimport { CssSyntaxError } from \"./css-syntax-error\";\nimport { Container } from \"./container\";\nimport { Document } from \"./document\";\nimport { Node } from \"./node\";\nimport { fromJSON } from \"./fromJSON\";\nimport { Processor } from \"./processor\";\nimport { Warning } from \"./warning\";\nimport { Result } from \"./result\";\nimport { LazyResult } from \"./lazy-result\";\n\nLazyResult.registerPostcss(postcss)\n\nfunction postcss(...plugins) {\n  if (plugins.length === 1 && Array.isArray(plugins[0])) {\n    plugins = plugins[0]\n  }\n  return new Processor(plugins)\n}\n\npostcss.plugin = function plugin(name, initializer) {\n  let warningPrinted = false\n  function creator(...args) {\n    // eslint-disable-next-line no-console\n    const transformer = initializer(...args)\n    transformer.postcssPlugin = name\n    transformer.postcssVersion = new Processor().version\n    return transformer\n  }\n\n  let cache\n  Object.defineProperty(creator, 'postcss', {\n    get() {\n      if (!cache) cache = creator()\n      return cache\n    }\n  })\n\n  creator.process = (css, processOpts, pluginOpts) => postcss([creator(pluginOpts)]).process(css, processOpts)\n\n  return creator\n}\n\npostcss.stringify = stringify\npostcss.parse = parse\npostcss.fromJSON = fromJSON\npostcss.list = list\n\npostcss.comment = defaults => new Comment(defaults)\npostcss.atRule = defaults => new AtRule(defaults)\npostcss.decl = defaults => new Declaration(defaults)\npostcss.rule = defaults => new Rule(defaults)\npostcss.root = defaults => new Root(defaults)\npostcss.document = defaults => new Document(defaults)\n\npostcss.CssSyntaxError = CssSyntaxError\npostcss.Declaration = Declaration\npostcss.Container = Container\npostcss.Processor = Processor\npostcss.Document = Document\npostcss.Comment = Comment\npostcss.Warning = Warning\npostcss.AtRule = AtRule\npostcss.Result = Result\npostcss.Input = Input\npostcss.Rule = Rule\npostcss.Root = Root\npostcss.Node = Node\n\nexport default postcss;", "\n\nimport { AtRule } from './at-rule';\nimport { Comment } from './comment';\nimport { Declaration } from './declaration';\nimport { Root } from './root';\nimport { Rule } from './rule';\nimport { Input } from './input';\n\nexport function fromJSON(json, inputs) {\n  if (Array.isArray(json)) return json.map(n => fromJSON(n))\n\n  const { inputs: ownInputs, ...defaults } = json\n  if (ownInputs) {\n    inputs = []\n    for (const input of ownInputs) {\n      const inputHydrated = { ...input, __proto__: Input.prototype }\n      if (inputHydrated.map) {\n        inputHydrated.map = {\n          ...inputHydrated.map,\n        }\n      }\n      inputs.push(inputHydrated)\n    }\n  }\n  if (defaults.nodes) {\n    defaults.nodes = json.nodes.map(n => fromJSON(n, inputs))\n  }\n  if (defaults.source) {\n    const { inputId, ...source } = defaults.source\n    defaults.source = source\n    if (inputId != null) {\n      defaults.source.input = inputs[inputId]\n    }\n  }\n  if (defaults.type === 'root') {\n    return new Root(defaults)\n  } else if (defaults.type === 'decl') {\n    return new Declaration(defaults)\n  } else if (defaults.type === 'rule') {\n    return new Rule(defaults)\n  } else if (defaults.type === 'comment') {\n    return new Comment(defaults)\n  } else if (defaults.type === 'atrule') {\n    return new AtRule(defaults)\n  } else {\n    throw new Error('Unknown node type: ' + json.type)\n  }\n}", "import { Document } from \"./document\";\nimport { Root } from './root';\nimport { NoWorkResult } from './no-work-result';\nimport { LazyResult } from './lazy-result';\n\nexport class Processor {\n  constructor(plugins = []) {\n    this.version = '8.4.49'\n    this.plugins = this.normalize(plugins)\n  }\n\n  normalize(plugins) {\n    let normalized = []\n    for (let i of plugins) {\n      if (i.postcss === true) {\n        i = i()\n      } else if (i.postcss) {\n        i = i.postcss\n      }\n\n      if (typeof i === 'object' && Array.isArray(i.plugins)) {\n        normalized = normalized.concat(i.plugins)\n      } else if (typeof i === 'object' && i.postcssPlugin) {\n        normalized.push(i)\n      } else if (typeof i === 'function') {\n        normalized.push(i)\n      } else if (typeof i === 'object' && (i.parse || i.stringify)) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            'PostCSS syntaxes cannot be used as plugins. Instead, please use ' +\n              'one of the syntax/parser/stringifier options as outlined ' +\n              'in your PostCSS runner documentation.'\n          )\n        }\n      } else {\n        throw new Error(i + ' is not a PostCSS plugin')\n      }\n    }\n    return normalized\n  }\n\n  process(css, opts = {}) {\n    if (\n      !this.plugins.length &&\n      !opts.parser &&\n      !opts.stringifier &&\n      !opts.syntax\n    ) {\n      return new NoWorkResult(this, css, opts)\n    } else {\n       return new LazyResult(this, css, opts)\n    }\n  }\n\n  use(plugin) {\n    this.plugins = this.plugins.concat(this.normalize([plugin]))\n    return this\n  }\n}\n\nRoot.registerProcessor(Processor)\nDocument.registerProcessor(Processor)\n", "import { MapGenerator } from './map-generator';\nimport { warnOnce } from './warn-once';\nimport { parse } from './parse';\nimport { Result } from './result';\nimport { stringify } from \"./stringify\";\n\nexport class NoWorkResult {\n  constructor(processor, css, opts) {\n    css = css.toString()\n    this.stringified = false\n\n    this._processor = processor\n    this._css = css\n    this._opts = opts\n    this._map = undefined\n    let root\n\n    const str = stringify\n    this.result = new Result(this._processor, root, this._opts)\n    this.result.css = css\n\n    const self = this\n    Object.defineProperty(this.result, 'root', {\n      get() {\n        return self.root\n      }\n    })\n\n    const map = new MapGenerator(str, root, this._opts, css)\n    if (map.isMap()) {\n      const [generatedCSS, generatedMap] = map.generate()\n      if (generatedCSS) {\n        this.result.css = generatedCSS\n      }\n      if (generatedMap) {\n        this.result.map = generatedMap\n      }\n    } else {\n      map.clearAnnotation()\n      this.result.css = map.css\n    }\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    return Promise.resolve(this.result)\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    return this.result\n  }\n\n  then(onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this._opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  toString() {\n    return this._css\n  }\n\n  warnings() {\n    return []\n  }\n\n  get content() {\n    return this.result.css\n  }\n\n  get css() {\n    return this.result.css\n  }\n\n  get map() {\n    return this.result.map\n  }\n\n  get messages() {\n    return []\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get root() {\n    if (this._root) {\n      return this._root\n    }\n\n    let root\n    const parser = parse\n\n    try {\n      root = parser(this._css, this._opts)\n    } catch (error) {\n      this.error = error\n    }\n\n    if (this.error) {\n      throw this.error\n    } else {\n      this._root = root\n      return root\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'NoWorkResult'\n  }\n}", "const {Container} = require('./container')\nconst {Document} = require('./document')\nconst {MapGenerator} = require('./map-generator')\nconst {parse} = require('./parse')\nconst {Result} = require('./result')\nimport { Root } from './root'\nconst {stringify} = require('./stringify')\nconst { isClean, my } = require('./symbols')\nconst {warnOnce} = require('./warn-once')\n\nconst TYPE_TO_CLASS_NAME = {\n  atrule: 'AtRule',\n  comment: 'Comment',\n  decl: 'Declaration',\n  document: 'Document',\n  root: 'Root',\n  rule: 'Rule'\n}\n\nconst PLUGIN_PROPS = {\n  AtRule: true,\n  AtRuleExit: true,\n  Comment: true,\n  CommentExit: true,\n  Declaration: true,\n  DeclarationExit: true,\n  Document: true,\n  DocumentExit: true,\n  Once: true,\n  OnceExit: true,\n  postcssPlugin: true,\n  prepare: true,\n  Root: true,\n  RootExit: true,\n  Rule: true,\n  RuleExit: true\n}\n\nconst NOT_VISITORS = {\n  Once: true,\n  postcssPlugin: true,\n  prepare: true\n}\n\nconst CHILDREN = 0\n\nfunction isPromise(obj) {\n  return typeof obj === 'object' && typeof obj.then === 'function'\n}\n\nfunction getEvents(node) {\n  let key = false\n  const type = TYPE_TO_CLASS_NAME[node.type]\n  if (node.type === 'decl') {\n    key = node.prop.toLowerCase()\n  } else if (node.type === 'atrule') {\n    key = node.name.toLowerCase()\n  }\n\n  if (key && node.append) {\n    return [\n      type,\n      type + '-' + key,\n      CHILDREN,\n      type + 'Exit',\n      type + 'Exit-' + key\n    ]\n  } else if (key) {\n    return [type, type + '-' + key, type + 'Exit', type + 'Exit-' + key]\n  } else if (node.append) {\n    return [type, CHILDREN, type + 'Exit']\n  } else {\n    return [type, type + 'Exit']\n  }\n}\n\nfunction toStack(node) {\n  let events\n  if (node.type === 'document') {\n    events = ['Document', CHILDREN, 'DocumentExit']\n  } else if (node.type === 'root') {\n    events = ['Root', CHILDREN, 'RootExit']\n  } else {\n    events = getEvents(node)\n  }\n\n  return {\n    eventIndex: 0,\n    events,\n    iterator: 0,\n    node,\n    visitorIndex: 0,\n    visitors: []\n  }\n}\n\nfunction cleanMarks(node) {\n  node[isClean] = false\n  if (node.nodes) node.nodes.forEach(i => cleanMarks(i))\n  return node\n}\n\nlet postcss = {}\n\nexport class LazyResult {\n  constructor(processor, css, opts) {\n    this.stringified = false\n    this.processed = false\n\n    let root\n    if (\n      typeof css === 'object' &&\n      css !== null &&\n      (css.type === 'root' || css.type === 'document')\n    ) {\n      root = cleanMarks(css)\n    } else if (css instanceof LazyResult || css instanceof Result) {\n      root = cleanMarks(css.root)\n      if (css.map) {\n        if (typeof opts.map === 'undefined') opts.map = {}\n        if (!opts.map.inline) opts.map.inline = false\n        opts.map.prev = css.map\n      }\n    } else {\n      let parser = parse\n      if (opts.syntax) parser = opts.syntax.parse\n      if (opts.parser) parser = opts.parser\n      if (parser.parse) parser = parser.parse\n\n      try {\n        root = parser(css, opts)\n      } catch (error) {\n        this.processed = true\n        this.error = error\n      }\n\n      if (root && !root[my]) {\n        /* c8 ignore next 2 */\n        Container.rebuild(root)\n      }\n    }\n\n    this.result = new Result(processor, root, opts)\n    this.helpers = { ...postcss, postcss, result: this.result }\n    this.plugins = this.processor.plugins.map(plugin => {\n      if (typeof plugin === 'object' && plugin.prepare) {\n        return { ...plugin, ...plugin.prepare(this.result) }\n      } else {\n        return plugin\n      }\n    })\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    if (this.processed) return Promise.resolve(this.result)\n    if (!this.processing) {\n      this.processing = this.runAsync()\n    }\n    return this.processing\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  getAsyncError() {\n    throw new Error('Use process(css).then(cb) to work with async plugins')\n  }\n\n  handleError(error, node) {\n    const plugin = this.result.lastPlugin\n    try {\n      if (node) node.addToError(error)\n      this.error = error\n      if (error.name === 'CssSyntaxError' && !error.plugin) {\n        error.plugin = plugin.postcssPlugin\n        error.setMessage()\n      } else if (plugin.postcssVersion) {\n        if (process.env.NODE_ENV !== 'production') {\n          const pluginName = plugin.postcssPlugin\n          const pluginVer = plugin.postcssVersion\n          const runtimeVer = this.result.processor.version\n          const a = pluginVer.split('.')\n          const b = runtimeVer.split('.')\n\n          if (a[0] !== b[0] || Number.parseInt(a[1]) > Number.parseInt(b[1])) {\n            // eslint-disable-next-line no-console\n            console.error(\n              'Unknown error from PostCSS plugin. Your current PostCSS ' +\n                'version is ' +\n                runtimeVer +\n                ', but ' +\n                pluginName +\n                ' uses ' +\n                pluginVer +\n                '. Perhaps this is the source of the error below.'\n            )\n          }\n        }\n      }\n    } catch (err) {\n      /* c8 ignore next 3 */\n      // eslint-disable-next-line no-console\n      if (console && console.error) console.error(err)\n    }\n    return error\n  }\n\n  prepareVisitors() {\n    this.listeners = {}\n    const add = (plugin, type, cb) => {\n      if (!this.listeners[type]) this.listeners[type] = []\n      this.listeners[type].push([plugin, cb])\n    }\n    for (const plugin of this.plugins) {\n      if (typeof plugin === 'object') {\n        for (const event in plugin) {\n          if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {\n            throw new Error(\n              `Unknown event ${event} in ${plugin.postcssPlugin}. ` +\n                `Try to update PostCSS (${this.processor.version} now).`\n            )\n          }\n          if (!NOT_VISITORS[event]) {\n            if (typeof plugin[event] === 'object') {\n              for (const filter in plugin[event]) {\n                if (filter === '*') {\n                  add(plugin, event, plugin[event][filter])\n                } else {\n                  add(\n                    plugin,\n                    event + '-' + filter.toLowerCase(),\n                    plugin[event][filter]\n                  )\n                }\n              }\n            } else if (typeof plugin[event] === 'function') {\n              add(plugin, event, plugin[event])\n            }\n          }\n        }\n      }\n    }\n    this.hasListener = Object.keys(this.listeners).length > 0\n  }\n\n  async runAsync() {\n    this.plugin = 0\n    for (let i = 0; i < this.plugins.length; i++) {\n      const plugin = this.plugins[i]\n      const promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        try {\n          await promise\n        } catch (error) {\n          throw this.handleError(error)\n        }\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      const root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        const stack = [toStack(root)]\n        while (stack.length > 0) {\n          const promise = this.visitTick(stack)\n          if (isPromise(promise)) {\n            try {\n              await promise\n            } catch (e) {\n              const node = stack[stack.length - 1].node\n              throw this.handleError(e, node)\n            }\n          }\n        }\n      }\n\n      if (this.listeners.OnceExit) {\n        for (const [plugin, visitor] of this.listeners.OnceExit) {\n          this.result.lastPlugin = plugin\n          try {\n            if (root.type === 'document') {\n              const roots = root.nodes.map(subRoot =>\n                visitor(subRoot, this.helpers)\n              )\n\n              await Promise.all(roots)\n            } else {\n              await visitor(root, this.helpers)\n            }\n          } catch (e) {\n            throw this.handleError(e)\n          }\n        }\n      }\n    }\n\n    this.processed = true\n    return this.stringify()\n  }\n\n  runOnRoot(plugin) {\n    this.result.lastPlugin = plugin\n    try {\n      if (typeof plugin === 'object' && plugin.Once) {\n        if (this.result.root.type === 'document') {\n          const roots = this.result.root.nodes.map(root =>\n            plugin.Once(root, this.helpers)\n          )\n\n          if (isPromise(roots[0])) {\n            return Promise.all(roots)\n          }\n\n          return roots\n        }\n\n        return plugin.Once(this.result.root, this.helpers)\n      } else if (typeof plugin === 'function') {\n        return plugin(this.result.root, this.result)\n      }\n    } catch (error) {\n      throw this.handleError(error)\n    }\n  }\n\n  stringify() {\n    if (this.error) throw this.error\n    if (this.stringified) return this.result\n    this.stringified = true\n\n    this.sync()\n\n    const opts = this.result.opts\n    let str = stringify\n    if (opts.syntax) str = opts.syntax.stringify\n    if (opts.stringifier) str = opts.stringifier\n    if (str.stringify) str = str.stringify\n\n    const map = new MapGenerator(str, this.result.root, this.result.opts)\n    const data = map.generate()\n    this.result.css = data[0]\n    this.result.map = data[1]\n\n    return this.result\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    if (this.processed) return this.result\n    this.processed = true\n\n    if (this.processing) {\n      throw this.getAsyncError()\n    }\n\n    for (const plugin of this.plugins) {\n      const promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      const root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        this.walkSync(root)\n      }\n      if (this.listeners.OnceExit) {\n        if (root.type === 'document') {\n          for (const subRoot of root.nodes) {\n            this.visitSync(this.listeners.OnceExit, subRoot)\n          }\n        } else {\n          this.visitSync(this.listeners.OnceExit, root)\n        }\n      }\n    }\n\n    return this.result\n  }\n\n  then(onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this.opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  toString() {\n    return this.css\n  }\n\n  visitSync(visitors, node) {\n    for (const [plugin, visitor] of visitors) {\n      this.result.lastPlugin = plugin\n      let promise\n      try {\n        promise = visitor(node, this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node.proxyOf)\n      }\n      if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\n        return true\n      }\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n  }\n\n  visitTick(stack) {\n    const visit = stack[stack.length - 1]\n    const { node, visitors } = visit\n\n    if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\n      stack.pop()\n      return\n    }\n\n    if (visitors.length > 0 && visit.visitorIndex < visitors.length) {\n      const [plugin, visitor] = visitors[visit.visitorIndex]\n      visit.visitorIndex += 1\n      if (visit.visitorIndex === visitors.length) {\n        visit.visitors = []\n        visit.visitorIndex = 0\n      }\n      this.result.lastPlugin = plugin\n      try {\n        return visitor(node.toProxy(), this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node)\n      }\n    }\n\n    if (visit.iterator !== 0) {\n      const iterator = visit.iterator\n      let child\n      while ((child = node.nodes[node.indexes[iterator]])) {\n        node.indexes[iterator] += 1\n        if (!child[isClean]) {\n          child[isClean] = true\n          stack.push(toStack(child))\n          return\n        }\n      }\n      visit.iterator = 0\n      delete node.indexes[iterator]\n    }\n\n    const events = visit.events\n    while (visit.eventIndex < events.length) {\n      const event = events[visit.eventIndex]\n      visit.eventIndex += 1\n      if (event === CHILDREN) {\n        if (node.nodes && node.nodes.length) {\n          node[isClean] = true\n          visit.iterator = node.getIterator()\n        }\n        return\n      } else if (this.listeners[event]) {\n        visit.visitors = this.listeners[event]\n        return\n      }\n    }\n    stack.pop()\n  }\n\n  walkSync(node) {\n    node[isClean] = true\n    const events = getEvents(node)\n    for (const event of events) {\n      if (event === CHILDREN) {\n        if (node.nodes) {\n          node.each(child => {\n            if (!child[isClean]) this.walkSync(child)\n          })\n        }\n      } else {\n        const visitors = this.listeners[event]\n        if (visitors) {\n          if (this.visitSync(visitors, node.toProxy())) return\n        }\n      }\n    }\n  }\n\n  warnings() {\n    return this.sync().warnings()\n  }\n\n  get content() {\n    return this.stringify().content\n  }\n\n  get css() {\n    return this.stringify().css\n  }\n\n  get map() {\n    return this.stringify().map\n  }\n\n  get messages() {\n    return this.sync().messages\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get root() {\n    return this.sync().root\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'LazyResult'\n  }\n}\n\nLazyResult.registerPostcss = dependant => {\n  postcss = dependant\n}\n\nRoot.registerLazyResult(LazyResult)\nDocument.registerLazyResult(LazyResult)", "// Many thanks for this post which made this migration much easier.\n// https://mathiasbynens.be/notes/css-escapes\n\n/**\n * \n * @param {string} str \n * @returns {[string, number]|undefined}\n */\nfunction gobbleHex (str) {\n    const lower = str.toLowerCase();\n    let hex = '';\n    let spaceTerminated = false;\n    for (let i = 0; i < 6 && lower[i] !== undefined; i++) {\n        const code =  lower.charCodeAt(i);\n        // check to see if we are dealing with a valid hex char [a-f|0-9]\n        const valid = (code >= 97 && code <= 102) || (code >= 48 && code <= 57);\n        // https://drafts.csswg.org/css-syntax/#consume-escaped-code-point\n        spaceTerminated = code === 32;\n        if (!valid) {\n            break;\n        }\n        hex += lower[i];\n    }\n\n    if (hex.length === 0) {\n        return undefined;\n    }\n    const codePoint = parseInt(hex, 16);\n\n    const isSurrogate = codePoint >= 0xD800 && codePoint <= 0xDFFF;\n    // Add special case for\n    // \"If this number is zero, or is for a surrogate, or is greater than the maximum allowed code point\"\n    // https://drafts.csswg.org/css-syntax/#maximum-allowed-code-point\n    if (isSurrogate || codePoint === 0x0000 || codePoint > 0x10FFFF) {\n        return ['\\uFFFD', hex.length + (spaceTerminated ? 1 : 0)];\n    }\n\n    return [\n        String.fromCodePoint(codePoint),\n        hex.length + (spaceTerminated ? 1 : 0),\n    ];\n}\n\nconst CONTAINS_ESCAPE = /\\\\/;\n\nexport default function unesc (str) {\n    let needToProcess = CONTAINS_ESCAPE.test(str);\n    if (!needToProcess) {\n        return str;\n    }\n    let ret = \"\";\n\n    for (let i = 0; i < str.length; i++) {\n        if ((str[i] === \"\\\\\")) {\n            const gobbled = gobbleHex(str.slice(i + 1, i + 7));\n            if (gobbled !== undefined) {\n                ret += gobbled[0];\n                i += gobbled[1];\n                continue;\n            }\n\n            // Retain a pair of \\\\ if double escaped `\\\\\\\\`\n            // https://github.com/postcss/postcss-selector-parser/commit/268c9a7656fb53f543dc620aa5b73a30ec3ff20e\n            if (str[i + 1] === \"\\\\\") {\n                ret += \"\\\\\";\n                i++;\n                continue;\n            }\n\n            // if \\\\ is at the end of the string retain it\n            // https://github.com/postcss/postcss-selector-parser/commit/01a6b346e3612ce1ab20219acc26abdc259ccefb\n            if (str.length === i + 1) {\n                ret += str[i];\n            }\n            continue;\n        }\n      \n        ret += str[i];\n    }\n\n    return ret;\n}\n", "export default function getProp (obj, ...props) {\n    while (props.length > 0) {\n        const prop = props.shift();\n\n        if (!obj[prop]) {\n            return undefined;\n        }\n\n        obj = obj[prop];\n    }\n\n    return obj;\n}\n", "export default function ensureObject (obj, ...props) {\n    while (props.length > 0) {\n        const prop = props.shift();\n\n        if (!obj[prop]) {\n            obj[prop] = {};\n        }\n\n        obj = obj[prop];\n    }\n}\n", "import {ensureObject} from \"../util\";\n\nlet cloneNode = function (obj, parent) {\n    if (typeof obj !== 'object' || obj === null) {\n        return obj;\n    }\n\n    let cloned = new obj.constructor();\n\n    for ( let i in obj ) {\n        if ( !obj.hasOwnProperty(i) ) {\n            continue;\n        }\n        let value = obj[i];\n        let type  = typeof value;\n\n        if ( i === 'parent' && type === 'object' ) {\n            if (parent) {\n                cloned[i] = parent;\n            }\n        } else if ( value instanceof Array ) {\n            cloned[i] = value.map( j => cloneNode(j, cloned) );\n        } else {\n            cloned[i] = cloneNode(value, cloned);\n        }\n    }\n\n    return cloned;\n};\n\nexport default class Node {\n    constructor (opts = {}) {\n        Object.assign(this, opts);\n        this.spaces = this.spaces || {};\n        this.spaces.before = this.spaces.before || '';\n        this.spaces.after = this.spaces.after || '';\n    }\n\n    remove () {\n        if (this.parent) {\n            this.parent.removeChild(this);\n        }\n        this.parent = undefined;\n        return this;\n    }\n\n    replaceWith () {\n        if (this.parent) {\n            for (let index in arguments) {\n                this.parent.insertBefore(this, arguments[index]);\n            }\n            this.remove();\n        }\n        return this;\n    }\n\n    next () {\n        return this.parent.at(this.parent.index(this) + 1);\n    }\n\n    prev () {\n        return this.parent.at(this.parent.index(this) - 1);\n    }\n\n    clone (overrides = {}) {\n        let cloned = cloneNode(this);\n        for (let name in overrides) {\n            cloned[name] = overrides[name];\n        }\n        return cloned;\n    }\n\n    /**\n     * Some non-standard syntax doesn't follow normal escaping rules for css.\n     * This allows non standard syntax to be appended to an existing property\n     * by specifying the escaped value. By specifying the escaped value,\n     * illegal characters are allowed to be directly inserted into css output.\n     * @param {string} name the property to set\n     * @param {any} value the unescaped value of the property\n     * @param {string} valueEscaped optional. the escaped value of the property.\n     */\n    appendToPropertyAndEscape (name, value, valueEscaped) {\n        if (!this.raws) {\n            this.raws = {};\n        }\n        let originalValue = this[name];\n        let originalEscaped = this.raws[name];\n        this[name] = originalValue + value; // this may trigger a setter that updates raws, so it has to be set first.\n        if (originalEscaped || valueEscaped !== value) {\n            this.raws[name] = (originalEscaped || originalValue) + valueEscaped;\n        } else {\n            delete this.raws[name]; // delete any escaped value that was created by the setter.\n        }\n    }\n\n    /**\n     * Some non-standard syntax doesn't follow normal escaping rules for css.\n     * This allows the escaped value to be specified directly, allowing illegal\n     * characters to be directly inserted into css output.\n     * @param {string} name the property to set\n     * @param {any} value the unescaped value of the property\n     * @param {string} valueEscaped the escaped value of the property.\n     */\n    setPropertyAndEscape (name, value, valueEscaped) {\n        if (!this.raws) {\n            this.raws = {};\n        }\n        this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.\n        this.raws[name] = valueEscaped;\n    }\n\n    /**\n     * When you want a value to passed through to CSS directly. This method\n     * deletes the corresponding raw value causing the stringifier to fallback\n     * to the unescaped value.\n     * @param {string} name the property to set.\n     * @param {any} value The value that is both escaped and unescaped.\n     */\n    setPropertyWithoutEscape (name, value) {\n        this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.\n        if (this.raws) {\n            delete this.raws[name];\n        }\n    }\n\n    /**\n     *\n     * @param {number} line The number (starting with 1)\n     * @param {number} column The column number (starting with 1)\n     */\n    isAtPosition (line, column) {\n        if (this.source && this.source.start && this.source.end) {\n            if (this.source.start.line > line) {\n                return false;\n            }\n            if (this.source.end.line < line) {\n                return false;\n            }\n            if (this.source.start.line === line && this.source.start.column > column) {\n                return false;\n            }\n            if (this.source.end.line === line && this.source.end.column < column) {\n                return false;\n            }\n            return true;\n        }\n        return undefined;\n    }\n\n    stringifyProperty (name) {\n        return (this.raws && this.raws[name]) || this[name];\n    }\n\n    get rawSpaceBefore () {\n        let rawSpace = this.raws && this.raws.spaces && this.raws.spaces.before;\n        if (rawSpace === undefined) {\n            rawSpace = this.spaces && this.spaces.before;\n        }\n        return rawSpace || \"\";\n    }\n\n    set rawSpaceBefore (raw) {\n        ensureObject(this, \"raws\", \"spaces\");\n        this.raws.spaces.before = raw;\n    }\n\n    get rawSpaceAfter () {\n        let rawSpace = this.raws && this.raws.spaces && this.raws.spaces.after;\n        if (rawSpace === undefined) {\n            rawSpace = this.spaces.after;\n        }\n        return rawSpace || \"\";\n    }\n\n    set rawSpaceAfter (raw) {\n        ensureObject(this, \"raws\", \"spaces\");\n        this.raws.spaces.after = raw;\n    }\n\n    valueToString () {\n        return String(this.stringifyProperty(\"value\"));\n    }\n\n    toString () {\n        return [\n            this.rawSpaceBefore,\n            this.valueToString(),\n            this.rawSpaceAfter,\n        ].join('');\n    }\n}\n", "export const TAG = 'tag';\nexport const STRING = 'string';\nexport const SELECTOR = 'selector';\nexport const ROOT = 'root';\nexport const PSEUDO = 'pseudo';\nexport const NESTING = 'nesting';\nexport const ID = 'id';\nexport const COMMENT = 'comment';\nexport const COMBINATOR = 'combinator';\nexport const CLASS = 'class';\nexport const ATTRIBUTE = 'attribute';\nexport const UNIVERSAL = 'universal';\n", "import Node from './node';\nimport * as types from './types';\n\nexport default class Container extends Node {\n    constructor (opts) {\n        super(opts);\n        if (!this.nodes) {\n            this.nodes = [];\n        }\n    }\n\n    append (selector) {\n        selector.parent = this;\n        this.nodes.push(selector);\n        return this;\n    }\n\n    prepend (selector) {\n        selector.parent = this;\n        this.nodes.unshift(selector);\n        for ( let id in this.indexes ) {\n            this.indexes[id]++;\n        }\n        return this;\n    }\n\n    at (index) {\n        return this.nodes[index];\n    }\n\n    index (child) {\n        if (typeof child === 'number') {\n            return child;\n        }\n        return this.nodes.indexOf(child);\n    }\n\n    get first () {\n        return this.at(0);\n    }\n\n    get last () {\n        return this.at(this.length - 1);\n    }\n\n    get length () {\n        return this.nodes.length;\n    }\n\n    removeChild (child) {\n        child = this.index(child);\n        this.at(child).parent = undefined;\n        this.nodes.splice(child, 1);\n\n        let index;\n        for ( let id in this.indexes ) {\n            index = this.indexes[id];\n            if ( index >= child ) {\n                this.indexes[id] = index - 1;\n            }\n        }\n\n        return this;\n    }\n\n    removeAll () {\n        for (let node of this.nodes) {\n            node.parent = undefined;\n        }\n        this.nodes = [];\n        return this;\n    }\n\n    empty () {\n        return this.removeAll();\n    }\n\n    insertAfter (oldNode, newNode) {\n        newNode.parent = this;\n        let oldIndex = this.index(oldNode);\n        this.nodes.splice(oldIndex + 1, 0, newNode);\n\n        newNode.parent = this;\n\n        let index;\n        for ( let id in this.indexes ) {\n            index = this.indexes[id];\n            if ( oldIndex < index ) {\n                this.indexes[id] = index + 1;\n            }\n        }\n\n        return this;\n    }\n\n    insertBefore (oldNode, newNode) {\n        newNode.parent = this;\n        let oldIndex = this.index(oldNode);\n        this.nodes.splice(oldIndex, 0, newNode);\n\n        newNode.parent = this;\n\n        let index;\n        for ( let id in this.indexes ) {\n            index = this.indexes[id];\n            if ( index >= oldIndex ) {\n                this.indexes[id] = index + 1;\n            }\n        }\n\n        return this;\n    }\n\n    _findChildAtPosition (line, col) {\n        let found = undefined;\n        this.each(node => {\n            if (node.atPosition) {\n                let foundChild = node.atPosition(line, col);\n                if (foundChild) {\n                    found = foundChild;\n                    return false;\n                }\n            } else if (node.isAtPosition(line, col)) {\n                found = node;\n                return false;\n            }\n        });\n        return found;\n    }\n\n    /**\n     * Return the most specific node at the line and column number given.\n     * The source location is based on the original parsed location, locations aren't\n     * updated as selector nodes are mutated.\n     * \n     * Note that this location is relative to the location of the first character\n     * of the selector, and not the location of the selector in the overall document\n     * when used in conjunction with postcss.\n     *\n     * If not found, returns undefined.\n     * @param {number} line The line number of the node to find. (1-based index)\n     * @param {number} col  The column number of the node to find. (1-based index)\n     */\n    atPosition (line, col) {\n        if (this.isAtPosition(line, col)) {\n            return this._findChildAtPosition(line, col) || this;\n        } else {\n            return undefined;\n        }\n    }\n\n    _inferEndPosition () {\n        if (this.last && this.last.source && this.last.source.end) {\n            this.source = this.source || {};\n            this.source.end = this.source.end || {};\n            Object.assign(this.source.end, this.last.source.end);\n        }\n    }\n\n    each (callback) {\n        if (!this.lastEach) {\n            this.lastEach = 0;\n        }\n        if (!this.indexes) {\n            this.indexes = {};\n        }\n\n        this.lastEach ++;\n        let id = this.lastEach;\n        this.indexes[id] = 0;\n\n        if (!this.length) {\n            return undefined;\n        }\n\n        let index, result;\n        while (this.indexes[id] < this.length) {\n            index = this.indexes[id];\n            result = callback(this.at(index), index);\n            if (result === false) {\n                break;\n            }\n\n            this.indexes[id] += 1;\n        }\n\n        delete this.indexes[id];\n\n        if (result === false) {\n            return false;\n        }\n    }\n\n    walk (callback) {\n        return this.each((node, i) => {\n            let result = callback(node, i);\n\n            if (result !== false && node.length) {\n                result = node.walk(callback);\n            }\n\n            if (result === false) {\n                return false;\n            }\n        });\n    }\n\n    walkAttributes (callback) {\n        return this.walk((selector) => {\n            if (selector.type === types.ATTRIBUTE) {\n                return callback.call(this, selector);\n            }\n        });\n    }\n\n    walkClasses (callback) {\n        return this.walk((selector) => {\n            if (selector.type === types.CLASS) {\n                return callback.call(this, selector);\n            }\n        });\n    }\n\n    walkCombinators (callback) {\n        return this.walk((selector) => {\n            if (selector.type === types.COMBINATOR) {\n                return callback.call(this, selector);\n            }\n        });\n    }\n\n    walkComments (callback) {\n        return this.walk((selector) => {\n            if (selector.type === types.COMMENT) {\n                return callback.call(this, selector);\n            }\n        });\n    }\n\n    walkIds (callback) {\n        return this.walk((selector) => {\n            if (selector.type === types.ID) {\n                return callback.call(this, selector);\n            }\n        });\n    }\n\n    walkNesting (callback) {\n        return this.walk(selector => {\n            if (selector.type === types.NESTING) {\n                return callback.call(this, selector);\n            }\n        });\n    }\n\n    walkPseudos (callback) {\n        return this.walk((selector) => {\n            if (selector.type === types.PSEUDO) {\n                return callback.call(this, selector);\n            }\n        });\n    }\n\n    walkTags (callback) {\n        return this.walk((selector) => {\n            if (selector.type === types.TAG) {\n                return callback.call(this, selector);\n            }\n        });\n    }\n\n    walkUniversals (callback) {\n        return this.walk((selector) => {\n            if (selector.type === types.UNIVERSAL) {\n                return callback.call(this, selector);\n            }\n        });\n    }\n\n    split (callback) {\n        let current = [];\n        return this.reduce((memo, node, index) => {\n            let split = callback.call(this, node);\n            current.push(node);\n            if (split) {\n                memo.push(current);\n                current = [];\n            } else if (index === this.length - 1) {\n                memo.push(current);\n            }\n            return memo;\n        }, []);\n    }\n\n    map (callback) {\n        return this.nodes.map(callback);\n    }\n\n    reduce (callback, memo) {\n        return this.nodes.reduce(callback, memo);\n    }\n\n    every (callback) {\n        return this.nodes.every(callback);\n    }\n\n    some (callback) {\n        return this.nodes.some(callback);\n    }\n\n    filter (callback) {\n        return this.nodes.filter(callback);\n    }\n\n    sort (callback) {\n        return this.nodes.sort(callback);\n    }\n\n    toString () {\n        return this.map(String).join('');\n    }\n}\n", "import Container from './container';\nimport {ROOT} from './types';\n\nexport default class Root extends Container {\n    constructor (opts) {\n        super(opts);\n        this.type = ROOT;\n    }\n\n    toString () {\n        let str = this.reduce((memo, selector) => {\n            memo.push(String(selector));\n            return memo;\n        }, []).join(',');\n        return this.trailingComma ? str + ',' : str;\n    }\n\n    error (message, options) {\n        if (this._error) {\n            return this._error(message, options);\n        } else {\n            return new Error(message);\n        }\n    }\n\n    set errorGenerator (handler) {\n        this._error = handler;\n    }\n}\n", "import Container from './container';\nimport {SELECTOR} from './types';\n\nexport default class Selector extends Container {\n    constructor (opts) {\n        super(opts);\n        this.type = SELECTOR;\n    }\n}\n", "\n\nconst object = {};\nconst hasOwnProperty = object.hasOwnProperty;\nconst merge = (options, defaults) => {\n\tif (!options) {\n\t\treturn defaults;\n\t}\n\tconst result = {};\n\tfor (const key in defaults) {\n\t\t// `if (defaults.hasOwnProperty(key) { \u2026 }` is not needed here, since\n\t\t// only recognized option names are used.\n\t\tresult[key] = hasOwnProperty.call(options, key)\n\t\t\t? options[key]\n\t\t\t: defaults[key];\n\t}\n\treturn result;\n};\n\nconst regexAnySingleEscape = /<%= anySingleEscape %>/;\nconst regexSingleEscape = /<%= singleEscapes %>/;\nconst regexAlwaysEscape = /['\"\\\\]/;\nconst regexExcessiveSpaces = /(^|\\\\+)?(\\\\[A-F0-9]{1,6})\\x20(?![a-fA-F0-9\\x20])/g;\n\n/*@__NO_SIDE_EFFECTS__*/\nconst cssesc = (string, options) => {\n\toptions = merge(options, cssesc.options);\n\tif (options.quotes != 'single' && options.quotes != 'double') {\n\t\toptions.quotes = 'single';\n\t}\n\tconst quote = options.quotes == 'double' ? '\"' : '\\'';\n\tconst isIdentifier = options.isIdentifier;\n\n\tconst firstChar = string.charAt(0);\n\tlet output = '';\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst character = string.charAt(counter++);\n\t\tlet codePoint = character.charCodeAt();\n\t\tlet value;\n\t\t// If it\u2019s not a printable ASCII character\u2026\n\t\tif (codePoint < 0x20 || codePoint > 0x7E) {\n\t\t\tif (codePoint >= 0xD800 && codePoint <= 0xDBFF && counter < length) {\n\t\t\t\t// It\u2019s a high surrogate, and there is a next character.\n\t\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // next character is low surrogate\n\t\t\t\t\tcodePoint = ((codePoint & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000;\n\t\t\t\t} else {\n\t\t\t\t\t// It\u2019s an unmatched surrogate; only append this code unit, in case\n\t\t\t\t\t// the next code unit is the high surrogate of a surrogate pair.\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t} else {\n\t\t\tif (options.escapeEverything) {\n\t\t\t\tif (regexAnySingleEscape.test(character)) {\n\t\t\t\t\tvalue = '\\\\' + character;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t\t\t}\n\t\t\t} else if (/[\\t\\n\\f\\r\\x0B]/.test(character)) {\n\t\t\t\tvalue = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\n\t\t\t} else if (\n\t\t\t\tcharacter == '\\\\' ||\n\t\t\t\t(\n\t\t\t\t\t!isIdentifier &&\n\t\t\t\t\t(\n\t\t\t\t\t\t(character == '\"' && quote == character) ||\n\t\t\t\t\t\t(character == '\\'' && quote == character)\n\t\t\t\t\t)\n\t\t\t\t) ||\n\t\t\t\t(isIdentifier && regexSingleEscape.test(character))\n\t\t\t) {\n\t\t\t\tvalue = '\\\\' + character;\n\t\t\t} else {\n\t\t\t\tvalue = character;\n\t\t\t}\n\t\t}\n\t\toutput += value;\n\t}\n\n\tif (isIdentifier) {\n\t\tif (/^-[-\\d]/.test(output)) {\n\t\t\toutput = '\\\\-' + output.slice(1);\n\t\t} else if (/\\d/.test(firstChar)) {\n\t\t\toutput = '\\\\3' + firstChar + ' ' + output.slice(1);\n\t\t}\n\t}\n\n\t// Remove spaces after `\\HEX` escapes that are not followed by a hex digit,\n\t// since they\u2019re redundant. Note that this is only possible if the escape\n\t// sequence isn\u2019t preceded by an odd number of backslashes.\n\toutput = output.replace(regexExcessiveSpaces, ($0, $1, $2) => {\n\t\tif ($1 && $1.length % 2) {\n\t\t\t// It\u2019s not safe to remove the space, so don\u2019t.\n\t\t\treturn $0;\n\t\t}\n\t\t// Strip the space.\n\t\treturn ($1 || '') + $2;\n\t});\n\n\tif (!isIdentifier && options.wrap) {\n\t\treturn quote + output + quote;\n\t}\n\treturn output;\n};\n\n// Expose default options (so they can be overridden globally).\ncssesc.options = {\n\t'escapeEverything': false,\n\t'isIdentifier': false,\n\t'quotes': 'single',\n\t'wrap': false\n};\n\nexport default cssesc;", "import cssesc from \"../../cssesc\";\nimport { ensureObject } from '../util';\nimport Node from './node';\nimport { CLASS } from './types';\n\nexport default class ClassName extends Node {\n    constructor (opts) {\n        super(opts);\n        this.type = CLASS;\n        this._constructed = true;\n    }\n\n    set value (v) {\n        if (this._constructed) {\n            const escaped = cssesc(v, {isIdentifier: true});\n            if (escaped !== v) {\n                ensureObject(this, \"raws\");\n                this.raws.value = escaped;\n            } else if (this.raws) {\n                delete this.raws.value;\n            }\n        }\n        this._value = v;\n    }\n\n    get value () {\n        return this._value;\n    }\n\n    valueToString () {\n        return '.' + super.valueToString();\n    }\n}\n", "import Node from './node';\nimport {COMMENT} from './types';\n\nexport default class Comment extends Node {\n    constructor (opts) {\n        super(opts);\n        this.type = COMMENT;\n    }\n}\n", "import Node from './node';\nimport {ID as IDType} from './types';\n\nexport default class ID extends Node {\n    constructor (opts) {\n        super(opts);\n        this.type = IDType;\n    }\n\n    valueToString () {\n        return '#' + super.valueToString();\n    }\n}\n", "import cssesc from \"../../cssesc\";\nimport { ensureObject } from '../util';\nimport Node from './node';\n\nexport default class Namespace extends Node {\n    get namespace () {\n        return this._namespace;\n    }\n    set namespace (namespace) {\n        if (namespace === true || namespace === \"*\" || namespace === \"&\") {\n            this._namespace = namespace;\n            if (this.raws) {\n                delete this.raws.namespace;\n            }\n            return;\n        }\n\n        const escaped = cssesc(namespace, {isIdentifier: true});\n        this._namespace = namespace;\n        if (escaped !== namespace) {\n            ensureObject(this, \"raws\");\n            this.raws.namespace = escaped;\n        } else if (this.raws) {\n            delete this.raws.namespace;\n        }\n    }\n    get ns () {\n        return this._namespace;\n    }\n    set ns (namespace) {\n        this.namespace = namespace;\n    }\n\n    get namespaceString () {\n        if (this.namespace) {\n            const ns = this.stringifyProperty(\"namespace\");\n            if (ns === true) {\n                return '';\n            } else {\n                return ns;\n            }\n        } else {\n            return '';\n        }\n    }\n\n    qualifiedName (value) {\n        if (this.namespace) {\n            return `${this.namespaceString}|${value}`;\n        } else {\n            return value;\n        }\n    }\n\n    valueToString () {\n        return this.qualifiedName(super.valueToString());\n    }\n};\n", "import Namespace from './namespace';\nimport {TAG} from './types';\n\nexport default class Tag extends Namespace {\n    constructor (opts) {\n        super(opts);\n        this.type = TAG;\n    }\n}\n", "import Node from './node';\nimport {STRING} from './types';\n\nexport default class String extends Node {\n    constructor (opts) {\n        super(opts);\n        this.type = STRING;\n    }\n}\n", "import Container from './container';\nimport {PSEUDO} from './types';\n\nexport default class Pseudo extends Container {\n    constructor (opts) {\n        super(opts);\n        this.type = PSEUDO;\n    }\n\n    toString () {\n        let params = this.length ? '(' + this.map(String).join(',') + ')' : '';\n        return [\n            this.rawSpaceBefore,\n            this.stringifyProperty(\"value\"),\n            params,\n            this.rawSpaceAfter,\n        ].join('');\n    }\n}\n", "import cssesc from \"../../cssesc\";\nimport unesc from \"../util/unesc\";\nimport Namespace from './namespace';\nimport { ATTRIBUTE } from './types';\n\nconst WRAPPED_IN_QUOTES = /^('|\")([^]*)\\1$/;\n\nexport function unescapeValue (value) {\n    let deprecatedUsage = false;\n    let quoteMark = null;\n    let unescaped = value;\n    const m = unescaped.match(WRAPPED_IN_QUOTES);\n    if (m) {\n        quoteMark = m[1];\n        unescaped = m[2];\n    }\n    unescaped = unesc(unescaped);\n    if (unescaped !== value) {\n        deprecatedUsage = true;\n    }\n    return {\n        deprecatedUsage,\n        unescaped,\n        quoteMark,\n    };\n}\n\nfunction handleDeprecatedContructorOpts (opts) {\n    if (opts.quoteMark !== undefined) {\n        return opts;\n    }\n    if (opts.value === undefined) {\n        return opts;\n    }\n    warnOfDeprecatedConstructor();\n    const {quoteMark, unescaped} = unescapeValue(opts.value);\n    if (!opts.raws) {\n        opts.raws = {};\n    }\n    if (opts.raws.value === undefined) {\n        opts.raws.value = opts.value;\n    }\n    opts.value = unescaped;\n    opts.quoteMark = quoteMark;\n    return opts;\n}\n\nexport default class Attribute extends Namespace {\n    static NO_QUOTE = null;\n    static SINGLE_QUOTE = \"'\";\n    static DOUBLE_QUOTE = '\"';\n    constructor (opts = {}) {\n        super(handleDeprecatedContructorOpts(opts));\n        this.type = ATTRIBUTE;\n        this.raws = this.raws || {};\n        this._constructed = true;\n    }\n\n    /**\n     * Returns the Attribute's value quoted such that it would be legal to use\n     * in the value of a css file. The original value's quotation setting\n     * used for stringification is left unchanged. See `setValue(value, options)`\n     * if you want to control the quote settings of a new value for the attribute.\n     *\n     * You can also change the quotation used for the current value by setting quoteMark.\n     *\n     * Options:\n     *   * quoteMark {'\"' | \"'\" | null} - Use this value to quote the value. If this\n     *     option is not set, the original value for quoteMark will be used. If\n     *     indeterminate, a double quote is used. The legal values are:\n     *     * `null` - the value will be unquoted and characters will be escaped as necessary.\n     *     * `'` - the value will be quoted with a single quote and single quotes are escaped.\n     *     * `\"` - the value will be quoted with a double quote and double quotes are escaped.\n     *   * preferCurrentQuoteMark {boolean} - if true, prefer the source quote mark\n     *     over the quoteMark option value.\n     *   * smart {boolean} - if true, will select a quote mark based on the value\n     *     and the other options specified here. See the `smartQuoteMark()`\n     *     method.\n     **/\n    getQuotedValue (options = {}) {\n        const quoteMark = this._determineQuoteMark(options);\n        const cssescopts = CSSESC_QUOTE_OPTIONS[quoteMark];\n        const escaped = cssesc(this._value, cssescopts);\n        return escaped;\n    }\n\n    _determineQuoteMark (options) {\n        return (options.smart) ? this.smartQuoteMark(options) : this.preferredQuoteMark(options);\n    }\n\n    /**\n     * Set the unescaped value with the specified quotation options. The value\n     * provided must not include any wrapping quote marks -- those quotes will\n     * be interpreted as part of the value and escaped accordingly.\n     */\n    setValue (value, options = {}) {\n        this._value = value;\n        this._quoteMark = this._determineQuoteMark(options);\n        this._syncRawValue();\n    }\n\n    /**\n     * Intelligently select a quoteMark value based on the value's contents. If\n     * the value is a legal CSS ident, it will not be quoted. Otherwise a quote\n     * mark will be picked that minimizes the number of escapes.\n     *\n     * If there's no clear winner, the quote mark from these options is used,\n     * then the source quote mark (this is inverted if `preferCurrentQuoteMark` is\n     * true). If the quoteMark is unspecified, a double quote is used.\n     *\n     * @param options This takes the quoteMark and preferCurrentQuoteMark options\n     * from the quoteValue method.\n     */\n    smartQuoteMark (options) {\n        const v = this.value;\n        const numSingleQuotes = v.replace(/[^']/g, '').length;\n        const numDoubleQuotes = v.replace(/[^\"]/g, '').length;\n        if (numSingleQuotes + numDoubleQuotes === 0) {\n            const escaped = cssesc(v, {isIdentifier: true});\n            if (escaped === v) {\n                return Attribute.NO_QUOTE;\n            } else {\n                const pref = this.preferredQuoteMark(options);\n                if (pref === Attribute.NO_QUOTE) {\n                    // pick a quote mark that isn't none and see if it's smaller\n                    const quote = this.quoteMark || options.quoteMark || Attribute.DOUBLE_QUOTE;\n                    const opts = CSSESC_QUOTE_OPTIONS[quote];\n                    const quoteValue = cssesc(v, opts);\n                    if (quoteValue.length < escaped.length) {\n                        return quote;\n                    }\n                }\n                return pref;\n            }\n        } else if (numDoubleQuotes === numSingleQuotes) {\n            return this.preferredQuoteMark(options);\n        } else if ( numDoubleQuotes < numSingleQuotes) {\n            return Attribute.DOUBLE_QUOTE;\n        } else {\n            return Attribute.SINGLE_QUOTE;\n        }\n    }\n\n    /**\n     * Selects the preferred quote mark based on the options and the current quote mark value.\n     * If you want the quote mark to depend on the attribute value, call `smartQuoteMark(opts)`\n     * instead.\n     */\n    preferredQuoteMark (options) {\n        let quoteMark = (options.preferCurrentQuoteMark) ? this.quoteMark : options.quoteMark;\n\n        if (quoteMark === undefined) {\n            quoteMark = (options.preferCurrentQuoteMark) ? options.quoteMark : this.quoteMark;\n        }\n\n        if (quoteMark === undefined) {\n            quoteMark = Attribute.DOUBLE_QUOTE;\n        }\n\n        return quoteMark;\n    }\n\n    get quoted () {\n        const qm = this.quoteMark;\n        return qm === \"'\" || qm === '\"';\n    }\n\n    set quoted (value) {\n        warnOfDeprecatedQuotedAssignment();\n    }\n\n    /**\n     * returns a single (`'`) or double (`\"`) quote character if the value is quoted.\n     * returns `null` if the value is not quoted.\n     * returns `undefined` if the quotation state is unknown (this can happen when\n     * the attribute is constructed without specifying a quote mark.)\n     */\n    get quoteMark () {\n        return this._quoteMark;\n    }\n\n    /**\n     * Set the quote mark to be used by this attribute's value.\n     * If the quote mark changes, the raw (escaped) value at `attr.raws.value` of the attribute\n     * value is updated accordingly.\n     *\n     * @param {\"'\" | '\"' | null} quoteMark The quote mark or `null` if the value should be unquoted.\n     */\n    set quoteMark (quoteMark) {\n        if (!this._constructed) {\n            this._quoteMark = quoteMark;\n            return;\n        }\n        if (this._quoteMark !== quoteMark) {\n            this._quoteMark = quoteMark;\n            this._syncRawValue();\n        }\n    }\n\n    _syncRawValue () {\n        const rawValue = cssesc(this._value, CSSESC_QUOTE_OPTIONS[this.quoteMark]);\n        if (rawValue === this._value) {\n            if (this.raws) {\n                delete this.raws.value;\n            }\n        } else {\n            this.raws.value = rawValue;\n        }\n    }\n\n    get qualifiedAttribute () {\n        return this.qualifiedName(this.raws.attribute || this.attribute);\n    }\n\n    get insensitiveFlag () {\n        return this.insensitive ? 'i' : '';\n    }\n\n    get value () {\n        return this._value;\n    }\n\n    get insensitive () {\n        return this._insensitive;\n    }\n\n    /**\n     * Set the case insensitive flag.\n     * If the case insensitive flag changes, the raw (escaped) value at `attr.raws.insensitiveFlag`\n     * of the attribute is updated accordingly.\n     *\n     * @param {true | false} insensitive true if the attribute should match case-insensitively.\n     */\n    set insensitive (insensitive) {\n        if (!insensitive) {\n            this._insensitive = false;\n\n            // \"i\" and \"I\" can be used in \"this.raws.insensitiveFlag\" to store the original notation.\n            // When setting `attr.insensitive = false` both should be erased to ensure correct serialization.\n            if (this.raws && (this.raws.insensitiveFlag === 'I' || this.raws.insensitiveFlag === 'i')) {\n                this.raws.insensitiveFlag = undefined;\n            }\n        }\n\n        this._insensitive = insensitive;\n    }\n\n    /**\n     * Before 3.0, the value had to be set to an escaped value including any wrapped\n     * quote marks. In 3.0, the semantics of `Attribute.value` changed so that the value\n     * is unescaped during parsing and any quote marks are removed.\n     *\n     * Because the ambiguity of this semantic change, if you set `attr.value = newValue`,\n     * a deprecation warning is raised when the new value contains any characters that would\n     * require escaping (including if it contains wrapped quotes).\n     *\n     * Instead, you should call `attr.setValue(newValue, opts)` and pass options that describe\n     * how the new value is quoted.\n     */\n    set value (v) {\n        if (this._constructed) {\n            const {\n                deprecatedUsage,\n                unescaped,\n                quoteMark,\n            } = unescapeValue(v);\n            if (deprecatedUsage) {\n                warnOfDeprecatedValueAssignment();\n            }\n            if (unescaped === this._value && quoteMark === this._quoteMark) {\n                return;\n            }\n            this._value = unescaped;\n            this._quoteMark = quoteMark;\n            this._syncRawValue();\n        } else {\n            this._value = v;\n        }\n    }\n\n    get attribute () {\n        return this._attribute;\n    }\n\n    set attribute (name) {\n        this._handleEscapes(\"attribute\", name);\n        this._attribute = name;\n    }\n\n    _handleEscapes (prop, value) {\n        if (this._constructed) {\n            const escaped = cssesc(value, {isIdentifier: true});\n            if (escaped !== value) {\n                this.raws[prop] = escaped;\n            } else {\n                delete this.raws[prop];\n            }\n        }\n    }\n\n    _spacesFor (name) {\n        const attrSpaces = {before: '', after: ''};\n        const spaces = this.spaces[name] || {};\n        const rawSpaces = (this.raws.spaces && this.raws.spaces[name]) || {};\n        return Object.assign(attrSpaces, spaces, rawSpaces);\n    }\n\n    _stringFor (name, spaceName = name, concat = defaultAttrConcat) {\n        const attrSpaces = this._spacesFor(spaceName);\n        return concat(this.stringifyProperty(name), attrSpaces);\n    }\n\n    /**\n     * returns the offset of the attribute part specified relative to the\n     * start of the node of the output string.\n     *\n     * * \"ns\" - alias for \"namespace\"\n     * * \"namespace\" - the namespace if it exists.\n     * * \"attribute\" - the attribute name\n     * * \"attributeNS\" - the start of the attribute or its namespace\n     * * \"operator\" - the match operator of the attribute\n     * * \"value\" - The value (string or identifier)\n     * * \"insensitive\" - the case insensitivity flag;\n     * @param part One of the possible values inside an attribute.\n     * @returns -1 if the name is invalid or the value doesn't exist in this attribute.\n     */\n    offsetOf (name) {\n        let count = 1;\n        const attributeSpaces = this._spacesFor(\"attribute\");\n        count += attributeSpaces.before.length;\n        if (name === \"namespace\" || name === \"ns\") {\n            return (this.namespace) ? count : -1;\n        }\n        if (name === \"attributeNS\") {\n            return count;\n        }\n\n        count += this.namespaceString.length;\n        if (this.namespace) {\n            count += 1;\n        }\n        if (name === \"attribute\") {\n            return count;\n        }\n\n        count += this.stringifyProperty(\"attribute\").length;\n        count += attributeSpaces.after.length;\n        const operatorSpaces = this._spacesFor(\"operator\");\n        count += operatorSpaces.before.length;\n        const operator = this.stringifyProperty(\"operator\");\n        if (name === \"operator\") {\n            return operator ? count : -1;\n        }\n\n        count += operator.length;\n        count += operatorSpaces.after.length;\n        const valueSpaces = this._spacesFor(\"value\");\n        count += valueSpaces.before.length;\n        const value = this.stringifyProperty(\"value\");\n        if (name === \"value\") {\n            return value ? count : -1;\n        }\n\n        count += value.length;\n        count += valueSpaces.after.length;\n        const insensitiveSpaces = this._spacesFor(\"insensitive\");\n        count += insensitiveSpaces.before.length;\n        if (name === \"insensitive\") {\n            return (this.insensitive) ? count : -1;\n        }\n        return -1;\n    }\n\n    toString () {\n        const selector = [\n            this.rawSpaceBefore,\n            '[',\n        ];\n\n        selector.push(this._stringFor('qualifiedAttribute', 'attribute'));\n\n        if (this.operator && (this.value || this.value === '')) {\n            selector.push(this._stringFor('operator'));\n            selector.push(this._stringFor('value'));\n            selector.push(this._stringFor('insensitiveFlag', 'insensitive', (attrValue, attrSpaces) => {\n                if (attrValue.length > 0\n                    && !this.quoted\n                    && attrSpaces.before.length === 0\n                    && !(this.spaces.value && this.spaces.value.after)) {\n\n                    attrSpaces.before = \" \";\n                }\n                return defaultAttrConcat(attrValue, attrSpaces);\n            }));\n        }\n\n        selector.push(']');\n        selector.push(this.rawSpaceAfter);\n        return selector.join('');\n    }\n}\n\nconst CSSESC_QUOTE_OPTIONS = {\n    \"'\": {quotes: 'single', wrap: true},\n    '\"': {quotes: 'double', wrap: true},\n    [null]: {isIdentifier: true},\n};\n\nfunction defaultAttrConcat (attrValue, attrSpaces) {\n    return `${attrSpaces.before}${attrValue}${attrSpaces.after}`;\n}\n", "import Namespace from './namespace';\nimport {UNIVERSAL} from './types';\n\nexport default class Universal extends Namespace {\n    constructor (opts) {\n        super(opts);\n        this.type = UNIVERSAL;\n        this.value = '*';\n    }\n}\n", "import Node from './node';\nimport {COMBINATOR} from './types';\n\nexport default class Combinator extends Node {\n    constructor (opts) {\n        super(opts);\n        this.type = COMBINATOR;\n    }\n}\n", "import Node from './node';\nimport {NESTING} from './types';\n\nexport default class Nesting extends Node {\n    constructor (opts) {\n        super(opts);\n        this.type = NESTING;\n        this.value = '&';\n    }\n}\n", "export default function sortAscending (list) {\n    return list.sort((a, b) => a - b);\n};\n", "export const ampersand        = 38; // `&`.charCodeAt(0);\nexport const asterisk         = 42; // `*`.charCodeAt(0);\nexport const at               = 64; // `@`.charCodeAt(0);\nexport const comma            = 44; // `,`.charCodeAt(0);\nexport const colon            = 58; // `:`.charCodeAt(0);\nexport const semicolon        = 59; // `;`.charCodeAt(0);\nexport const openParenthesis  = 40; // `(`.charCodeAt(0);\nexport const closeParenthesis = 41; // `)`.charCodeAt(0);\nexport const openSquare       = 91; // `[`.charCodeAt(0);\nexport const closeSquare      = 93; // `]`.charCodeAt(0);\nexport const dollar           = 36; // `$`.charCodeAt(0);\nexport const tilde            = 126; // `~`.charCodeAt(0);\nexport const caret            = 94; // `^`.charCodeAt(0);\nexport const plus             = 43; // `+`.charCodeAt(0);\nexport const equals           = 61; // `=`.charCodeAt(0);\nexport const pipe             = 124; // `|`.charCodeAt(0);\nexport const greaterThan      = 62; // `>`.charCodeAt(0);\nexport const space            = 32; // ` `.charCodeAt(0);\nexport const singleQuote      = 39; // `'`.charCodeAt(0);\nexport const doubleQuote      = 34; // `\"`.charCodeAt(0);\nexport const slash            = 47; // `/`.charCodeAt(0);\nexport const bang             = 33; // `!`.charCodeAt(0);\n\nexport const backslash        = 92; // '\\\\'.charCodeAt(0);\nexport const cr               = 13; // '\\r'.charCodeAt(0);\nexport const feed             = 12; // '\\f'.charCodeAt(0);\nexport const newline          = 10; // '\\n'.charCodeAt(0);\nexport const tab              = 9; // '\\t'.charCodeAt(0);\n\n// Expose aliases primarily for readability.\nexport const str              = singleQuote;\n\n// No good single character representation!\nexport const comment          = -1;\nexport const word             = -2;\nexport const combinator       = -3;\n", "import * as t from './tokenTypes';\n\nconst unescapable = {\n    [t.tab]: true,\n    [t.newline]: true,\n    [t.cr]: true,\n    [t.feed]: true,\n};\nconst wordDelimiters = {\n    [t.space]: true,\n    [t.tab]: true,\n    [t.newline]: true,\n    [t.cr]: true,\n    [t.feed]: true,\n\n    [t.ampersand]: true,\n    [t.asterisk]: true,\n    [t.bang]: true,\n    [t.comma]: true,\n    [t.colon]: true,\n    [t.semicolon]: true,\n    [t.openParenthesis]: true,\n    [t.closeParenthesis]: true,\n    [t.openSquare]: true,\n    [t.closeSquare]: true,\n    [t.singleQuote]: true,\n    [t.doubleQuote]: true,\n    [t.plus]: true,\n    [t.pipe]: true,\n    [t.tilde]: true,\n    [t.greaterThan]: true,\n    [t.equals]: true,\n    [t.dollar]: true,\n    [t.caret]: true,\n    [t.slash]: true,\n};\n\n\nconst hex = {};\nconst hexChars = \"0123456789abcdefABCDEF\";\nfor (let i = 0; i < hexChars.length; i++) {\n    hex[hexChars.charCodeAt(i)] = true;\n}\n\n/**\n *  Returns the last index of the bar css word\n * @param {string} css The string in which the word begins\n * @param {number} start The index into the string where word's first letter occurs\n */\nfunction consumeWord (css, start) {\n    let next = start;\n    let code;\n    do {\n        code = css.charCodeAt(next);\n        if (wordDelimiters[code]) {\n            return next - 1;\n        } else if (code === t.backslash) {\n            next = consumeEscape(css, next) + 1;\n        } else {\n            // All other characters are part of the word\n            next++;\n        }\n    } while (next < css.length);\n    return next - 1;\n}\n\n/**\n *  Returns the last index of the escape sequence\n * @param {string} css The string in which the sequence begins\n * @param {number} start The index into the string where escape character (`\\`) occurs.\n */\nfunction consumeEscape (css, start) {\n    let next = start;\n    let code = css.charCodeAt(next + 1);\n    if (unescapable[code]) {\n        // just consume the escape char\n    } else if (hex[code]) {\n        let hexDigits = 0;\n        // consume up to 6 hex chars\n        do {\n            next++;\n            hexDigits++;\n            code = css.charCodeAt(next + 1);\n        } while (hex[code] && hexDigits < 6);\n        // if fewer than 6 hex chars, a trailing space ends the escape\n        if (hexDigits < 6 && code === t.space) {\n            next++;\n        }\n    } else {\n        // the next char is part of the current word\n        next++;\n    }\n    return next;\n}\n\nexport const FIELDS = {\n    TYPE: 0,\n    START_LINE: 1,\n    START_COL: 2,\n    END_LINE: 3,\n    END_COL: 4,\n    START_POS: 5,\n    END_POS: 6,\n};\n\nexport default function tokenize (input) {\n    const tokens   = [];\n    let css        = input.css.valueOf();\n    let {length}   = css;\n    let offset     = -1;\n    let line       =  1;\n    let start      =  0;\n    let end        =  0;\n\n    let code,\n        content,\n        endColumn,\n        endLine,\n        escaped,\n        escapePos,\n        last,\n        lines,\n        next,\n        nextLine,\n        nextOffset,\n        quote,\n        tokenType;\n\n    function unclosed (what, fix) {\n        if ( input.safe ) { // fyi: this is never set to true.\n            css += fix;\n            next = css.length - 1;\n        } else {\n            throw input.error('Unclosed ' + what, line, start - offset, start);\n        }\n    }\n\n    while ( start < length ) {\n        code = css.charCodeAt(start);\n\n        if ( code === t.newline ) {\n            offset = start;\n            line  += 1;\n        }\n\n        switch ( code ) {\n        case t.space:\n        case t.tab:\n        case t.newline:\n        case t.cr:\n        case t.feed:\n            next = start;\n            do {\n                next += 1;\n                code = css.charCodeAt(next);\n                if ( code === t.newline ) {\n                    offset = next;\n                    line  += 1;\n                }\n            } while (\n                code === t.space   ||\n                code === t.newline ||\n                code === t.tab     ||\n                code === t.cr      ||\n                code === t.feed\n            );\n\n            tokenType = t.space;\n            endLine = line;\n            endColumn = next - offset - 1;\n            end = next;\n            break;\n\n        case t.plus:\n        case t.greaterThan:\n        case t.tilde:\n        case t.pipe:\n            next = start;\n            do {\n                next += 1;\n                code = css.charCodeAt(next);\n            } while (\n                code === t.plus        ||\n                code === t.greaterThan ||\n                code === t.tilde       ||\n                code === t.pipe\n            );\n\n            tokenType = t.combinator;\n            endLine = line;\n            endColumn = start - offset;\n            end = next;\n            break;\n\n        // Consume these characters as single tokens.\n        case t.asterisk:\n        case t.ampersand:\n        case t.bang:\n        case t.comma:\n        case t.equals:\n        case t.dollar:\n        case t.caret:\n        case t.openSquare:\n        case t.closeSquare:\n        case t.colon:\n        case t.semicolon:\n        case t.openParenthesis:\n        case t.closeParenthesis:\n            next = start;\n            tokenType = code;\n            endLine = line;\n            endColumn = start - offset;\n            end = next + 1;\n            break;\n\n        case t.singleQuote:\n        case t.doubleQuote:\n            quote = code === t.singleQuote ? \"'\" : '\"';\n            next  = start;\n            do {\n                escaped = false;\n                next    = css.indexOf(quote, next + 1);\n                if ( next === -1 ) {\n                    unclosed('quote', quote);\n                }\n                escapePos = next;\n                while ( css.charCodeAt(escapePos - 1) === t.backslash ) {\n                    escapePos -= 1;\n                    escaped = !escaped;\n                }\n            } while ( escaped );\n\n            tokenType = t.str;\n            endLine = line;\n            endColumn = start - offset;\n            end = next + 1;\n            break;\n\n        default:\n            if ( code === t.slash && css.charCodeAt(start + 1) === t.asterisk ) {\n                next = css.indexOf('*/', start + 2) + 1;\n                if ( next === 0 ) {\n                    unclosed('comment', '*/');\n                }\n\n                content = css.slice(start, next + 1);\n                lines   = content.split('\\n');\n                last    = lines.length - 1;\n\n                if ( last > 0 ) {\n                    nextLine   = line + last;\n                    nextOffset = next - lines[last].length;\n                } else {\n                    nextLine   = line;\n                    nextOffset = offset;\n                }\n\n                tokenType = t.comment;\n                line   = nextLine;\n                endLine = nextLine;\n                endColumn = next - nextOffset;\n            } else if (code === t.slash) {\n                next = start;\n                tokenType = code;\n                endLine = line;\n                endColumn = start - offset;\n                end = next + 1;\n            } else {\n                next = consumeWord(css, start);\n                tokenType = t.word;\n                endLine = line;\n                endColumn = next - offset;\n            }\n\n            end = next + 1;\n            break;\n        }\n\n        // Ensure that the token structure remains consistent\n        tokens.push([\n            tokenType,              // [0] Token type\n            line,                   // [1] Starting line\n            start - offset,         // [2] Starting column\n            endLine,                // [3] Ending line\n            endColumn,              // [4] Ending column\n            start,                  // [5] Start position / Source index\n            end,                    // [6] End position\n        ]);\n\n        // Reset offset for the next token\n        if (nextOffset) {\n            offset = nextOffset;\n            nextOffset = null;\n        }\n\n        start = end;\n    }\n\n    return tokens;\n}\n", "import Root from './selectors/root';\nimport Selector from './selectors/selector';\nimport ClassName from './selectors/className';\nimport Comment from './selectors/comment';\nimport ID from './selectors/id';\nimport Tag from './selectors/tag';\nimport Str from './selectors/string';\nimport Pseudo from './selectors/pseudo';\nimport Attribute, {unescapeValue} from './selectors/attribute';\nimport Universal from './selectors/universal';\nimport Combinator from './selectors/combinator';\nimport Nesting from './selectors/nesting';\n\nimport sortAsc from './sortAscending';\nimport tokenize, {FIELDS as TOKEN} from './tokenize';\n\nimport * as tokens from './tokenTypes';\nimport * as types from './selectors/types';\nimport {unesc, getProp, ensureObject} from './util';\n\nconst WHITESPACE_TOKENS = {\n    [tokens.space]: true,\n    [tokens.cr]: true,\n    [tokens.feed]: true,\n    [tokens.newline]: true,\n    [tokens.tab]: true,\n};\n\nconst WHITESPACE_EQUIV_TOKENS = {\n    ...WHITESPACE_TOKENS,\n    [tokens.comment]: true,\n};\n\nfunction tokenStart (token) {\n    return {\n        line: token[TOKEN.START_LINE],\n        column: token[TOKEN.START_COL],\n    };\n}\n\nfunction tokenEnd (token) {\n    return {\n        line: token[TOKEN.END_LINE],\n        column: token[TOKEN.END_COL],\n    };\n}\n\n\nfunction getSource (startLine, startColumn, endLine, endColumn) {\n    return {\n        start: {\n            line: startLine,\n            column: startColumn,\n        },\n        end: {\n            line: endLine,\n            column: endColumn,\n        },\n    };\n}\n\nfunction getTokenSource (token) {\n    return getSource(\n        token[TOKEN.START_LINE],\n        token[TOKEN.START_COL],\n        token[TOKEN.END_LINE],\n        token[TOKEN.END_COL]\n    );\n}\n\nfunction getTokenSourceSpan (startToken, endToken) {\n    if (!startToken) {\n        return undefined;\n    }\n    return getSource(\n        startToken[TOKEN.START_LINE],\n        startToken[TOKEN.START_COL],\n        endToken[TOKEN.END_LINE],\n        endToken[TOKEN.END_COL]\n    );\n}\n\nfunction unescapeProp (node, prop) {\n    let value = node[prop];\n    if (typeof value !== \"string\") {\n        return;\n    }\n    if (value.indexOf(\"\\\\\") !== -1) {\n        ensureObject(node, 'raws');\n        node[prop] = unesc(value);\n        if (node.raws[prop] === undefined) {\n            node.raws[prop] = value;\n        }\n    }\n    return node;\n}\n\nfunction indexesOf (array, item) {\n    let i = -1;\n    const indexes = [];\n\n    while ((i = array.indexOf(item, i + 1)) !== -1) {\n        indexes.push(i);\n    }\n\n    return indexes;\n}\n\nfunction uniqs () {\n    const list = Array.prototype.concat.apply([], arguments);\n\n    return list.filter((item, i) => i === list.indexOf(item));\n}\n\nexport default class Parser {\n    constructor (rule, options = {}) {\n        this.rule = rule;\n        this.options = Object.assign({lossy: false, safe: false}, options);\n        this.position = 0;\n\n        this.css = typeof this.rule === 'string' ? this.rule : this.rule.selector;\n\n        this.tokens = tokenize({\n            css: this.css,\n            error: this._errorGenerator(),\n            safe: this.options.safe,\n        });\n\n        let rootSource = getTokenSourceSpan(this.tokens[0], this.tokens[this.tokens.length - 1]);\n        this.root = new Root({source: rootSource});\n        this.root.errorGenerator = this._errorGenerator();\n\n\n        const selector = new Selector({\n            source: {start: {line: 1, column: 1}},\n            sourceIndex: 0,\n        });\n        this.root.append(selector);\n        this.current = selector;\n\n        this.loop();\n    }\n\n    _errorGenerator () {\n        return (message, errorOptions) => {\n            if (typeof this.rule === 'string') {\n                return new Error(message);\n            }\n            return this.rule.error(message, errorOptions);\n        };\n    }\n\n    attribute () {\n        const attr = [];\n        const startingToken = this.currToken;\n        this.position ++;\n        while (\n            this.position < this.tokens.length &&\n            this.currToken[TOKEN.TYPE] !== tokens.closeSquare\n        ) {\n            attr.push(this.currToken);\n            this.position ++;\n        }\n        if (this.currToken[TOKEN.TYPE] !== tokens.closeSquare) {\n            return this.expected('closing square bracket', this.currToken[TOKEN.START_POS]);\n        }\n\n        const len = attr.length;\n        const node = {\n            source: getSource(\n                startingToken[1],\n                startingToken[2],\n                this.currToken[3],\n                this.currToken[4]\n            ),\n            sourceIndex: startingToken[TOKEN.START_POS],\n        };\n\n        if (len === 1 && !~[tokens.word].indexOf(attr[0][TOKEN.TYPE])) {\n            return this.expected('attribute', attr[0][TOKEN.START_POS]);\n        }\n\n        let pos = 0;\n        let spaceBefore = '';\n        let commentBefore = '';\n        let lastAdded = null;\n        let spaceAfterMeaningfulToken = false;\n\n        while (pos < len) {\n            const token = attr[pos];\n            const content = this.content(token);\n            const next = attr[pos + 1];\n\n            switch (token[TOKEN.TYPE]) {\n            case tokens.space:\n                // if (\n                //     len === 1 ||\n                //     pos === 0 && this.content(next) === '|'\n                // ) {\n                //     return this.expected('attribute', token[TOKEN.START_POS], content);\n                // }\n                spaceAfterMeaningfulToken = true;\n                if (this.options.lossy) {\n                    break;\n                }\n                if (lastAdded) {\n                    ensureObject(node, 'spaces', lastAdded);\n                    const prevContent = node.spaces[lastAdded].after || '';\n                    node.spaces[lastAdded].after = prevContent + content;\n\n                    const existingComment = getProp(node, 'raws', 'spaces', lastAdded, 'after') || null;\n\n                    if (existingComment) {\n                        node.raws.spaces[lastAdded].after = existingComment + content;\n                    }\n                } else {\n                    spaceBefore = spaceBefore + content;\n                    commentBefore = commentBefore + content;\n                }\n                break;\n            case tokens.asterisk:\n                if (next[TOKEN.TYPE] === tokens.equals) {\n                    node.operator = content;\n                    lastAdded = 'operator';\n                } else if ((!node.namespace || (lastAdded === \"namespace\" && !spaceAfterMeaningfulToken)) && next) {\n                    if (spaceBefore) {\n                        ensureObject(node, 'spaces', 'attribute');\n                        node.spaces.attribute.before = spaceBefore;\n                        spaceBefore = '';\n                    }\n                    if (commentBefore) {\n                        ensureObject(node, 'raws', 'spaces', 'attribute');\n                        node.raws.spaces.attribute.before = spaceBefore;\n                        commentBefore = '';\n                    }\n                    node.namespace = (node.namespace || \"\") + content;\n                    const rawValue = getProp(node, 'raws', 'namespace') || null;\n                    if (rawValue) {\n                        node.raws.namespace += content;\n                    }\n                    lastAdded = 'namespace';\n                }\n                spaceAfterMeaningfulToken = false;\n                break;\n            case tokens.dollar:\n                if (lastAdded === \"value\") {\n                    let oldRawValue = getProp(node, 'raws', 'value');\n                    node.value += \"$\";\n                    if (oldRawValue) {\n                        node.raws.value = oldRawValue + \"$\";\n                    }\n                    break;\n                }\n                // Falls through\n            case tokens.caret:\n                if (next[TOKEN.TYPE] === tokens.equals) {\n                    node.operator = content;\n                    lastAdded = 'operator';\n                }\n                spaceAfterMeaningfulToken = false;\n                break;\n            case tokens.combinator:\n                if (content === '~' && next[TOKEN.TYPE] === tokens.equals) {\n                    node.operator = content;\n                    lastAdded = 'operator';\n                }\n                if (content !== '|') {\n                    spaceAfterMeaningfulToken = false;\n                    break;\n                }\n                if (next[TOKEN.TYPE] === tokens.equals) {\n                    node.operator = content;\n                    lastAdded = 'operator';\n                } else if (!node.namespace && !node.attribute) {\n                    node.namespace = true;\n                }\n                spaceAfterMeaningfulToken = false;\n                break;\n            case tokens.word:\n                if (\n                    next &&\n                    this.content(next) === '|' &&\n                    (attr[pos + 2] && attr[pos + 2][TOKEN.TYPE] !== tokens.equals) && // this look-ahead probably fails with comment nodes involved.\n                    !node.operator &&\n                    !node.namespace\n                ) {\n                    node.namespace = content;\n                    lastAdded = 'namespace';\n                } else if (!node.attribute || (lastAdded === \"attribute\" && !spaceAfterMeaningfulToken)) {\n                    if (spaceBefore) {\n                        ensureObject(node, 'spaces', 'attribute');\n                        node.spaces.attribute.before = spaceBefore;\n\n                        spaceBefore = '';\n                    }\n                    if (commentBefore) {\n                        ensureObject(node, 'raws', 'spaces', 'attribute');\n                        node.raws.spaces.attribute.before = commentBefore;\n                        commentBefore = '';\n                    }\n                    node.attribute = (node.attribute || \"\") + content;\n                    const rawValue = getProp(node, 'raws', 'attribute') || null;\n                    if (rawValue) {\n                        node.raws.attribute += content;\n                    }\n                    lastAdded = 'attribute';\n                } else if ((!node.value && node.value !== \"\") || (lastAdded === \"value\" && !(spaceAfterMeaningfulToken || node.quoteMark))) {\n                    let unescaped = unesc(content);\n                    let oldRawValue = getProp(node, 'raws', 'value') || '';\n                    let oldValue = node.value || '';\n                    node.value = oldValue + unescaped;\n                    node.quoteMark = null;\n                    if (unescaped !== content || oldRawValue) {\n                        ensureObject(node, 'raws');\n                        node.raws.value = (oldRawValue || oldValue) + content;\n                    }\n                    lastAdded = 'value';\n                } else {\n                    let insensitive = (content === 'i' || content === \"I\");\n                    if ((node.value || node.value === '') && (node.quoteMark || spaceAfterMeaningfulToken)) {\n                        node.insensitive = insensitive;\n                        if (!insensitive || content === \"I\") {\n                            ensureObject(node, 'raws');\n                            node.raws.insensitiveFlag = content;\n                        }\n                        lastAdded = 'insensitive';\n                        if (spaceBefore) {\n                            ensureObject(node, 'spaces', 'insensitive');\n                            node.spaces.insensitive.before = spaceBefore;\n\n                            spaceBefore = '';\n                        }\n                        if (commentBefore) {\n                            ensureObject(node, 'raws', 'spaces', 'insensitive');\n                            node.raws.spaces.insensitive.before = commentBefore;\n                            commentBefore = '';\n                        }\n                    } else if (node.value || node.value === '') {\n                        lastAdded = 'value';\n                        node.value += content;\n                        if (node.raws.value) {\n                            node.raws.value += content;\n                        }\n                    }\n                }\n                spaceAfterMeaningfulToken = false;\n                break;\n            case tokens.str:\n                if (!node.attribute || !node.operator) {\n                    return this.error(`Expected an attribute followed by an operator preceding the string.`, {\n                        index: token[TOKEN.START_POS],\n                    });\n                }\n                let {unescaped, quoteMark} = unescapeValue(content);\n                node.value = unescaped;\n                node.quoteMark = quoteMark;\n                lastAdded = 'value';\n\n                ensureObject(node, 'raws');\n                node.raws.value = content;\n\n                spaceAfterMeaningfulToken = false;\n                break;\n            case tokens.equals:\n                if (!node.attribute) {\n                    return this.expected('attribute', token[TOKEN.START_POS], content);\n                }\n                if (node.value) {\n                    return this.error('Unexpected \"=\" found; an operator was already defined.', {index: token[TOKEN.START_POS]});\n                }\n                node.operator = node.operator ? node.operator + content : content;\n                lastAdded = 'operator';\n                spaceAfterMeaningfulToken = false;\n                break;\n            case tokens.comment:\n                if (lastAdded) {\n                    if (spaceAfterMeaningfulToken || (next && next[TOKEN.TYPE] === tokens.space) ||\n                        lastAdded === 'insensitive'\n                    ) {\n                        const lastComment = getProp(node, 'spaces', lastAdded, 'after') || '';\n                        const rawLastComment = getProp(node, 'raws', 'spaces', lastAdded, 'after') || lastComment;\n\n                        ensureObject(node, 'raws', 'spaces', lastAdded);\n                        node.raws.spaces[lastAdded].after = rawLastComment + content;\n                    } else {\n                        const lastValue = node[lastAdded] || '';\n                        const rawLastValue = getProp(node, 'raws', lastAdded) || lastValue;\n                        ensureObject(node, 'raws');\n                        node.raws[lastAdded] = rawLastValue + content;\n                    }\n                } else {\n                    commentBefore = commentBefore + content;\n                }\n                break;\n            default:\n                return this.error(`Unexpected \"${content}\" found.`, {index: token[TOKEN.START_POS]});\n            }\n            pos ++;\n        }\n        unescapeProp(node, \"attribute\");\n        unescapeProp(node, \"namespace\");\n        this.newNode(new Attribute(node));\n        this.position ++;\n    }\n\n    /**\n     * return a node containing meaningless garbage up to (but not including) the specified token position.\n     * if the token position is negative, all remaining tokens are consumed.\n     *\n     * This returns an array containing a single string node if all whitespace,\n     * otherwise an array of comment nodes with space before and after.\n     *\n     * These tokens are not added to the current selector, the caller can add them or use them to amend\n     * a previous node's space metadata.\n     *\n     * In lossy mode, this returns only comments.\n     */\n    parseWhitespaceEquivalentTokens (stopPosition) {\n        if (stopPosition < 0) {\n            stopPosition = this.tokens.length;\n        }\n        let startPosition = this.position;\n        let nodes = [];\n        let space = \"\";\n        let lastComment = undefined;\n        do {\n            if (WHITESPACE_TOKENS[this.currToken[TOKEN.TYPE]]) {\n                if (!this.options.lossy) {\n                    space += this.content();\n                }\n            } else if (this.currToken[TOKEN.TYPE] === tokens.comment) {\n                let spaces = {};\n                if (space) {\n                    spaces.before = space;\n                    space = \"\";\n                }\n                lastComment = new Comment({\n                    value: this.content(),\n                    source: getTokenSource(this.currToken),\n                    sourceIndex: this.currToken[TOKEN.START_POS],\n                    spaces,\n                });\n                nodes.push(lastComment);\n            }\n        } while (++this.position < stopPosition);\n\n        if (space) {\n            if (lastComment) {\n                lastComment.spaces.after = space;\n            } else if (!this.options.lossy) {\n                let firstToken = this.tokens[startPosition];\n                let lastToken = this.tokens[this.position - 1];\n                nodes.push(new Str({\n                    value: '',\n                    source: getSource(\n                        firstToken[TOKEN.START_LINE],\n                        firstToken[TOKEN.START_COL],\n                        lastToken[TOKEN.END_LINE],\n                        lastToken[TOKEN.END_COL],\n                    ),\n                    sourceIndex: firstToken[TOKEN.START_POS],\n                    spaces: {before: space, after: ''},\n                }));\n            }\n        }\n        return nodes;\n    }\n\n    /**\n     *\n     * @param {*} nodes\n     */\n    convertWhitespaceNodesToSpace (nodes, requiredSpace = false) {\n        let space = \"\";\n        let rawSpace = \"\";\n        nodes.forEach(n => {\n            let spaceBefore = this.lossySpace(n.spaces.before, requiredSpace);\n            let rawSpaceBefore = this.lossySpace(n.rawSpaceBefore, requiredSpace);\n            space += spaceBefore + this.lossySpace(n.spaces.after, requiredSpace && spaceBefore.length === 0);\n            rawSpace += spaceBefore + n.value + this.lossySpace(n.rawSpaceAfter, requiredSpace && rawSpaceBefore.length === 0);\n        });\n        if (rawSpace === space) {\n            rawSpace = undefined;\n        }\n        let result = {space, rawSpace};\n        return result;\n    }\n\n    isNamedCombinator (position = this.position) {\n        return this.tokens[position + 0] && this.tokens[position + 0][TOKEN.TYPE] === tokens.slash &&\n               this.tokens[position + 1] && this.tokens[position + 1][TOKEN.TYPE] === tokens.word &&\n               this.tokens[position + 2] && this.tokens[position + 2][TOKEN.TYPE] === tokens.slash;\n\n    }\n    namedCombinator () {\n        if (this.isNamedCombinator()) {\n            let nameRaw = this.content(this.tokens[this.position + 1]);\n            let name = unesc(nameRaw).toLowerCase();\n            let raws = {};\n            if (name !== nameRaw) {\n                raws.value = `/${nameRaw}/`;\n            }\n            let node = new Combinator({\n                value: `/${name}/`,\n                source: getSource(\n                    this.currToken[TOKEN.START_LINE],\n                    this.currToken[TOKEN.START_COL],\n                    this.tokens[this.position + 2][TOKEN.END_LINE],\n                    this.tokens[this.position + 2][TOKEN.END_COL],\n                ),\n                sourceIndex: this.currToken[TOKEN.START_POS],\n                raws,\n            });\n            this.position = this.position + 3;\n            return node;\n        } else {\n            this.unexpected();\n        }\n    }\n\n    combinator () {\n        if (this.content() === '|') {\n            return this.namespace();\n        }\n        // We need to decide between a space that's a descendant combinator and meaningless whitespace at the end of a selector.\n        let nextSigTokenPos = this.locateNextMeaningfulToken(this.position);\n\n        if (nextSigTokenPos < 0 || this.tokens[nextSigTokenPos][TOKEN.TYPE] === tokens.comma || this.tokens[nextSigTokenPos][TOKEN.TYPE] === tokens.closeParenthesis) {\n            let nodes = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);\n            if (nodes.length > 0) {\n                let last = this.current.last;\n                if (last) {\n                    let {space, rawSpace} = this.convertWhitespaceNodesToSpace(nodes);\n                    if (rawSpace !== undefined) {\n                        last.rawSpaceAfter += rawSpace;\n                    }\n                    last.spaces.after += space;\n                } else {\n                    nodes.forEach(n => this.newNode(n));\n                }\n            }\n            return;\n        }\n\n        let firstToken = this.currToken;\n        let spaceOrDescendantSelectorNodes = undefined;\n        if (nextSigTokenPos > this.position) {\n            spaceOrDescendantSelectorNodes = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);\n        }\n\n        let node;\n        if (this.isNamedCombinator()) {\n            node = this.namedCombinator();\n        } else if (this.currToken[TOKEN.TYPE] === tokens.combinator) {\n            node = new Combinator({\n                value: this.content(),\n                source: getTokenSource(this.currToken),\n                sourceIndex: this.currToken[TOKEN.START_POS],\n            });\n            this.position++;\n        } else if (WHITESPACE_TOKENS[this.currToken[TOKEN.TYPE]]) {\n            // pass\n        } else if (!spaceOrDescendantSelectorNodes) {\n            this.unexpected();\n        }\n\n        if (node) {\n            if (spaceOrDescendantSelectorNodes) {\n                let {space, rawSpace} = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes);\n                node.spaces.before = space;\n                node.rawSpaceBefore = rawSpace;\n            }\n        } else {\n            // descendant combinator\n            let {space, rawSpace} = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes, true);\n            if (!rawSpace) {\n                rawSpace = space;\n            }\n            let spaces = {};\n            let raws = {spaces: {}};\n            if (space.endsWith(' ') && rawSpace.endsWith(' ')) {\n                spaces.before = space.slice(0, space.length - 1);\n                raws.spaces.before = rawSpace.slice(0, rawSpace.length - 1);\n            } else if (space.startsWith(' ') && rawSpace.startsWith(' ')) {\n                spaces.after = space.slice(1);\n                raws.spaces.after = rawSpace.slice(1);\n            } else {\n                raws.value = rawSpace;\n            }\n            node = new Combinator({\n                value: ' ',\n                source: getTokenSourceSpan(firstToken, this.tokens[this.position - 1]),\n                sourceIndex: firstToken[TOKEN.START_POS],\n                spaces,\n                raws,\n            });\n        }\n\n        if (this.currToken && this.currToken[TOKEN.TYPE] === tokens.space) {\n            node.spaces.after = this.optionalSpace(this.content());\n            this.position++;\n        }\n\n        return this.newNode(node);\n    }\n\n    comma () {\n        if (this.position === this.tokens.length - 1) {\n            this.root.trailingComma = true;\n            this.position ++;\n            return;\n        }\n        this.current._inferEndPosition();\n        const selector = new Selector({\n            source: {\n                start: tokenStart(this.tokens[this.position + 1]),\n            },\n            sourceIndex: this.tokens[this.position + 1][TOKEN.START_POS],\n        });\n        this.current.parent.append(selector);\n        this.current = selector;\n        this.position ++;\n    }\n\n    comment () {\n        const current = this.currToken;\n        this.newNode(new Comment({\n            value: this.content(),\n            source: getTokenSource(current),\n            sourceIndex: current[TOKEN.START_POS],\n        }));\n        this.position ++;\n    }\n\n    error (message, opts) {\n        throw this.root.error(message, opts);\n    }\n\n    missingBackslash () {\n        return this.error('Expected a backslash preceding the semicolon.', {\n            index: this.currToken[TOKEN.START_POS],\n        });\n    }\n\n    missingParenthesis () {\n        return this.expected('opening parenthesis', this.currToken[TOKEN.START_POS]);\n    }\n\n    missingSquareBracket () {\n        return this.expected('opening square bracket', this.currToken[TOKEN.START_POS]);\n    }\n\n    unexpected () {\n        return this.error(`Unexpected '${this.content()}'. Escaping special characters with \\\\ may help.`, this.currToken[TOKEN.START_POS]);\n    }\n\n    unexpectedPipe () {\n        return this.error(`Unexpected '|'.`, this.currToken[TOKEN.START_POS]);\n    }\n\n    namespace () {\n        const before = this.prevToken && this.content(this.prevToken) || true;\n        if (this.nextToken[TOKEN.TYPE] === tokens.word) {\n            this.position ++;\n            return this.word(before);\n        } else if (this.nextToken[TOKEN.TYPE] === tokens.asterisk) {\n            this.position ++;\n            return this.universal(before);\n        }\n\n        this.unexpectedPipe();\n    }\n\n    nesting () {\n        if (this.nextToken) {\n            let nextContent = this.content(this.nextToken);\n            if (nextContent === \"|\") {\n                this.position++;\n                return;\n            }\n        }\n        const current = this.currToken;\n        this.newNode(new Nesting({\n            value: this.content(),\n            source: getTokenSource(current),\n            sourceIndex: current[TOKEN.START_POS],\n        }));\n        this.position ++;\n    }\n\n    parentheses () {\n        let last = this.current.last;\n        let unbalanced = 1;\n        this.position ++;\n        if (last && last.type === types.PSEUDO) {\n            const selector = new Selector({\n                source: {start: tokenStart(this.tokens[this.position])},\n                sourceIndex: this.tokens[this.position][TOKEN.START_POS],\n            });\n            const cache = this.current;\n            last.append(selector);\n            this.current = selector;\n            while (this.position < this.tokens.length && unbalanced) {\n                if (this.currToken[TOKEN.TYPE] === tokens.openParenthesis) {\n                    unbalanced ++;\n                }\n                if (this.currToken[TOKEN.TYPE] === tokens.closeParenthesis) {\n                    unbalanced --;\n                }\n                if (unbalanced) {\n                    this.parse();\n                } else {\n                    this.current.source.end = tokenEnd(this.currToken);\n                    this.current.parent.source.end = tokenEnd(this.currToken);\n                    this.position ++;\n                }\n            }\n            this.current = cache;\n        } else {\n            // I think this case should be an error. It's used to implement a basic parse of media queries\n            // but I don't think it's a good idea.\n            let parenStart = this.currToken;\n            let parenValue = \"(\";\n            let parenEnd;\n            while (this.position < this.tokens.length && unbalanced) {\n                if (this.currToken[TOKEN.TYPE] === tokens.openParenthesis) {\n                    unbalanced ++;\n                }\n                if (this.currToken[TOKEN.TYPE] === tokens.closeParenthesis) {\n                    unbalanced --;\n                }\n                parenEnd = this.currToken;\n                parenValue += this.parseParenthesisToken(this.currToken);\n                this.position ++;\n            }\n            if (last) {\n                last.appendToPropertyAndEscape(\"value\", parenValue, parenValue);\n            } else {\n                this.newNode(new Str({\n                    value: parenValue,\n                    source: getSource(\n                        parenStart[TOKEN.START_LINE],\n                        parenStart[TOKEN.START_COL],\n                        parenEnd[TOKEN.END_LINE],\n                        parenEnd[TOKEN.END_COL],\n                    ),\n                    sourceIndex: parenStart[TOKEN.START_POS],\n                }));\n            }\n        }\n        if (unbalanced) {\n            return this.expected('closing parenthesis', this.currToken[TOKEN.START_POS]);\n        }\n    }\n\n    pseudo () {\n        let pseudoStr = '';\n        let startingToken = this.currToken;\n        while (this.currToken && this.currToken[TOKEN.TYPE] === tokens.colon) {\n            pseudoStr += this.content();\n            this.position ++;\n        }\n        if (!this.currToken) {\n            return this.expected(['pseudo-class', 'pseudo-element'], this.position - 1);\n        }\n        if (this.currToken[TOKEN.TYPE] === tokens.word) {\n            this.splitWord(false, (first, length) => {\n                pseudoStr += first;\n                this.newNode(new Pseudo({\n                    value: pseudoStr,\n                    source: getTokenSourceSpan(startingToken, this.currToken),\n                    sourceIndex: startingToken[TOKEN.START_POS],\n                }));\n                if (\n                    length > 1 &&\n                    this.nextToken &&\n                    this.nextToken[TOKEN.TYPE] === tokens.openParenthesis\n                ) {\n                    this.error('Misplaced parenthesis.', {\n                        index: this.nextToken[TOKEN.START_POS],\n                    });\n                }\n            });\n        } else {\n            return this.expected(['pseudo-class', 'pseudo-element'], this.currToken[TOKEN.START_POS]);\n        }\n    }\n\n    space () {\n        const content = this.content();\n        // Handle space before and after the selector\n        if (\n            this.position === 0 ||\n            this.prevToken[TOKEN.TYPE] === tokens.comma ||\n            this.prevToken[TOKEN.TYPE] === tokens.openParenthesis ||\n            (this.current.nodes.every((node) => node.type === 'comment'))\n        ) {\n            this.spaces = this.optionalSpace(content);\n            this.position ++;\n        } else if (\n            this.position === (this.tokens.length - 1) ||\n            this.nextToken[TOKEN.TYPE] === tokens.comma ||\n            this.nextToken[TOKEN.TYPE] === tokens.closeParenthesis\n        ) {\n            this.current.last.spaces.after = this.optionalSpace(content);\n            this.position ++;\n        } else {\n            this.combinator();\n        }\n    }\n\n    string () {\n        const current = this.currToken;\n        this.newNode(new Str({\n            value: this.content(),\n            source: getTokenSource(current),\n            sourceIndex: current[TOKEN.START_POS],\n        }));\n        this.position ++;\n    }\n\n    universal (namespace) {\n        const nextToken = this.nextToken;\n        if (nextToken && this.content(nextToken) === '|') {\n            this.position ++;\n            return this.namespace();\n        }\n        const current = this.currToken;\n        this.newNode(new Universal({\n            value: this.content(),\n            source: getTokenSource(current),\n            sourceIndex: current[TOKEN.START_POS],\n        }), namespace);\n        this.position ++;\n    }\n\n    splitWord (namespace, firstCallback) {\n        let nextToken = this.nextToken;\n        let word = this.content();\n        while (\n            nextToken &&\n            ~[tokens.dollar, tokens.caret, tokens.equals, tokens.word].indexOf(nextToken[TOKEN.TYPE])\n        ) {\n            this.position ++;\n            let current = this.content();\n            word += current;\n            if (current.lastIndexOf('\\\\') === current.length - 1) {\n                let next = this.nextToken;\n                if (next && next[TOKEN.TYPE] === tokens.space) {\n                    word += this.requiredSpace(this.content(next));\n                    this.position ++;\n                }\n            }\n            nextToken = this.nextToken;\n        }\n        const hasClass = indexesOf(word, '.').filter(i => {\n            // Allow escaped dot within class name\n            const escapedDot = word[i - 1] === '\\\\';\n            // Allow decimal numbers percent in @keyframes\n            const isKeyframesPercent = /^\\d+\\.\\d+%$/.test(word);\n            return !escapedDot && !isKeyframesPercent;\n        });\n        let hasId = indexesOf(word, '#').filter(i => word[i - 1] !== '\\\\');\n        // Eliminate Sass interpolations from the list of id indexes\n        const interpolations = indexesOf(word, '#{');\n        if (interpolations.length) {\n            hasId = hasId.filter(hashIndex => !~interpolations.indexOf(hashIndex));\n        }\n        let indices = sortAsc(uniqs([0, ...hasClass, ...hasId]));\n        indices.forEach((ind, i) => {\n            const index = indices[i + 1] || word.length;\n            const value = word.slice(ind, index);\n            if (i === 0 && firstCallback) {\n                return firstCallback.call(this, value, indices.length);\n            }\n            let node;\n            const current = this.currToken;\n            const sourceIndex = current[TOKEN.START_POS] + indices[i];\n            const source = getSource(\n                current[1],\n                current[2] + ind,\n                current[3],\n                current[2] + (index - 1)\n            );\n            if (~hasClass.indexOf(ind)) {\n                let classNameOpts = {\n                    value: value.slice(1),\n                    source,\n                    sourceIndex,\n                };\n                node = new ClassName(unescapeProp(classNameOpts, \"value\"));\n            } else if (~hasId.indexOf(ind)) {\n                let idOpts = {\n                    value: value.slice(1),\n                    source,\n                    sourceIndex,\n                };\n                node = new ID(unescapeProp(idOpts, \"value\"));\n            } else {\n                let tagOpts = {\n                    value,\n                    source,\n                    sourceIndex,\n                };\n                unescapeProp(tagOpts, \"value\");\n                node = new Tag(tagOpts);\n            }\n            this.newNode(node, namespace);\n            // Ensure that the namespace is used only once\n            namespace = null;\n        });\n        this.position ++;\n    }\n\n    word (namespace) {\n        const nextToken = this.nextToken;\n        if (nextToken && this.content(nextToken) === '|') {\n            this.position ++;\n            return this.namespace();\n        }\n        return this.splitWord(namespace);\n    }\n\n    loop () {\n        while (this.position < this.tokens.length) {\n            this.parse(true);\n        }\n        this.current._inferEndPosition();\n        return this.root;\n    }\n\n    parse (throwOnParenthesis) {\n        switch (this.currToken[TOKEN.TYPE]) {\n        case tokens.space:\n            this.space();\n            break;\n        case tokens.comment:\n            this.comment();\n            break;\n        case tokens.openParenthesis:\n            this.parentheses();\n            break;\n        case tokens.closeParenthesis:\n            if (throwOnParenthesis) {\n                this.missingParenthesis();\n            }\n            break;\n        case tokens.openSquare:\n            this.attribute();\n            break;\n        case tokens.dollar:\n        case tokens.caret:\n        case tokens.equals:\n        case tokens.word:\n            this.word();\n            break;\n        case tokens.colon:\n            this.pseudo();\n            break;\n        case tokens.comma:\n            this.comma();\n            break;\n        case tokens.asterisk:\n            this.universal();\n            break;\n        case tokens.ampersand:\n            this.nesting();\n            break;\n        case tokens.slash:\n        case tokens.combinator:\n            this.combinator();\n            break;\n        case tokens.str:\n            this.string();\n            break;\n        // These cases throw; no break needed.\n        case tokens.closeSquare:\n            this.missingSquareBracket();\n        case tokens.semicolon:\n            this.missingBackslash();\n        default:\n            this.unexpected();\n        }\n    }\n\n    /**\n     * Helpers\n     */\n\n    expected (description, index, found) {\n        if (Array.isArray(description)) {\n            const last = description.pop();\n            description = `${description.join(', ')} or ${last}`;\n        }\n        const an = /^[aeiou]/.test(description[0]) ? 'an' : 'a';\n        if (!found) {\n            return this.error(\n                `Expected ${an} ${description}.`,\n                {index}\n            );\n        }\n        return this.error(\n            `Expected ${an} ${description}, found \"${found}\" instead.`,\n            {index}\n        );\n    }\n\n    requiredSpace (space) {\n        return this.options.lossy ? ' ' : space;\n    }\n\n    optionalSpace (space) {\n        return this.options.lossy ? '' : space;\n    }\n\n    lossySpace (space, required) {\n        if (this.options.lossy) {\n            return required ? ' ' : '';\n        } else {\n            return space;\n        }\n    }\n\n    parseParenthesisToken (token) {\n        const content = this.content(token);\n        if (token[TOKEN.TYPE] === tokens.space) {\n            return this.requiredSpace(content);\n        } else {\n            return content;\n        }\n    }\n\n    newNode (node, namespace) {\n        if (namespace) {\n            if (/^ +$/.test(namespace)) {\n                if (!this.options.lossy) {\n                    this.spaces = (this.spaces || '') + namespace;\n                }\n                namespace = true;\n            }\n            node.namespace = namespace;\n            unescapeProp(node, \"namespace\");\n        }\n        if (this.spaces) {\n            node.spaces.before = this.spaces;\n            this.spaces = '';\n        }\n        return this.current.append(node);\n    }\n\n    content (token = this.currToken) {\n        return this.css.slice(token[TOKEN.START_POS], token[TOKEN.END_POS]);\n    }\n\n    get currToken () {\n        return this.tokens[this.position];\n    }\n\n    get nextToken () {\n        return this.tokens[this.position + 1];\n    }\n\n    get prevToken () {\n        return this.tokens[this.position - 1];\n    }\n\n    /**\n     * returns the index of the next non-whitespace, non-comment token.\n     * returns -1 if no meaningful token is found.\n     */\n    locateNextMeaningfulToken (startPosition = this.position + 1) {\n        let searchPosition = startPosition;\n        while (searchPosition < this.tokens.length) {\n            if (WHITESPACE_EQUIV_TOKENS[this.tokens[searchPosition][TOKEN.TYPE]]) {\n                searchPosition++;\n                continue;\n            } else {\n                return searchPosition;\n            }\n        }\n        return -1;\n    }\n}\n", "import Parser from './parser';\n\nexport default class Processor {\n    constructor (func, options) {\n        this.func = func || function noop () {};\n        this.funcRes = null;\n        this.options = options;\n    }\n\n    _shouldUpdateSelector (rule, options = {}) {\n        let merged = Object.assign({}, this.options, options);\n        if (merged.updateSelector === false) {\n            return false;\n        } else {\n            return typeof rule !== \"string\";\n        }\n    }\n\n    _isLossy (options = {}) {\n        let merged = Object.assign({}, this.options, options);\n        if (merged.lossless === false) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    _root (rule, options = {}) {\n        let parser = new Parser(rule, this._parseOptions(options));\n        return parser.root;\n    }\n\n    _parseOptions (options) {\n        return {\n            lossy: this._isLossy(options),\n        };\n    }\n\n    _run (rule, options = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                let root = this._root(rule, options);\n                Promise.resolve(this.func(root)).then(transform => {\n                    let string = undefined;\n                    if (this._shouldUpdateSelector(rule, options)) {\n                        string = root.toString();\n                        rule.selector = string;\n                    }\n                    return {transform, root, string};\n                }).then(resolve, reject);\n            } catch (e) {\n                reject(e);\n                return;\n            }\n        });\n    }\n\n    _runSync (rule, options = {}) {\n        let root = this._root(rule, options);\n        let transform = this.func(root);\n        if (transform && typeof transform.then === \"function\") {\n            throw new Error(\"Selector processor returned a promise to a synchronous call.\");\n        }\n        let string = undefined;\n        if (options.updateSelector && typeof rule !== \"string\") {\n            string = root.toString();\n            rule.selector = string;\n        }\n        return {transform, root, string};\n    }\n\n    /**\n     * Process rule into a selector AST.\n     *\n     * @param rule {postcss.Rule | string} The css selector to be processed\n     * @param options The options for processing\n     * @returns {Promise<parser.Root>} The AST of the selector after processing it.\n     */\n    ast (rule, options) {\n        return this._run(rule, options).then(result => result.root);\n    }\n\n    /**\n     * Process rule into a selector AST synchronously.\n     *\n     * @param rule {postcss.Rule | string} The css selector to be processed\n     * @param options The options for processing\n     * @returns {parser.Root} The AST of the selector after processing it.\n     */\n    astSync (rule, options) {\n        return this._runSync(rule, options).root;\n    }\n\n    /**\n     * Process a selector into a transformed value asynchronously\n     *\n     * @param rule {postcss.Rule | string} The css selector to be processed\n     * @param options The options for processing\n     * @returns {Promise<any>} The value returned by the processor.\n     */\n    transform (rule, options) {\n        return this._run(rule, options).then(result => result.transform);\n    }\n\n    /**\n     * Process a selector into a transformed value synchronously.\n     *\n     * @param rule {postcss.Rule | string} The css selector to be processed\n     * @param options The options for processing\n     * @returns {any} The value returned by the processor.\n     */\n    transformSync (rule, options) {\n        return this._runSync(rule, options).transform;\n    }\n\n    /**\n     * Process a selector into a new selector string asynchronously.\n     *\n     * @param rule {postcss.Rule | string} The css selector to be processed\n     * @param options The options for processing\n     * @returns {string} the selector after processing.\n     */\n    process (rule, options) {\n        return this._run(rule, options)\n            .then((result) => result.string || result.root.toString());\n    }\n\n    /**\n     * Process a selector into a new selector string synchronously.\n     *\n     * @param rule {postcss.Rule | string} The css selector to be processed\n     * @param options The options for processing\n     * @returns {string} the selector after processing.\n     */\n    processSync (rule, options) {\n        let result = this._runSync(rule, options);\n        return result.string || result.root.toString();\n    }\n}\n", "export * from \"./types\";\nexport * from \"./constructors\";\nexport * from \"./guards\";\n", "import Attribute  from './attribute';\nimport ClassName  from './className';\nimport Combinator from './combinator';\nimport Comment    from './comment';\nimport Id         from './id';\nimport Nesting    from './nesting';\nimport Pseudo     from './pseudo';\nimport Root       from './root';\nimport Selector   from './selector';\nimport Str        from './string';\nimport Tag        from './tag';\nimport Universal  from './universal';\n\nexport const attribute = opts => new Attribute(opts);\nexport const className = opts => new ClassName(opts);\nexport const combinator = opts => new Combinator(opts);\nexport const comment = opts => new Comment(opts);\nexport const id = opts => new Id(opts);\nexport const nesting = opts => new Nesting(opts);\nexport const pseudo = opts => new Pseudo(opts);\nexport const root = opts => new Root(opts);\nexport const selector = opts => new Selector(opts);\nexport const string = opts => new Str(opts);\nexport const tag = opts => new Tag(opts);\nexport const universal = opts => new Universal(opts);\n", "import {\n    ATTRIBUTE,\n    CLASS,\n    COMBINATOR,\n    COMMENT,\n    ID,\n    NESTING,\n    PSEUDO,\n    ROOT,\n    SELECTOR,\n    STRING,\n    TAG,\n    UNIVERSAL,\n} from \"./types\";\n\nconst IS_TYPE = {\n    [ATTRIBUTE]: true,\n    [CLASS]: true,\n    [COMBINATOR]: true,\n    [COMMENT]: true,\n    [ID]: true,\n    [NESTING]: true,\n    [PSEUDO]: true,\n    [ROOT]: true,\n    [SELECTOR]: true,\n    [STRING]: true,\n    [TAG]: true,\n    [UNIVERSAL]: true,\n};\n\nexport function isNode (node) {\n    return (typeof node === \"object\" && IS_TYPE[node.type]);\n}\n\nfunction isNodeType (type, node) {\n    return isNode(node) && node.type === type;\n}\n\nexport const isAttribute = isNodeType.bind(null, ATTRIBUTE);\nexport const isClassName = isNodeType.bind(null, CLASS);\nexport const isCombinator = isNodeType.bind(null, COMBINATOR);\nexport const isComment = isNodeType.bind(null, COMMENT);\nexport const isIdentifier = isNodeType.bind(null, ID);\nexport const isNesting = isNodeType.bind(null, NESTING);\nexport const isPseudo = isNodeType.bind(null, PSEUDO);\nexport const isRoot = isNodeType.bind(null, ROOT);\nexport const isSelector = isNodeType.bind(null, SELECTOR);\nexport const isString = isNodeType.bind(null, STRING);\nexport const isTag = isNodeType.bind(null, TAG);\nexport const isUniversal = isNodeType.bind(null, UNIVERSAL);\n\nexport function isPseudoElement (node) {\n    return isPseudo(node)\n           && node.value\n           && (\n               node.value.startsWith(\"::\")\n             || node.value.toLowerCase() === \":before\"\n             || node.value.toLowerCase() === \":after\"\n             || node.value.toLowerCase() === \":first-letter\"\n             || node.value.toLowerCase() === \":first-line\"\n           );\n}\nexport function isPseudoClass (node) {\n    return isPseudo(node) && !isPseudoElement(node);\n}\n\nexport function isContainer (node) {\n    return !!(isNode(node) && node.walk);\n}\n\nexport function isNamespace (node) {\n    return isAttribute(node) || isTag(node);\n}\n", "import Processor from './processor';\nimport * as selectors from './selectors';\n\nconst parser = processor => new Processor(processor);\n\nObject.assign(parser, selectors);\n\nexport default parser;\n", "import type { ExtractorResult } from \"./types\";\n\nfunction mergeSets(into: Set<string>, from?: string[] | Set<string>): void {\n  if (from) {\n    from.forEach(into.add, into);\n  }\n}\n\n/**\n * @public\n */\nclass ExtractorResultSets {\n  private undetermined = new Set<string>();\n  private attrNames = new Set<string>();\n  private attrValues = new Set<string>();\n  private classes = new Set<string>();\n  private ids = new Set<string>();\n  private tags = new Set<string>();\n\n  constructor(er: ExtractorResult) {\n    this.merge(er);\n  }\n\n  merge(that: ExtractorResult | ExtractorResultSets): this {\n    if (Array.isArray(that)) {\n      mergeSets(this.undetermined, that);\n    } else if (that instanceof ExtractorResultSets) {\n      mergeSets(this.undetermined, that.undetermined);\n      mergeSets(this.attrNames, that.attrNames);\n      mergeSets(this.attrValues, that.attrValues);\n      mergeSets(this.classes, that.classes);\n      mergeSets(this.ids, that.ids);\n      mergeSets(this.tags, that.tags);\n    } else {\n      // ExtractorResultDetailed:\n      mergeSets(this.undetermined, that.undetermined);\n      if (that.attributes) {\n        mergeSets(this.attrNames, that.attributes.names);\n        mergeSets(this.attrValues, that.attributes.values);\n      }\n      mergeSets(this.classes, that.classes);\n      mergeSets(this.ids, that.ids);\n      mergeSets(this.tags, that.tags);\n    }\n    return this;\n  }\n\n  hasAttrName(name: string): boolean {\n    return this.attrNames.has(name) || this.undetermined.has(name);\n  }\n\n  private someAttrValue(predicate: (value: string) => boolean): boolean {\n    for (const val of this.attrValues) {\n      if (predicate(val)) return true;\n    }\n    for (const val of this.undetermined) {\n      if (predicate(val)) return true;\n    }\n    return false;\n  }\n\n  hasAttrPrefix(prefix: string): boolean {\n    return this.someAttrValue((value) => value.startsWith(prefix));\n  }\n\n  hasAttrSuffix(suffix: string): boolean {\n    return this.someAttrValue((value) => value.endsWith(suffix));\n  }\n\n  hasAttrSubstr(substr: string): boolean {\n    const wordSubstr = substr.trim().split(\" \");\n    return wordSubstr.every((word) =>\n      this.someAttrValue((value) => value.includes(word)),\n    );\n  }\n\n  hasAttrValue(value: string): boolean {\n    return this.attrValues.has(value) || this.undetermined.has(value);\n  }\n\n  hasClass(name: string): boolean {\n    return this.classes.has(name) || this.undetermined.has(name);\n  }\n\n  hasId(id: string): boolean {\n    return this.ids.has(id) || this.undetermined.has(id);\n  }\n\n  hasTag(tag: string): boolean {\n    return this.tags.has(tag) || this.undetermined.has(tag);\n  }\n}\n\nexport default ExtractorResultSets;\n", "import type { ExtractorResult, Options } from \"./types/\";\n\n/**\n * @public\n */\nexport const defaultOptions: Options = {\n  css: [],\n  content: [],\n  defaultExtractor: (content: string): ExtractorResult =>\n    content.match(/[A-Za-z0-9_-]+/g) || [],\n  extractors: [],\n  fontFace: false,\n  keyframes: false,\n  rejected: false,\n  rejectedCss: false,\n  stdin: false,\n  stdout: false,\n  variables: false,\n  safelist: {\n    standard: [],\n    deep: [],\n    greedy: [],\n    variables: [],\n    keyframes: [],\n  },\n  blocklist: [],\n  skippedContentGlobs: [],\n  dynamicAttributes: [],\n};\n", "import type { StringRegExpArray } from \"./types\";\n\n/**\n * @public\n */\nexport class VariableNode {\n  public nodes: VariableNode[] = [];\n  public value: any;\n  public isUsed = false;\n\n  constructor(declaration: any) {\n    this.value = declaration;\n  }\n}\n\n/**\n * @public\n */\nexport class VariablesStructure {\n  public nodes: Map<string, VariableNode[]> = new Map();\n  public usedVariables: Set<string> = new Set();\n  public safelist: StringRegExpArray = [];\n\n  addVariable(declaration: any): void {\n    const { prop } = declaration;\n    if (!this.nodes.has(prop)) {\n      const node = new VariableNode(declaration);\n      this.nodes.set(prop, [node]);\n    } else {\n      const node = new VariableNode(declaration);\n      const variableNodes = this.nodes.get(prop) || [];\n      this.nodes.set(prop, [...variableNodes, node]);\n    }\n  }\n\n  addVariableUsage(\n    declaration: any,\n    matchedVariables: IterableIterator<RegExpMatchArray>,\n  ): void {\n    const { prop } = declaration;\n    const nodes = this.nodes.get(prop);\n    for (const variableMatch of matchedVariables) {\n      // capturing group containing the variable is in index 1\n      const variableName = variableMatch[1];\n      if (this.nodes.has(variableName)) {\n        const usedVariableNodes = this.nodes.get(variableName);\n        nodes?.forEach((node) => {\n          usedVariableNodes?.forEach((usedVariableNode) =>\n            node.nodes.push(usedVariableNode),\n          );\n        });\n      }\n    }\n  }\n\n  addVariableUsageInProperties(\n    matchedVariables: IterableIterator<RegExpMatchArray>,\n  ): void {\n    for (const variableMatch of matchedVariables) {\n      // capturing group containing the variable is in index 1\n      const variableName = variableMatch[1];\n      this.usedVariables.add(variableName);\n    }\n  }\n\n  setAsUsed(variableName: string): void {\n    const nodes = this.nodes.get(variableName);\n    if (nodes) {\n      const queue = [...nodes];\n      while (queue.length !== 0) {\n        const currentNode = queue.pop();\n        if (currentNode && !currentNode.isUsed) {\n          currentNode.isUsed = true;\n          queue.push(...currentNode.nodes);\n        }\n      }\n    }\n  }\n\n  removeUnused(): void {\n    // check unordered usage\n    for (const used of this.usedVariables) {\n      const usedNodes = this.nodes.get(used);\n      if (usedNodes) {\n        for (const usedNode of usedNodes) {\n          const usedVariablesMatchesInDeclaration =\n            usedNode.value.value.matchAll(/var\\((.+?)[,)]/g);\n\n          for (const usage of usedVariablesMatchesInDeclaration) {\n            if (!this.usedVariables.has(usage[1])) {\n              this.usedVariables.add(usage[1]);\n            }\n          }\n        }\n      }\n    }\n\n    for (const used of this.usedVariables) {\n      this.setAsUsed(used);\n    }\n\n    for (const [name, declarations] of this.nodes) {\n      for (const declaration of declarations) {\n        if (!declaration.isUsed && !this.isVariablesSafelisted(name)) {\n          declaration.value.remove();\n        }\n      }\n    }\n  }\n\n  isVariablesSafelisted(variable: string): boolean {\n    return this.safelist.some((safelistItem) => {\n      return typeof safelistItem === \"string\"\n        ? safelistItem === variable\n        : safelistItem.test(variable);\n    });\n  }\n}\n", "/**\n * Core package of PurgeCSS\n *\n * Contains the core methods to analyze the files, remove unused CSS.\n *\n * @packageDocumentation\n */\n\nimport postcss from \"./postcss/postcss\";\nimport selectorParser from \"./postcss-selector-parser\";\nimport ExtractorResultSets from \"./ExtractorResultSets\";\nimport { defaultOptions } from \"./options\";\nimport type {\n  AtRules,\n  ComplexSafelist,\n  ExtractorFunction,\n  ExtractorResultDetailed,\n  Extractors,\n  IgnoreType,\n  Options,\n  PostCSSRoot,\n  RawContent,\n  RawCSS,\n  ResultPurge,\n  UserDefinedOptions,\n  UserDefinedSafelist,\n} from \"./types\";\n\nimport { VariablesStructure } from \"./VariablesStructure\";\n\nexport * from \"./types\";\nexport { defaultOptions, ExtractorResultSets, PurgeCSS, VariablesStructure };\nexport * from \"./VariablesStructure\";\n\nconst CSS_SAFELIST = [\"*\", \":root\", \":after\", \":before\"];\nexport const IGNORE_ANNOTATION_CURRENT = \"purgecss ignore current\";\nexport const IGNORE_ANNOTATION_NEXT = \"purgecss ignore\";\nexport const IGNORE_ANNOTATION_START = \"purgecss start ignore\";\nexport const IGNORE_ANNOTATION_END = \"purgecss end ignore\";\nexport const CONFIG_FILENAME = \"purgecss.config.js\";\nexport const ERROR_CONFIG_FILE_LOADING = \"Error loading the config file\";\n\n/*@__NO_SIDE_EFFECTS__*/\nexport function standardizeSafelist(\n  userDefinedSafelist: UserDefinedSafelist = [],\n): Required<ComplexSafelist> {\n  if (Array.isArray(userDefinedSafelist)) {\n    return {\n      ...defaultOptions.safelist,\n      standard: userDefinedSafelist,\n    };\n  }\n  return {\n    ...defaultOptions.safelist,\n    ...userDefinedSafelist,\n  };\n}\n\n/*@__NO_SIDE_EFFECTS__*/\nasync function extractSelectors(\n  content: string,\n  extractor: ExtractorFunction,\n): Promise<ExtractorResultSets> {\n  return new ExtractorResultSets(await extractor(content));\n}\n\n/*@__NO_SIDE_EFFECTS__*/\nfunction isIgnoreAnnotation(node: any, type: IgnoreType): boolean {\n  switch (type) {\n    case \"next\":\n      return node.text.includes(IGNORE_ANNOTATION_NEXT);\n    case \"start\":\n      return node.text.includes(IGNORE_ANNOTATION_START);\n    case \"end\":\n      return node.text.includes(IGNORE_ANNOTATION_END);\n  }\n}\n\n/*@__NO_SIDE_EFFECTS__*/\nfunction isRuleEmpty(node?: any): boolean {\n  if (\n    (isPostCSSRule(node) && !node.selector) ||\n    (node?.nodes && !node.nodes.length) ||\n    (isPostCSSAtRule(node) &&\n      ((!node.nodes && !node.params) ||\n        (!node.params && node.nodes && !node.nodes.length)))\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/*@__NO_SIDE_EFFECTS__*/\nfunction hasIgnoreAnnotation(rule: any): boolean {\n  let found = false;\n  rule.walkComments((node) => {\n    if (\n      node &&\n      node.type === \"comment\" &&\n      node.text.includes(IGNORE_ANNOTATION_CURRENT)\n    ) {\n      found = true;\n      node.remove();\n    }\n  });\n  return found;\n}\n\n/*@__NO_SIDE_EFFECTS__*/\nexport function mergeExtractorSelectors(\n  ...extractors: (ExtractorResultDetailed | ExtractorResultSets)[]\n): ExtractorResultSets {\n  const result = new ExtractorResultSets([]);\n  extractors.forEach(result.merge, result);\n  return result;\n}\n/*@__NO_SIDE_EFFECTS__*/\nfunction stripQuotes(str: string): string {\n  return str.replace(/(^[\"'])|([\"']$)/g, \"\");\n}\n\n/*@__NO_SIDE_EFFECTS__*/\nfunction isAttributeFound(\n  attributeNode: selectorParser.Attribute,\n  selectors: ExtractorResultSets,\n): boolean {\n  if (!selectors.hasAttrName(attributeNode.attribute)) {\n    return false;\n  }\n\n  if (typeof attributeNode.value === \"undefined\") {\n    return true;\n  }\n\n  switch (attributeNode.operator) {\n    case \"$=\":\n      return selectors.hasAttrSuffix(attributeNode.value);\n    case \"~=\":\n    case \"*=\":\n      return selectors.hasAttrSubstr(attributeNode.value);\n    case \"=\":\n      return selectors.hasAttrValue(attributeNode.value);\n    case \"|=\":\n    case \"^=\":\n      return selectors.hasAttrPrefix(attributeNode.value);\n    default:\n      return true;\n  }\n}\n\n/*@__NO_SIDE_EFFECTS__*/\nfunction isClassFound(\n  classNode: selectorParser.ClassName,\n  selectors: ExtractorResultSets,\n): boolean {\n  return selectors.hasClass(classNode.value);\n}\n\n/*@__NO_SIDE_EFFECTS__*/\nfunction isIdentifierFound(\n  identifierNode: selectorParser.Identifier,\n  selectors: ExtractorResultSets,\n): boolean {\n  return selectors.hasId(identifierNode.value);\n}\n\n/*@__NO_SIDE_EFFECTS__*/\nfunction isTagFound(\n  tagNode: selectorParser.Tag,\n  selectors: ExtractorResultSets,\n): boolean {\n  return selectors.hasTag(tagNode.value);\n}\n\n/*@__NO_SIDE_EFFECTS__*/\nfunction isInPseudoClass(selector: selectorParser.Node): boolean {\n  return (\n    (selector.parent &&\n      selector.parent.type === \"pseudo\" &&\n      selector.parent.value.startsWith(\":\")) ||\n    false\n  );\n}\n\n/*@__NO_SIDE_EFFECTS__*/\nfunction isInPseudoClassWhereOrIs(selector: selectorParser.Node): boolean {\n  return (\n    (selector.parent &&\n      selector.parent.type === \"pseudo\" &&\n      (selector.parent.value === \":where\" ||\n        selector.parent.value === \":is\")) ||\n    false\n  );\n}\n\n/*@__NO_SIDE_EFFECTS__*/\nfunction isPseudoClassAtRootLevel(selector: selectorParser.Node): boolean {\n  let result = false;\n  if (\n    selector.type === \"selector\" &&\n    selector.parent?.type === \"root\" &&\n    selector.nodes.length === 1\n  ) {\n    selector.walk((node) => {\n      if (\n        node.type === \"pseudo\" &&\n        (node.value === \":where\" ||\n          node.value === \":is\" ||\n          node.value === \":has\" ||\n          node.value === \":not\")\n      ) {\n        result = true;\n      }\n    });\n  }\n  return result;\n}\n\n/*@__NO_SIDE_EFFECTS__*/\nfunction isPostCSSAtRule(node?: any): node is any {\n  return node?.type === \"atrule\";\n}\n\n/*@__NO_SIDE_EFFECTS__*/\nfunction isPostCSSRule(node?: any): node is any {\n  return node?.type === \"rule\";\n}\n\n/*@__NO_SIDE_EFFECTS__*/\nfunction isPostCSSComment(\n\t\tnode?: any,\n\t): node is any {\n  return node?.type === \"comment\";\n}\n\n/**\n * Class used to instantiate PurgeCSS and can then be used\n * to purge CSS files.\n *\n * @example\n * ```ts\n * await new PurgeCSS().purge({\n *    content: ['index.html'],\n *    css: ['css/app.css']\n * })\n * ```\n *\n * @public\n */\nclass PurgeCSS {\n  private ignore = false;\n  private atRules: AtRules = {\n    fontFace: [],\n    keyframes: [],\n  };\n\n  private usedAnimations: Set<string> = new Set();\n  private usedFontFaces: Set<string> = new Set();\n  public selectorsRemoved: Set<string> = new Set();\n  public removedNodes: any[] = [];\n  public variablesStructure: VariablesStructure = new VariablesStructure();\n\n  public options: Options = defaultOptions;\n\n  private collectDeclarationsData(declaration:  any): void {\n    const { prop, value } = declaration;\n\n    // collect css properties data\n    if (this.options.variables) {\n      const usedVariablesMatchesInDeclaration =\n        value.matchAll(/var\\((.+?)[,)]/g);\n      if (prop.startsWith(\"--\")) {\n        this.variablesStructure.addVariable(declaration);\n        this.variablesStructure.addVariableUsage(\n          declaration,\n          usedVariablesMatchesInDeclaration,\n        );\n      } else {\n        this.variablesStructure.addVariableUsageInProperties(\n          usedVariablesMatchesInDeclaration,\n        );\n      }\n    }\n\n    // collect keyframes data\n    if (this.options.keyframes) {\n      if (prop === \"animation\" || prop === \"animation-name\") {\n        for (const word of value.split(/[\\s,]+/)) {\n          this.usedAnimations.add(word);\n        }\n        return;\n      }\n    }\n\n    // collect font faces data\n    if (this.options.fontFace) {\n      if (prop === \"font-family\") {\n        for (const fontName of value.split(\",\")) {\n          const cleanedFontFace = stripQuotes(fontName.trim());\n          this.usedFontFaces.add(cleanedFontFace);\n        }\n      }\n      return;\n    }\n  }\n\n  /**\n   * Get the extractor corresponding to the extension file\n   * @param filename - Name of the file\n   * @param extractors - Array of extractors definition\n   */\n  private getFileExtractor(\n    filename: string,\n    extractors: Extractors[],\n  ): ExtractorFunction {\n    const extractorObj = extractors.find((extractor) =>\n      extractor.extensions.find((ext) => filename.endsWith(ext)),\n    );\n\n    return typeof extractorObj === \"undefined\"\n      ? this.options.defaultExtractor\n      : extractorObj.extractor;\n  }\n\n\n  /**\n   * Extract the selectors present in the passed string using a PurgeCSS extractor\n   *\n   * @param content - Array of content\n   * @param extractors - Array of extractors\n   */\n  public async extractSelectorsFromString(\n    content: RawContent[],\n    extractors: Extractors[],\n  ): Promise<ExtractorResultSets> {\n    const selectors = new ExtractorResultSets([]);\n    for (const { raw, extension } of content) {\n      const extractor = this.getFileExtractor(`.${extension}`, extractors);\n      const extractedSelectors = await extractSelectors(raw, extractor);\n      selectors.merge(extractedSelectors);\n    }\n    return selectors;\n  }\n\n  /**\n   * Evaluate at-rule and register it for future reference\n   * @param node - node of postcss AST\n   */\n  private evaluateAtRule(node:any): void {\n    // keyframes\n    if (this.options.keyframes && node.name.endsWith(\"keyframes\")) {\n      this.atRules.keyframes.push(node);\n      return;\n    }\n    // font-face\n    if (this.options.fontFace && node.name === \"font-face\" && node.nodes) {\n      for (const childNode of node.nodes) {\n        if (childNode.type === \"decl\" && childNode.prop === \"font-family\") {\n          this.atRules.fontFace.push({\n            name: stripQuotes(childNode.value),\n            node,\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Evaluate css selector and decide if it should be removed or not\n   *\n   * @param node - node of postcss AST\n   * @param selectors - selectors used in content files\n   */\n  private evaluateRule(\n    node: any,\n    selectors: ExtractorResultSets,\n  ): void {\n    // exit if is in ignoring state activated by an ignore comment\n    if (this.ignore) {\n      return;\n    }\n\n    // exit if the previous annotation is a ignore next line comment\n    const annotation = node.prev();\n    if (\n      isPostCSSComment(annotation) &&\n      isIgnoreAnnotation(annotation, \"next\")\n    ) {\n      annotation.remove();\n      return;\n    }\n\n    // exit if it is inside a keyframes\n    if (\n      node.parent &&\n      isPostCSSAtRule(node.parent) &&\n      node.parent.name.endsWith(\"keyframes\")\n    ) {\n      return;\n    }\n\n    // exit if it is not a rule\n    if (!isPostCSSRule(node)) {\n      return;\n    }\n\n    // exit if it has an ignore rule comment inside\n    if (hasIgnoreAnnotation(node)) {\n      return;\n    }\n\n    const selectorsRemovedFromRule: string[] = [];\n    // selector transformer, walk over the list of the parsed selectors twice.\n    // First pass will remove the unused selectors. It goes through\n    // pseudo-classes like :where() and :is() and remove the unused\n    // selectors inside of them, but will not remove the pseudo-classes\n    // themselves. Second pass will remove selectors containing empty\n    // :where and :is.\n    node.selector = selectorParser((selectorsParsed) => {\n      selectorsParsed.walk((selector) => {\n        if (selector.type !== \"selector\") {\n          return;\n        }\n        const keepSelector = this.shouldKeepSelector(selector, selectors);\n\n        if (!keepSelector) {\n          if (this.options.rejected) {\n            this.selectorsRemoved.add(selector.toString());\n          }\n          if (this.options.rejectedCss) {\n            selectorsRemovedFromRule.push(selector.toString());\n          }\n          selector.remove();\n        }\n      });\n\n      // removes selectors containing empty :where and :is\n      selectorsParsed.walk((selector) => {\n        if (selector.type !== \"selector\") {\n          return;\n        }\n\n        if (selector.toString() && /(:where)|(:is)/.test(selector.toString())) {\n          selector.walk((node) => {\n            if (node.type !== \"pseudo\") return;\n            if (node.value !== \":where\" && node.value !== \":is\") return;\n            if (node.nodes.length === 0) {\n              selector.remove();\n            }\n          });\n        }\n      });\n    }).processSync(node.selector);\n\n    // declarations\n    if (node.selector && typeof node.nodes !== \"undefined\") {\n      for (const childNode of node.nodes) {\n        if (childNode.type !== \"decl\") continue;\n        this.collectDeclarationsData(childNode);\n      }\n    }\n\n    // remove empty rules\n    const parent = node.parent;\n    if (!node.selector) {\n      node.remove();\n    }\n    if (isRuleEmpty(parent)) parent?.remove();\n\n    // rebuild the rule with the removed selectors and optionally its parent\n    if (this.options.rejectedCss) {\n      if (selectorsRemovedFromRule.length > 0) {\n        const clone = node.clone();\n        const parentClone = parent?.clone().removeAll().append(clone);\n        clone.selectors = selectorsRemovedFromRule;\n        const nodeToPreserve = parentClone ? parentClone : clone;\n        this.removedNodes.push(nodeToPreserve);\n      }\n    }\n  }\n\n  /**\n   * Get the purged version of the css based on the files\n   *\n   * @param cssOptions - css options, files or raw strings\n   * @param selectors - set of extracted css selectors\n   */\n  public async getPurgedCSS(\n    cssOptions: Array<string | RawCSS>,\n    selectors: ExtractorResultSets,\n  ): Promise<ResultPurge[]> {\n    const sources = [];\n\n    // resolve any globs\n    const processedOptions: Array<string | RawCSS> = [];\n    for (const option of cssOptions) {\n      if (typeof option === \"string\") {\n        throw new Error(\"PurgeCSS: string options are not supported\");\n      } else {\n        processedOptions.push(option);\n      }\n    }\n\n    for (const option of processedOptions) {\n      const cssContent =\n        typeof option === \"string\"\n          ? this.options.stdin\n            ? option\n            : null\n          : option.raw;\n      const isFromFile = typeof option === \"string\" && !this.options.stdin;\n          // @ts-ignore\n      const root = postcss.parse(cssContent, {\n        from: isFromFile ? option : undefined,\n      });\n\n      // purge unused selectors\n      this.walkThroughCSS(root, selectors);\n\n      if (this.options.fontFace) this.removeUnusedFontFaces();\n      if (this.options.keyframes) this.removeUnusedKeyframes();\n      if (this.options.variables) this.removeUnusedCSSVariables();\n\n      const postCSSResult = root.toResult({\n        map: this.options.sourceMap,\n        to:\n          typeof this.options.sourceMap === \"object\"\n            ? this.options.sourceMap.to\n            : undefined,\n      });\n      const result: any = {\n        css: postCSSResult.toString(),\n        file: typeof option === \"string\" ? option : option.name,\n      };\n\n      if (this.options.sourceMap) {\n        result.sourceMap = postCSSResult.map?.toString();\n      }\n\n      if (this.options.rejected) {\n        result.rejected = Array.from(this.selectorsRemoved);\n        this.selectorsRemoved.clear();\n      }\n\n      if (this.options.rejectedCss) {\n        result.rejectedCss = postcss\n          .root({ nodes: this.removedNodes })\n          .toString();\n      }\n\n      sources.push(result);\n    }\n    return sources;\n  }\n\n  /**\n   * Check if the keyframe is safelisted with the option safelist keyframes\n   *\n   * @param keyframesName - name of the keyframe animation\n   */\n  private isKeyframesSafelisted(keyframesName: string): boolean {\n    return this.options.safelist.keyframes.some((safelistItem) => {\n      return typeof safelistItem === \"string\"\n        ? safelistItem === keyframesName\n        : safelistItem.test(keyframesName);\n    });\n  }\n\n  /**\n   * Check if the selector is blocklisted with the option blocklist\n   *\n   * @param selector - css selector\n   */\n  private isSelectorBlocklisted(selector: string): boolean {\n    return this.options.blocklist.some((blocklistItem) => {\n      return typeof blocklistItem === \"string\"\n        ? blocklistItem === selector\n        : blocklistItem.test(selector);\n    });\n  }\n\n  /**\n   * Check if the selector is safelisted with the option safelist standard\n   *\n   * @param selector - css selector\n   */\n  private isSelectorSafelisted(selector: string): boolean {\n    const isSafelisted = this.options.safelist.standard.some((safelistItem) => {\n      return typeof safelistItem === \"string\"\n        ? safelistItem === selector\n        : safelistItem.test(selector);\n    });\n    const isPseudoElement = /^::.*/.test(selector);\n    return CSS_SAFELIST.includes(selector) || isPseudoElement || isSafelisted;\n  }\n\n  /**\n   * Check if the selector is safelisted with the option safelist deep\n   *\n   * @param selector - selector\n   */\n  private isSelectorSafelistedDeep(selector: string): boolean {\n    return this.options.safelist.deep.some((safelistItem) =>\n      safelistItem.test(selector),\n    );\n  }\n\n  /**\n   * Check if the selector is safelisted with the option safelist greedy\n   *\n   * @param selector - selector\n   */\n  private isSelectorSafelistedGreedy(selector: string): boolean {\n    return this.options.safelist.greedy.some((safelistItem) =>\n      safelistItem.test(selector),\n    );\n  }\n\n  /**\n   * Remove unused CSS\n   *\n   * @param userOptions - PurgeCSS options or path to the configuration file\n   * @returns an array of object containing the filename and the associated CSS\n   *\n   * @example Using a configuration file named purgecss.config.js\n   * ```ts\n   * const purgeCSSResults = await new PurgeCSS().purge()\n   * ```\n   *\n   * @example Using a custom path to the configuration file\n   * ```ts\n   * const purgeCSSResults = await new PurgeCSS().purge('./purgecss.config.js')\n   * ```\n   *\n   * @example Using the PurgeCSS options\n   * ```ts\n   * const purgeCSSResults = await new PurgeCSS().purge({\n   *    content: ['index.html', '**\\/*.js', '**\\/*.html', '**\\/*.vue'],\n   *    css: ['css/app.css']\n   * })\n   * ```\n   */\n  public async purge(\n    userOptions: UserDefinedOptions | string | undefined,\n  ): Promise<ResultPurge[]> {\n    this.options =\n      typeof userOptions !== \"object\"\n          // @ts-ignore\n        ? await setOptions(userOptions)\n        : {\n            ...defaultOptions,\n            ...userOptions,\n            safelist: standardizeSafelist(userOptions.safelist),\n          };\n    const { content, css, extractors, safelist } = this.options;\n\n    if (this.options.variables) {\n      this.variablesStructure.safelist = safelist.variables || [];\n    }\n\n\n    const rawFormatContents = content.filter(\n      (o) => typeof o === \"object\",\n    ) as RawContent[];\n\n\n    const cssRawSelectors = await this.extractSelectorsFromString(\n      rawFormatContents,\n      extractors,\n    );\n\n    return this.getPurgedCSS(\n      css,\n      mergeExtractorSelectors({} as any, cssRawSelectors),\n    );\n  }\n\n  /**\n   * Remove unused CSS variables\n   */\n  public removeUnusedCSSVariables(): void {\n    this.variablesStructure.removeUnused();\n  }\n\n  /**\n   * Remove unused font-faces\n   */\n  public removeUnusedFontFaces(): void {\n    for (const { name, node } of this.atRules.fontFace) {\n      if (!this.usedFontFaces.has(name)) {\n        node.remove();\n      }\n    }\n  }\n\n  /**\n   * Remove unused keyframes\n   */\n  public removeUnusedKeyframes(): void {\n    for (const node of this.atRules.keyframes) {\n      if (\n        !this.usedAnimations.has(node.params) &&\n        !this.isKeyframesSafelisted(node.params)\n      ) {\n        node.remove();\n      }\n    }\n  }\n\n  /**\n   * Transform a selector node into a string\n   */\n  private getSelectorValue(selector: selectorParser.Node): string | undefined {\n    return (\n      (selector.type === \"attribute\" && selector.attribute) || selector.value\n    );\n  }\n\n  /**\n   * Determine if the selector should be kept, based on the selectors found in the files\n   *\n   * @param selector - set of css selectors found in the content files or string\n   * @param selectorsFromExtractor - selectors in the css rule\n   *\n   * @returns true if the selector should be kept in the processed CSS\n   */\n  private shouldKeepSelector(\n    selector: selectorParser.Selector,\n    selectorsFromExtractor: ExtractorResultSets,\n  ): boolean {\n    // selectors in pseudo classes are ignored except :where() and :is(). For those pseudo-classes, we are treating the selectors inside the same way as they would be outside.\n    if (isInPseudoClass(selector) && !isInPseudoClassWhereOrIs(selector)) {\n      return true;\n    }\n\n    if (isPseudoClassAtRootLevel(selector)) {\n      return true;\n    }\n\n    // if there is any greedy safelist pattern, run all the selector parts through them\n    // if there is any match, return true\n    if (this.options.safelist.greedy.length > 0) {\n      const selectorParts = selector.nodes.map(this.getSelectorValue);\n      if (\n        selectorParts.some(\n          (selectorPart) =>\n            selectorPart && this.isSelectorSafelistedGreedy(selectorPart),\n        )\n      ) {\n        return true;\n      }\n    }\n\n    let isPresent = false;\n\n    for (const selectorNode of selector.nodes) {\n      const selectorValue = this.getSelectorValue(selectorNode);\n\n      // if the selector is safelisted with children\n      // returns true to keep all children selectors\n      if (selectorValue && this.isSelectorSafelistedDeep(selectorValue)) {\n        return true;\n      }\n\n      // The selector is found in the internal and user-defined safelist\n      if (\n        selectorValue &&\n        (CSS_SAFELIST.includes(selectorValue) ||\n          this.isSelectorSafelisted(selectorValue))\n      ) {\n        isPresent = true;\n        continue;\n      }\n\n      // The selector is present in the blocklist\n      if (selectorValue && this.isSelectorBlocklisted(selectorValue)) {\n        return false;\n      }\n\n      switch (selectorNode.type) {\n        case \"attribute\":\n          // `value` is a dynamic attribute, highly used in input element\n          // the choice is to always leave `value` as it can change based on the user\n          // idem for `checked`, `selected`, `open`\n          isPresent = [\n            ...this.options.dynamicAttributes,\n            \"value\",\n            \"checked\",\n            \"selected\",\n            \"open\",\n          ].includes(selectorNode.attribute)\n            ? true\n            : isAttributeFound(selectorNode, selectorsFromExtractor);\n          break;\n        case \"class\":\n          isPresent = isClassFound(selectorNode, selectorsFromExtractor);\n          break;\n        case \"id\":\n          isPresent = isIdentifierFound(selectorNode, selectorsFromExtractor);\n          break;\n        case \"tag\":\n          isPresent = isTagFound(selectorNode, selectorsFromExtractor);\n          break;\n        default:\n          continue;\n      }\n\n      // selector is not safelisted\n      // and it has not been found as an attribute/class/id/tag\n      if (!isPresent) {\n        return false;\n      }\n    }\n\n    return isPresent;\n  }\n\n  /**\n   * Walk through the CSS AST and remove unused CSS\n   *\n   * @param root - root node of the postcss AST\n   * @param selectors - selectors used in content files\n   */\n  public walkThroughCSS(\n    root: PostCSSRoot,\n    selectors: ExtractorResultSets,\n  ): void {\n    root.walk((node) => {\n      if (node.type === \"rule\") {\n        return this.evaluateRule(node, selectors);\n      }\n      if (node.type === \"atrule\") {\n        return this.evaluateAtRule(node);\n      }\n      if (node.type === \"comment\") {\n        if (isIgnoreAnnotation(node, \"start\")) {\n          this.ignore = true;\n          // remove ignore annotation\n          node.remove();\n        } else if (isIgnoreAnnotation(node, \"end\")) {\n          this.ignore = false;\n          // remove ignore annotation\n          node.remove();\n        }\n      }\n    });\n  }\n}\n"],
  "mappings": "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",
  "names": ["plugin", "str", "semicolon", "string", "root", "str", "str", "id", "selector", "AtRule", "Root", "string", "Rule", "Root", "AtRule", "colon", "string", "str", "Rule", "parse", "parser", "LazyResult", "Processor", "stringify", "root", "str", "root", "Root", "Rule", "AtRule", "root", "str", "parser", "parse", "Container", "Document", "MapGenerator", "parse", "Result", "stringify", "isClean", "my", "warnOnce", "LazyResult", "root", "parser", "plugin", "str", "Root", "Processor", "LazyResult", "plugin", "Root", "LazyResult", "postcss", "Processor", "parse", "AtRule", "Rule", "Root", "str", "hex", "cloneNode", "Node", "Container", "Node", "selector", "id", "Root", "Container", "str", "selector", "Container", "string", "isIdentifier", "Node", "Comment", "Node", "ID", "Node", "Node", "String", "Node", "Container", "selector", "Node", "Node", "list", "list", "Parser", "Root", "selector", "unescaped", "space", "Comment", "String", "word", "ID", "Processor", "parser", "Parser", "root", "string", "combinator", "comment", "combinator", "comment", "Comment", "ID", "Root", "String", "Processor", "word", "id", "tag", "str", "selector", "word", "node", "root", "isPseudoElement"]
}
