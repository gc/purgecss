{
  "version": 3,
  "sources": ["../../../src/cssesc/index.js", "../../../src/postcss-selector-parser/util/ensureObject.js", "../../../src/postcss-selector-parser/selectors/node.js", "../../../src/postcss-selector-parser/selectors/namespace.js"],
  "sourcesContent": ["const object = {};\r\nconst hasOwnProperty = object.hasOwnProperty;\r\nconst merge = (options, defaults) => {\r\n    if (!options) {\r\n        return defaults;\r\n    }\r\n    const result = {};\r\n    for (const key in defaults) {\r\n        // `if (defaults.hasOwnProperty(key) { \u2026 }` is not needed here, since\r\n        // only recognized option names are used.\r\n        result[key] = hasOwnProperty.call(options, key)\r\n            ? options[key]\r\n            : defaults[key];\r\n    }\r\n    return result;\r\n};\r\nconst regexAnySingleEscape = /<%= anySingleEscape %>/;\r\nconst regexSingleEscape = /<%= singleEscapes %>/;\r\nconst regexAlwaysEscape = /['\"\\\\]/;\r\nconst regexExcessiveSpaces = /(^|\\\\+)?(\\\\[A-F0-9]{1,6})\\x20(?![a-fA-F0-9\\x20])/g;\r\n/*@__NO_SIDE_EFFECTS__*/\r\nconst cssesc = (string, options) => {\r\n    options = merge(options, cssesc.options);\r\n    if (options.quotes != 'single' && options.quotes != 'double') {\r\n        options.quotes = 'single';\r\n    }\r\n    const quote = options.quotes == 'double' ? '\"' : '\\'';\r\n    const isIdentifier = options.isIdentifier;\r\n    const firstChar = string.charAt(0);\r\n    let output = '';\r\n    let counter = 0;\r\n    const length = string.length;\r\n    while (counter < length) {\r\n        const character = string.charAt(counter++);\r\n        let codePoint = character.charCodeAt();\r\n        let value;\r\n        // If it\u2019s not a printable ASCII character\u2026\r\n        if (codePoint < 0x20 || codePoint > 0x7E) {\r\n            if (codePoint >= 0xD800 && codePoint <= 0xDBFF && counter < length) {\r\n                // It\u2019s a high surrogate, and there is a next character.\r\n                const extra = string.charCodeAt(counter++);\r\n                if ((extra & 0xFC00) == 0xDC00) { // next character is low surrogate\r\n                    codePoint = ((codePoint & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000;\r\n                }\r\n                else {\r\n                    // It\u2019s an unmatched surrogate; only append this code unit, in case\r\n                    // the next code unit is the high surrogate of a surrogate pair.\r\n                    counter--;\r\n                }\r\n            }\r\n            value = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\r\n        }\r\n        else {\r\n            if (options.escapeEverything) {\r\n                if (regexAnySingleEscape.test(character)) {\r\n                    value = '\\\\' + character;\r\n                }\r\n                else {\r\n                    value = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\r\n                }\r\n            }\r\n            else if (/[\\t\\n\\f\\r\\x0B]/.test(character)) {\r\n                value = '\\\\' + codePoint.toString(16).toUpperCase() + ' ';\r\n            }\r\n            else if (character == '\\\\' ||\r\n                (!isIdentifier &&\r\n                    ((character == '\"' && quote == character) ||\r\n                        (character == '\\'' && quote == character))) ||\r\n                (isIdentifier && regexSingleEscape.test(character))) {\r\n                value = '\\\\' + character;\r\n            }\r\n            else {\r\n                value = character;\r\n            }\r\n        }\r\n        output += value;\r\n    }\r\n    if (isIdentifier) {\r\n        if (/^-[-\\d]/.test(output)) {\r\n            output = '\\\\-' + output.slice(1);\r\n        }\r\n        else if (/\\d/.test(firstChar)) {\r\n            output = '\\\\3' + firstChar + ' ' + output.slice(1);\r\n        }\r\n    }\r\n    // Remove spaces after `\\HEX` escapes that are not followed by a hex digit,\r\n    // since they\u2019re redundant. Note that this is only possible if the escape\r\n    // sequence isn\u2019t preceded by an odd number of backslashes.\r\n    output = output.replace(regexExcessiveSpaces, ($0, $1, $2) => {\r\n        if ($1 && $1.length % 2) {\r\n            // It\u2019s not safe to remove the space, so don\u2019t.\r\n            return $0;\r\n        }\r\n        // Strip the space.\r\n        return ($1 || '') + $2;\r\n    });\r\n    if (!isIdentifier && options.wrap) {\r\n        return quote + output + quote;\r\n    }\r\n    return output;\r\n};\r\n// Expose default options (so they can be overridden globally).\r\ncssesc.options = {\r\n    'escapeEverything': false,\r\n    'isIdentifier': false,\r\n    'quotes': 'single',\r\n    'wrap': false\r\n};\r\nexport default cssesc;\r\n", "export default function ensureObject(obj, ...props) {\r\n    while (props.length > 0) {\r\n        const prop = props.shift();\r\n        if (!obj[prop]) {\r\n            obj[prop] = {};\r\n        }\r\n        obj = obj[prop];\r\n    }\r\n}\r\n", "import { ensureObject } from \"../util\";\r\nlet cloneNode = function (obj, parent) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return obj;\r\n    }\r\n    let cloned = new obj.constructor();\r\n    for (let i in obj) {\r\n        if (!obj.hasOwnProperty(i)) {\r\n            continue;\r\n        }\r\n        let value = obj[i];\r\n        let type = typeof value;\r\n        if (i === 'parent' && type === 'object') {\r\n            if (parent) {\r\n                cloned[i] = parent;\r\n            }\r\n        }\r\n        else if (value instanceof Array) {\r\n            cloned[i] = value.map(j => cloneNode(j, cloned));\r\n        }\r\n        else {\r\n            cloned[i] = cloneNode(value, cloned);\r\n        }\r\n    }\r\n    return cloned;\r\n};\r\nexport default class Node {\r\n    constructor(opts = {}) {\r\n        Object.assign(this, opts);\r\n        this.spaces = this.spaces || {};\r\n        this.spaces.before = this.spaces.before || '';\r\n        this.spaces.after = this.spaces.after || '';\r\n    }\r\n    remove() {\r\n        if (this.parent) {\r\n            this.parent.removeChild(this);\r\n        }\r\n        this.parent = undefined;\r\n        return this;\r\n    }\r\n    replaceWith() {\r\n        if (this.parent) {\r\n            for (let index in arguments) {\r\n                this.parent.insertBefore(this, arguments[index]);\r\n            }\r\n            this.remove();\r\n        }\r\n        return this;\r\n    }\r\n    next() {\r\n        return this.parent.at(this.parent.index(this) + 1);\r\n    }\r\n    prev() {\r\n        return this.parent.at(this.parent.index(this) - 1);\r\n    }\r\n    clone(overrides = {}) {\r\n        let cloned = cloneNode(this);\r\n        for (let name in overrides) {\r\n            cloned[name] = overrides[name];\r\n        }\r\n        return cloned;\r\n    }\r\n    /**\r\n     * Some non-standard syntax doesn't follow normal escaping rules for css.\r\n     * This allows non standard syntax to be appended to an existing property\r\n     * by specifying the escaped value. By specifying the escaped value,\r\n     * illegal characters are allowed to be directly inserted into css output.\r\n     * @param {string} name the property to set\r\n     * @param {any} value the unescaped value of the property\r\n     * @param {string} valueEscaped optional. the escaped value of the property.\r\n     */\r\n    appendToPropertyAndEscape(name, value, valueEscaped) {\r\n        if (!this.raws) {\r\n            this.raws = {};\r\n        }\r\n        let originalValue = this[name];\r\n        let originalEscaped = this.raws[name];\r\n        this[name] = originalValue + value; // this may trigger a setter that updates raws, so it has to be set first.\r\n        if (originalEscaped || valueEscaped !== value) {\r\n            this.raws[name] = (originalEscaped || originalValue) + valueEscaped;\r\n        }\r\n        else {\r\n            delete this.raws[name]; // delete any escaped value that was created by the setter.\r\n        }\r\n    }\r\n    /**\r\n     * Some non-standard syntax doesn't follow normal escaping rules for css.\r\n     * This allows the escaped value to be specified directly, allowing illegal\r\n     * characters to be directly inserted into css output.\r\n     * @param {string} name the property to set\r\n     * @param {any} value the unescaped value of the property\r\n     * @param {string} valueEscaped the escaped value of the property.\r\n     */\r\n    setPropertyAndEscape(name, value, valueEscaped) {\r\n        if (!this.raws) {\r\n            this.raws = {};\r\n        }\r\n        this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.\r\n        this.raws[name] = valueEscaped;\r\n    }\r\n    /**\r\n     * When you want a value to passed through to CSS directly. This method\r\n     * deletes the corresponding raw value causing the stringifier to fallback\r\n     * to the unescaped value.\r\n     * @param {string} name the property to set.\r\n     * @param {any} value The value that is both escaped and unescaped.\r\n     */\r\n    setPropertyWithoutEscape(name, value) {\r\n        this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.\r\n        if (this.raws) {\r\n            delete this.raws[name];\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @param {number} line The number (starting with 1)\r\n     * @param {number} column The column number (starting with 1)\r\n     */\r\n    isAtPosition(line, column) {\r\n        if (this.source && this.source.start && this.source.end) {\r\n            if (this.source.start.line > line) {\r\n                return false;\r\n            }\r\n            if (this.source.end.line < line) {\r\n                return false;\r\n            }\r\n            if (this.source.start.line === line && this.source.start.column > column) {\r\n                return false;\r\n            }\r\n            if (this.source.end.line === line && this.source.end.column < column) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        return undefined;\r\n    }\r\n    stringifyProperty(name) {\r\n        return (this.raws && this.raws[name]) || this[name];\r\n    }\r\n    get rawSpaceBefore() {\r\n        let rawSpace = this.raws && this.raws.spaces && this.raws.spaces.before;\r\n        if (rawSpace === undefined) {\r\n            rawSpace = this.spaces && this.spaces.before;\r\n        }\r\n        return rawSpace || \"\";\r\n    }\r\n    set rawSpaceBefore(raw) {\r\n        ensureObject(this, \"raws\", \"spaces\");\r\n        this.raws.spaces.before = raw;\r\n    }\r\n    get rawSpaceAfter() {\r\n        let rawSpace = this.raws && this.raws.spaces && this.raws.spaces.after;\r\n        if (rawSpace === undefined) {\r\n            rawSpace = this.spaces.after;\r\n        }\r\n        return rawSpace || \"\";\r\n    }\r\n    set rawSpaceAfter(raw) {\r\n        ensureObject(this, \"raws\", \"spaces\");\r\n        this.raws.spaces.after = raw;\r\n    }\r\n    valueToString() {\r\n        return String(this.stringifyProperty(\"value\"));\r\n    }\r\n    toString() {\r\n        return [\r\n            this.rawSpaceBefore,\r\n            this.valueToString(),\r\n            this.rawSpaceAfter,\r\n        ].join('');\r\n    }\r\n}\r\n", "import cssesc from \"../../cssesc\";\r\nimport { ensureObject } from '../util';\r\nimport Node from './node';\r\nexport default class Namespace extends Node {\r\n    get namespace() {\r\n        return this._namespace;\r\n    }\r\n    set namespace(namespace) {\r\n        if (namespace === true || namespace === \"*\" || namespace === \"&\") {\r\n            this._namespace = namespace;\r\n            if (this.raws) {\r\n                delete this.raws.namespace;\r\n            }\r\n            return;\r\n        }\r\n        const escaped = cssesc(namespace, { isIdentifier: true });\r\n        this._namespace = namespace;\r\n        if (escaped !== namespace) {\r\n            ensureObject(this, \"raws\");\r\n            this.raws.namespace = escaped;\r\n        }\r\n        else if (this.raws) {\r\n            delete this.raws.namespace;\r\n        }\r\n    }\r\n    get ns() {\r\n        return this._namespace;\r\n    }\r\n    set ns(namespace) {\r\n        this.namespace = namespace;\r\n    }\r\n    get namespaceString() {\r\n        if (this.namespace) {\r\n            const ns = this.stringifyProperty(\"namespace\");\r\n            if (ns === true) {\r\n                return '';\r\n            }\r\n            else {\r\n                return ns;\r\n            }\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    }\r\n    qualifiedName(value) {\r\n        if (this.namespace) {\r\n            return `${this.namespaceString}|${value}`;\r\n        }\r\n        else {\r\n            return value;\r\n        }\r\n    }\r\n    valueToString() {\r\n        return this.qualifiedName(super.valueToString());\r\n    }\r\n}\r\n;\r\n"],
  "mappings": "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",
  "names": []
}
