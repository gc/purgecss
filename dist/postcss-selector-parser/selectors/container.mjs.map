{
  "version": 3,
  "sources": ["../../../src/postcss-selector-parser/util/ensureObject.js", "../../../src/postcss-selector-parser/selectors/node.js", "../../../src/postcss-selector-parser/selectors/types.js", "../../../src/postcss-selector-parser/selectors/container.js"],
  "sourcesContent": ["export default function ensureObject(obj, ...props) {\r\n    while (props.length > 0) {\r\n        const prop = props.shift();\r\n        if (!obj[prop]) {\r\n            obj[prop] = {};\r\n        }\r\n        obj = obj[prop];\r\n    }\r\n}\r\n", "import { ensureObject } from \"../util\";\r\nlet cloneNode = function (obj, parent) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return obj;\r\n    }\r\n    let cloned = new obj.constructor();\r\n    for (let i in obj) {\r\n        if (!obj.hasOwnProperty(i)) {\r\n            continue;\r\n        }\r\n        let value = obj[i];\r\n        let type = typeof value;\r\n        if (i === 'parent' && type === 'object') {\r\n            if (parent) {\r\n                cloned[i] = parent;\r\n            }\r\n        }\r\n        else if (value instanceof Array) {\r\n            cloned[i] = value.map(j => cloneNode(j, cloned));\r\n        }\r\n        else {\r\n            cloned[i] = cloneNode(value, cloned);\r\n        }\r\n    }\r\n    return cloned;\r\n};\r\nexport default class Node {\r\n    constructor(opts = {}) {\r\n        Object.assign(this, opts);\r\n        this.spaces = this.spaces || {};\r\n        this.spaces.before = this.spaces.before || '';\r\n        this.spaces.after = this.spaces.after || '';\r\n    }\r\n    remove() {\r\n        if (this.parent) {\r\n            this.parent.removeChild(this);\r\n        }\r\n        this.parent = undefined;\r\n        return this;\r\n    }\r\n    replaceWith() {\r\n        if (this.parent) {\r\n            for (let index in arguments) {\r\n                this.parent.insertBefore(this, arguments[index]);\r\n            }\r\n            this.remove();\r\n        }\r\n        return this;\r\n    }\r\n    next() {\r\n        return this.parent.at(this.parent.index(this) + 1);\r\n    }\r\n    prev() {\r\n        return this.parent.at(this.parent.index(this) - 1);\r\n    }\r\n    clone(overrides = {}) {\r\n        let cloned = cloneNode(this);\r\n        for (let name in overrides) {\r\n            cloned[name] = overrides[name];\r\n        }\r\n        return cloned;\r\n    }\r\n    /**\r\n     * Some non-standard syntax doesn't follow normal escaping rules for css.\r\n     * This allows non standard syntax to be appended to an existing property\r\n     * by specifying the escaped value. By specifying the escaped value,\r\n     * illegal characters are allowed to be directly inserted into css output.\r\n     * @param {string} name the property to set\r\n     * @param {any} value the unescaped value of the property\r\n     * @param {string} valueEscaped optional. the escaped value of the property.\r\n     */\r\n    appendToPropertyAndEscape(name, value, valueEscaped) {\r\n        if (!this.raws) {\r\n            this.raws = {};\r\n        }\r\n        let originalValue = this[name];\r\n        let originalEscaped = this.raws[name];\r\n        this[name] = originalValue + value; // this may trigger a setter that updates raws, so it has to be set first.\r\n        if (originalEscaped || valueEscaped !== value) {\r\n            this.raws[name] = (originalEscaped || originalValue) + valueEscaped;\r\n        }\r\n        else {\r\n            delete this.raws[name]; // delete any escaped value that was created by the setter.\r\n        }\r\n    }\r\n    /**\r\n     * Some non-standard syntax doesn't follow normal escaping rules for css.\r\n     * This allows the escaped value to be specified directly, allowing illegal\r\n     * characters to be directly inserted into css output.\r\n     * @param {string} name the property to set\r\n     * @param {any} value the unescaped value of the property\r\n     * @param {string} valueEscaped the escaped value of the property.\r\n     */\r\n    setPropertyAndEscape(name, value, valueEscaped) {\r\n        if (!this.raws) {\r\n            this.raws = {};\r\n        }\r\n        this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.\r\n        this.raws[name] = valueEscaped;\r\n    }\r\n    /**\r\n     * When you want a value to passed through to CSS directly. This method\r\n     * deletes the corresponding raw value causing the stringifier to fallback\r\n     * to the unescaped value.\r\n     * @param {string} name the property to set.\r\n     * @param {any} value The value that is both escaped and unescaped.\r\n     */\r\n    setPropertyWithoutEscape(name, value) {\r\n        this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.\r\n        if (this.raws) {\r\n            delete this.raws[name];\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @param {number} line The number (starting with 1)\r\n     * @param {number} column The column number (starting with 1)\r\n     */\r\n    isAtPosition(line, column) {\r\n        if (this.source && this.source.start && this.source.end) {\r\n            if (this.source.start.line > line) {\r\n                return false;\r\n            }\r\n            if (this.source.end.line < line) {\r\n                return false;\r\n            }\r\n            if (this.source.start.line === line && this.source.start.column > column) {\r\n                return false;\r\n            }\r\n            if (this.source.end.line === line && this.source.end.column < column) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        return undefined;\r\n    }\r\n    stringifyProperty(name) {\r\n        return (this.raws && this.raws[name]) || this[name];\r\n    }\r\n    get rawSpaceBefore() {\r\n        let rawSpace = this.raws && this.raws.spaces && this.raws.spaces.before;\r\n        if (rawSpace === undefined) {\r\n            rawSpace = this.spaces && this.spaces.before;\r\n        }\r\n        return rawSpace || \"\";\r\n    }\r\n    set rawSpaceBefore(raw) {\r\n        ensureObject(this, \"raws\", \"spaces\");\r\n        this.raws.spaces.before = raw;\r\n    }\r\n    get rawSpaceAfter() {\r\n        let rawSpace = this.raws && this.raws.spaces && this.raws.spaces.after;\r\n        if (rawSpace === undefined) {\r\n            rawSpace = this.spaces.after;\r\n        }\r\n        return rawSpace || \"\";\r\n    }\r\n    set rawSpaceAfter(raw) {\r\n        ensureObject(this, \"raws\", \"spaces\");\r\n        this.raws.spaces.after = raw;\r\n    }\r\n    valueToString() {\r\n        return String(this.stringifyProperty(\"value\"));\r\n    }\r\n    toString() {\r\n        return [\r\n            this.rawSpaceBefore,\r\n            this.valueToString(),\r\n            this.rawSpaceAfter,\r\n        ].join('');\r\n    }\r\n}\r\n", "export const TAG = 'tag';\r\nexport const STRING = 'string';\r\nexport const SELECTOR = 'selector';\r\nexport const ROOT = 'root';\r\nexport const PSEUDO = 'pseudo';\r\nexport const NESTING = 'nesting';\r\nexport const ID = 'id';\r\nexport const COMMENT = 'comment';\r\nexport const COMBINATOR = 'combinator';\r\nexport const CLASS = 'class';\r\nexport const ATTRIBUTE = 'attribute';\r\nexport const UNIVERSAL = 'universal';\r\n", "import Node from './node';\r\nimport * as types from './types';\r\nexport default class Container extends Node {\r\n    constructor(opts) {\r\n        super(opts);\r\n        if (!this.nodes) {\r\n            this.nodes = [];\r\n        }\r\n    }\r\n    append(selector) {\r\n        selector.parent = this;\r\n        this.nodes.push(selector);\r\n        return this;\r\n    }\r\n    prepend(selector) {\r\n        selector.parent = this;\r\n        this.nodes.unshift(selector);\r\n        for (let id in this.indexes) {\r\n            this.indexes[id]++;\r\n        }\r\n        return this;\r\n    }\r\n    at(index) {\r\n        return this.nodes[index];\r\n    }\r\n    index(child) {\r\n        if (typeof child === 'number') {\r\n            return child;\r\n        }\r\n        return this.nodes.indexOf(child);\r\n    }\r\n    get first() {\r\n        return this.at(0);\r\n    }\r\n    get last() {\r\n        return this.at(this.length - 1);\r\n    }\r\n    get length() {\r\n        return this.nodes.length;\r\n    }\r\n    removeChild(child) {\r\n        child = this.index(child);\r\n        this.at(child).parent = undefined;\r\n        this.nodes.splice(child, 1);\r\n        let index;\r\n        for (let id in this.indexes) {\r\n            index = this.indexes[id];\r\n            if (index >= child) {\r\n                this.indexes[id] = index - 1;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    removeAll() {\r\n        for (let node of this.nodes) {\r\n            node.parent = undefined;\r\n        }\r\n        this.nodes = [];\r\n        return this;\r\n    }\r\n    empty() {\r\n        return this.removeAll();\r\n    }\r\n    insertAfter(oldNode, newNode) {\r\n        newNode.parent = this;\r\n        let oldIndex = this.index(oldNode);\r\n        this.nodes.splice(oldIndex + 1, 0, newNode);\r\n        newNode.parent = this;\r\n        let index;\r\n        for (let id in this.indexes) {\r\n            index = this.indexes[id];\r\n            if (oldIndex < index) {\r\n                this.indexes[id] = index + 1;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    insertBefore(oldNode, newNode) {\r\n        newNode.parent = this;\r\n        let oldIndex = this.index(oldNode);\r\n        this.nodes.splice(oldIndex, 0, newNode);\r\n        newNode.parent = this;\r\n        let index;\r\n        for (let id in this.indexes) {\r\n            index = this.indexes[id];\r\n            if (index >= oldIndex) {\r\n                this.indexes[id] = index + 1;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    _findChildAtPosition(line, col) {\r\n        let found = undefined;\r\n        this.each(node => {\r\n            if (node.atPosition) {\r\n                let foundChild = node.atPosition(line, col);\r\n                if (foundChild) {\r\n                    found = foundChild;\r\n                    return false;\r\n                }\r\n            }\r\n            else if (node.isAtPosition(line, col)) {\r\n                found = node;\r\n                return false;\r\n            }\r\n        });\r\n        return found;\r\n    }\r\n    /**\r\n     * Return the most specific node at the line and column number given.\r\n     * The source location is based on the original parsed location, locations aren't\r\n     * updated as selector nodes are mutated.\r\n     *\r\n     * Note that this location is relative to the location of the first character\r\n     * of the selector, and not the location of the selector in the overall document\r\n     * when used in conjunction with postcss.\r\n     *\r\n     * If not found, returns undefined.\r\n     * @param {number} line The line number of the node to find. (1-based index)\r\n     * @param {number} col  The column number of the node to find. (1-based index)\r\n     */\r\n    atPosition(line, col) {\r\n        if (this.isAtPosition(line, col)) {\r\n            return this._findChildAtPosition(line, col) || this;\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n    _inferEndPosition() {\r\n        if (this.last && this.last.source && this.last.source.end) {\r\n            this.source = this.source || {};\r\n            this.source.end = this.source.end || {};\r\n            Object.assign(this.source.end, this.last.source.end);\r\n        }\r\n    }\r\n    each(callback) {\r\n        if (!this.lastEach) {\r\n            this.lastEach = 0;\r\n        }\r\n        if (!this.indexes) {\r\n            this.indexes = {};\r\n        }\r\n        this.lastEach++;\r\n        let id = this.lastEach;\r\n        this.indexes[id] = 0;\r\n        if (!this.length) {\r\n            return undefined;\r\n        }\r\n        let index, result;\r\n        while (this.indexes[id] < this.length) {\r\n            index = this.indexes[id];\r\n            result = callback(this.at(index), index);\r\n            if (result === false) {\r\n                break;\r\n            }\r\n            this.indexes[id] += 1;\r\n        }\r\n        delete this.indexes[id];\r\n        if (result === false) {\r\n            return false;\r\n        }\r\n    }\r\n    walk(callback) {\r\n        return this.each((node, i) => {\r\n            let result = callback(node, i);\r\n            if (result !== false && node.length) {\r\n                result = node.walk(callback);\r\n            }\r\n            if (result === false) {\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n    walkAttributes(callback) {\r\n        return this.walk((selector) => {\r\n            if (selector.type === types.ATTRIBUTE) {\r\n                return callback.call(this, selector);\r\n            }\r\n        });\r\n    }\r\n    walkClasses(callback) {\r\n        return this.walk((selector) => {\r\n            if (selector.type === types.CLASS) {\r\n                return callback.call(this, selector);\r\n            }\r\n        });\r\n    }\r\n    walkCombinators(callback) {\r\n        return this.walk((selector) => {\r\n            if (selector.type === types.COMBINATOR) {\r\n                return callback.call(this, selector);\r\n            }\r\n        });\r\n    }\r\n    walkComments(callback) {\r\n        return this.walk((selector) => {\r\n            if (selector.type === types.COMMENT) {\r\n                return callback.call(this, selector);\r\n            }\r\n        });\r\n    }\r\n    walkIds(callback) {\r\n        return this.walk((selector) => {\r\n            if (selector.type === types.ID) {\r\n                return callback.call(this, selector);\r\n            }\r\n        });\r\n    }\r\n    walkNesting(callback) {\r\n        return this.walk(selector => {\r\n            if (selector.type === types.NESTING) {\r\n                return callback.call(this, selector);\r\n            }\r\n        });\r\n    }\r\n    walkPseudos(callback) {\r\n        return this.walk((selector) => {\r\n            if (selector.type === types.PSEUDO) {\r\n                return callback.call(this, selector);\r\n            }\r\n        });\r\n    }\r\n    walkTags(callback) {\r\n        return this.walk((selector) => {\r\n            if (selector.type === types.TAG) {\r\n                return callback.call(this, selector);\r\n            }\r\n        });\r\n    }\r\n    walkUniversals(callback) {\r\n        return this.walk((selector) => {\r\n            if (selector.type === types.UNIVERSAL) {\r\n                return callback.call(this, selector);\r\n            }\r\n        });\r\n    }\r\n    split(callback) {\r\n        let current = [];\r\n        return this.reduce((memo, node, index) => {\r\n            let split = callback.call(this, node);\r\n            current.push(node);\r\n            if (split) {\r\n                memo.push(current);\r\n                current = [];\r\n            }\r\n            else if (index === this.length - 1) {\r\n                memo.push(current);\r\n            }\r\n            return memo;\r\n        }, []);\r\n    }\r\n    map(callback) {\r\n        return this.nodes.map(callback);\r\n    }\r\n    reduce(callback, memo) {\r\n        return this.nodes.reduce(callback, memo);\r\n    }\r\n    every(callback) {\r\n        return this.nodes.every(callback);\r\n    }\r\n    some(callback) {\r\n        return this.nodes.some(callback);\r\n    }\r\n    filter(callback) {\r\n        return this.nodes.filter(callback);\r\n    }\r\n    sort(callback) {\r\n        return this.nodes.sort(callback);\r\n    }\r\n    toString() {\r\n        return this.map(String).join('');\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
