{
  "version": 3,
  "sources": ["../../../src/postcss-selector-parser/util/ensureObject.js", "../../../src/postcss-selector-parser/selectors/node.js", "../../../src/postcss-selector-parser/selectors/types.js", "../../../src/postcss-selector-parser/selectors/id.js"],
  "sourcesContent": ["export default function ensureObject(obj, ...props) {\r\n    while (props.length > 0) {\r\n        const prop = props.shift();\r\n        if (!obj[prop]) {\r\n            obj[prop] = {};\r\n        }\r\n        obj = obj[prop];\r\n    }\r\n}\r\n", "import { ensureObject } from \"../util\";\r\nlet cloneNode = function (obj, parent) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return obj;\r\n    }\r\n    let cloned = new obj.constructor();\r\n    for (let i in obj) {\r\n        if (!obj.hasOwnProperty(i)) {\r\n            continue;\r\n        }\r\n        let value = obj[i];\r\n        let type = typeof value;\r\n        if (i === 'parent' && type === 'object') {\r\n            if (parent) {\r\n                cloned[i] = parent;\r\n            }\r\n        }\r\n        else if (value instanceof Array) {\r\n            cloned[i] = value.map(j => cloneNode(j, cloned));\r\n        }\r\n        else {\r\n            cloned[i] = cloneNode(value, cloned);\r\n        }\r\n    }\r\n    return cloned;\r\n};\r\nexport default class Node {\r\n    constructor(opts = {}) {\r\n        Object.assign(this, opts);\r\n        this.spaces = this.spaces || {};\r\n        this.spaces.before = this.spaces.before || '';\r\n        this.spaces.after = this.spaces.after || '';\r\n    }\r\n    remove() {\r\n        if (this.parent) {\r\n            this.parent.removeChild(this);\r\n        }\r\n        this.parent = undefined;\r\n        return this;\r\n    }\r\n    replaceWith() {\r\n        if (this.parent) {\r\n            for (let index in arguments) {\r\n                this.parent.insertBefore(this, arguments[index]);\r\n            }\r\n            this.remove();\r\n        }\r\n        return this;\r\n    }\r\n    next() {\r\n        return this.parent.at(this.parent.index(this) + 1);\r\n    }\r\n    prev() {\r\n        return this.parent.at(this.parent.index(this) - 1);\r\n    }\r\n    clone(overrides = {}) {\r\n        let cloned = cloneNode(this);\r\n        for (let name in overrides) {\r\n            cloned[name] = overrides[name];\r\n        }\r\n        return cloned;\r\n    }\r\n    /**\r\n     * Some non-standard syntax doesn't follow normal escaping rules for css.\r\n     * This allows non standard syntax to be appended to an existing property\r\n     * by specifying the escaped value. By specifying the escaped value,\r\n     * illegal characters are allowed to be directly inserted into css output.\r\n     * @param {string} name the property to set\r\n     * @param {any} value the unescaped value of the property\r\n     * @param {string} valueEscaped optional. the escaped value of the property.\r\n     */\r\n    appendToPropertyAndEscape(name, value, valueEscaped) {\r\n        if (!this.raws) {\r\n            this.raws = {};\r\n        }\r\n        let originalValue = this[name];\r\n        let originalEscaped = this.raws[name];\r\n        this[name] = originalValue + value; // this may trigger a setter that updates raws, so it has to be set first.\r\n        if (originalEscaped || valueEscaped !== value) {\r\n            this.raws[name] = (originalEscaped || originalValue) + valueEscaped;\r\n        }\r\n        else {\r\n            delete this.raws[name]; // delete any escaped value that was created by the setter.\r\n        }\r\n    }\r\n    /**\r\n     * Some non-standard syntax doesn't follow normal escaping rules for css.\r\n     * This allows the escaped value to be specified directly, allowing illegal\r\n     * characters to be directly inserted into css output.\r\n     * @param {string} name the property to set\r\n     * @param {any} value the unescaped value of the property\r\n     * @param {string} valueEscaped the escaped value of the property.\r\n     */\r\n    setPropertyAndEscape(name, value, valueEscaped) {\r\n        if (!this.raws) {\r\n            this.raws = {};\r\n        }\r\n        this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.\r\n        this.raws[name] = valueEscaped;\r\n    }\r\n    /**\r\n     * When you want a value to passed through to CSS directly. This method\r\n     * deletes the corresponding raw value causing the stringifier to fallback\r\n     * to the unescaped value.\r\n     * @param {string} name the property to set.\r\n     * @param {any} value The value that is both escaped and unescaped.\r\n     */\r\n    setPropertyWithoutEscape(name, value) {\r\n        this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.\r\n        if (this.raws) {\r\n            delete this.raws[name];\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @param {number} line The number (starting with 1)\r\n     * @param {number} column The column number (starting with 1)\r\n     */\r\n    isAtPosition(line, column) {\r\n        if (this.source && this.source.start && this.source.end) {\r\n            if (this.source.start.line > line) {\r\n                return false;\r\n            }\r\n            if (this.source.end.line < line) {\r\n                return false;\r\n            }\r\n            if (this.source.start.line === line && this.source.start.column > column) {\r\n                return false;\r\n            }\r\n            if (this.source.end.line === line && this.source.end.column < column) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        return undefined;\r\n    }\r\n    stringifyProperty(name) {\r\n        return (this.raws && this.raws[name]) || this[name];\r\n    }\r\n    get rawSpaceBefore() {\r\n        let rawSpace = this.raws && this.raws.spaces && this.raws.spaces.before;\r\n        if (rawSpace === undefined) {\r\n            rawSpace = this.spaces && this.spaces.before;\r\n        }\r\n        return rawSpace || \"\";\r\n    }\r\n    set rawSpaceBefore(raw) {\r\n        ensureObject(this, \"raws\", \"spaces\");\r\n        this.raws.spaces.before = raw;\r\n    }\r\n    get rawSpaceAfter() {\r\n        let rawSpace = this.raws && this.raws.spaces && this.raws.spaces.after;\r\n        if (rawSpace === undefined) {\r\n            rawSpace = this.spaces.after;\r\n        }\r\n        return rawSpace || \"\";\r\n    }\r\n    set rawSpaceAfter(raw) {\r\n        ensureObject(this, \"raws\", \"spaces\");\r\n        this.raws.spaces.after = raw;\r\n    }\r\n    valueToString() {\r\n        return String(this.stringifyProperty(\"value\"));\r\n    }\r\n    toString() {\r\n        return [\r\n            this.rawSpaceBefore,\r\n            this.valueToString(),\r\n            this.rawSpaceAfter,\r\n        ].join('');\r\n    }\r\n}\r\n", "export const TAG = 'tag';\r\nexport const STRING = 'string';\r\nexport const SELECTOR = 'selector';\r\nexport const ROOT = 'root';\r\nexport const PSEUDO = 'pseudo';\r\nexport const NESTING = 'nesting';\r\nexport const ID = 'id';\r\nexport const COMMENT = 'comment';\r\nexport const COMBINATOR = 'combinator';\r\nexport const CLASS = 'class';\r\nexport const ATTRIBUTE = 'attribute';\r\nexport const UNIVERSAL = 'universal';\r\n", "import Node from './node';\r\nimport { ID as IDType } from './types';\r\nexport default class ID extends Node {\r\n    constructor(opts) {\r\n        super(opts);\r\n        this.type = IDType;\r\n    }\r\n    valueToString() {\r\n        return '#' + super.valueToString();\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["ID"]
}
