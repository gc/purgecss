{
  "version": 3,
  "sources": ["../../../src/postcss-selector-parser/util/unesc.js"],
  "sourcesContent": ["// Many thanks for this post which made this migration much easier.\r\n// https://mathiasbynens.be/notes/css-escapes\r\n/**\r\n *\r\n * @param {string} str\r\n * @returns {[string, number]|undefined}\r\n */\r\nfunction gobbleHex(str) {\r\n    const lower = str.toLowerCase();\r\n    let hex = '';\r\n    let spaceTerminated = false;\r\n    for (let i = 0; i < 6 && lower[i] !== undefined; i++) {\r\n        const code = lower.charCodeAt(i);\r\n        // check to see if we are dealing with a valid hex char [a-f|0-9]\r\n        const valid = (code >= 97 && code <= 102) || (code >= 48 && code <= 57);\r\n        // https://drafts.csswg.org/css-syntax/#consume-escaped-code-point\r\n        spaceTerminated = code === 32;\r\n        if (!valid) {\r\n            break;\r\n        }\r\n        hex += lower[i];\r\n    }\r\n    if (hex.length === 0) {\r\n        return undefined;\r\n    }\r\n    const codePoint = parseInt(hex, 16);\r\n    const isSurrogate = codePoint >= 0xD800 && codePoint <= 0xDFFF;\r\n    // Add special case for\r\n    // \"If this number is zero, or is for a surrogate, or is greater than the maximum allowed code point\"\r\n    // https://drafts.csswg.org/css-syntax/#maximum-allowed-code-point\r\n    if (isSurrogate || codePoint === 0x0000 || codePoint > 0x10FFFF) {\r\n        return ['\\uFFFD', hex.length + (spaceTerminated ? 1 : 0)];\r\n    }\r\n    return [\r\n        String.fromCodePoint(codePoint),\r\n        hex.length + (spaceTerminated ? 1 : 0),\r\n    ];\r\n}\r\nconst CONTAINS_ESCAPE = /\\\\/;\r\nexport default function unesc(str) {\r\n    let needToProcess = CONTAINS_ESCAPE.test(str);\r\n    if (!needToProcess) {\r\n        return str;\r\n    }\r\n    let ret = \"\";\r\n    for (let i = 0; i < str.length; i++) {\r\n        if ((str[i] === \"\\\\\")) {\r\n            const gobbled = gobbleHex(str.slice(i + 1, i + 7));\r\n            if (gobbled !== undefined) {\r\n                ret += gobbled[0];\r\n                i += gobbled[1];\r\n                continue;\r\n            }\r\n            // Retain a pair of \\\\ if double escaped `\\\\\\\\`\r\n            // https://github.com/postcss/postcss-selector-parser/commit/268c9a7656fb53f543dc620aa5b73a30ec3ff20e\r\n            if (str[i + 1] === \"\\\\\") {\r\n                ret += \"\\\\\";\r\n                i++;\r\n                continue;\r\n            }\r\n            // if \\\\ is at the end of the string retain it\r\n            // https://github.com/postcss/postcss-selector-parser/commit/01a6b346e3612ce1ab20219acc26abdc259ccefb\r\n            if (str.length === i + 1) {\r\n                ret += str[i];\r\n            }\r\n            continue;\r\n        }\r\n        ret += str[i];\r\n    }\r\n    return ret;\r\n}\r\n"],
  "mappings": ";;;;AAOA,SAAS,UAAU,KAAK;AACpB,QAAM,QAAQ,IAAI,YAAY;AAC9B,MAAI,MAAM;AACV,MAAI,kBAAkB;AACtB,WAAS,IAAI,GAAG,IAAI,KAAK,MAAM,CAAC,MAAM,QAAW,KAAK;AAClD,UAAM,OAAO,MAAM,WAAW,CAAC;AAE/B,UAAM,QAAS,QAAQ,MAAM,QAAQ,OAAS,QAAQ,MAAM,QAAQ;AAEpE,sBAAkB,SAAS;AAC3B,QAAI,CAAC,OAAO;AACR;AAAA,IACJ;AACA,WAAO,MAAM,CAAC;AAAA,EAClB;AACA,MAAI,IAAI,WAAW,GAAG;AAClB,WAAO;AAAA,EACX;AACA,QAAM,YAAY,SAAS,KAAK,EAAE;AAClC,QAAM,cAAc,aAAa,SAAU,aAAa;AAIxD,MAAI,eAAe,cAAc,KAAU,YAAY,SAAU;AAC7D,WAAO,CAAC,UAAU,IAAI,UAAU,kBAAkB,IAAI,EAAE;AAAA,EAC5D;AACA,SAAO;AAAA,IACH,OAAO,cAAc,SAAS;AAAA,IAC9B,IAAI,UAAU,kBAAkB,IAAI;AAAA,EACxC;AACJ;AA9BS;AA+BT,IAAM,kBAAkB;AACT,SAAR,MAAuB,KAAK;AAC/B,MAAI,gBAAgB,gBAAgB,KAAK,GAAG;AAC5C,MAAI,CAAC,eAAe;AAChB,WAAO;AAAA,EACX;AACA,MAAI,MAAM;AACV,WAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,QAAK,IAAI,CAAC,MAAM,MAAO;AACnB,YAAM,UAAU,UAAU,IAAI,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC;AACjD,UAAI,YAAY,QAAW;AACvB,eAAO,QAAQ,CAAC;AAChB,aAAK,QAAQ,CAAC;AACd;AAAA,MACJ;AAGA,UAAI,IAAI,IAAI,CAAC,MAAM,MAAM;AACrB,eAAO;AACP;AACA;AAAA,MACJ;AAGA,UAAI,IAAI,WAAW,IAAI,GAAG;AACtB,eAAO,IAAI,CAAC;AAAA,MAChB;AACA;AAAA,IACJ;AACA,WAAO,IAAI,CAAC;AAAA,EAChB;AACA,SAAO;AACX;AA/BwB;",
  "names": []
}
