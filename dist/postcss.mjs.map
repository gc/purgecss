{
  "version": 3,
  "sources": ["../src/postcss/css-syntax-error.js", "../src/postcss/stringifier.js", "../src/postcss/stringify.js", "../src/postcss/symbols.js", "../src/postcss/node.js", "../src/postcss/comment.js", "../src/postcss/declaration.js", "../src/postcss/container.js", "../src/postcss/at-rule.js", "../src/postcss/root.js", "../src/postcss/list.js", "../src/postcss/rule.js", "../node_modules/.pnpm/nanoid@5.0.8/node_modules/nanoid/non-secure/index.js", "../src/postcss/input.js", "../src/postcss/tokenize.js", "../src/postcss/parser.js", "../src/postcss/parse.js", "../src/postcss/document.js", "../src/postcss/fromJSON.js", "../src/postcss/map-generator.js", "../src/postcss/warn-once.js", "../src/postcss/warning.js", "../src/postcss/result.js", "../src/postcss/no-work-result.js", "../src/postcss/processor.js", "../src/postcss/postcss.js", "../src/index.ts", "../src/constants.ts", "../src/ExtractorResultSets.ts", "../src/internal-safelist.ts", "../src/options.ts", "../src/VariablesStructure.ts", "../src/postcss.ts"],
  "sourcesContent": ["\nexport class CssSyntaxError extends Error {\n  constructor(message, line, column, source, file, plugin) {\n    super(message)\n    this.name = 'CssSyntaxError'\n    this.reason = message\n\n    if (file) {\n      this.file = file\n    }\n    if (source) {\n      this.source = source\n    }\n    if (plugin) {\n      this.plugin = plugin\n    }\n    if (typeof line !== 'undefined' && typeof column !== 'undefined') {\n      if (typeof line === 'number') {\n        this.line = line\n        this.column = column\n      } else {\n        this.line = line.line\n        this.column = line.column\n        this.endLine = column.line\n        this.endColumn = column.column\n      }\n    }\n\n    this.setMessage()\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CssSyntaxError)\n    }\n  }\n\n  setMessage() {\n    this.message = this.plugin ? this.plugin + ': ' : ''\n    this.message += this.file ? this.file : '<css input>'\n    if (typeof this.line !== 'undefined') {\n      this.message += ':' + this.line + ':' + this.column\n    }\n    this.message += ': ' + this.reason\n  }\n\n  showSourceCode() {\n      return '';\n  }\n\n  toString() {\n    let code = this.showSourceCode()\n    if (code) {\n      code = '\\n\\n' + code + '\\n'\n    }\n    return this.name + ': ' + this.message + code\n  }\n}\n", "const DEFAULT_RAW = {\n  after: '\\n',\n  beforeClose: '\\n',\n  beforeComment: '\\n',\n  beforeDecl: '\\n',\n  beforeOpen: ' ',\n  beforeRule: '\\n',\n  colon: ': ',\n  commentLeft: ' ',\n  commentRight: ' ',\n  emptyBody: '',\n  indent: '    ',\n  semicolon: false\n}\n\nfunction capitalize(str) {\n  return str[0].toUpperCase() + str.slice(1)\n}\n\nexport class Stringifier {\n  constructor(builder) {\n    this.builder = builder\n  }\n\n  atrule(node, semicolon) {\n    let name = '@' + node.name\n    const params = node.params ? this.rawValue(node, 'params') : ''\n\n    if (typeof node.raws.afterName !== 'undefined') {\n      name += node.raws.afterName\n    } else if (params) {\n      name += ' '\n    }\n\n    if (node.nodes) {\n      this.block(node, name + params)\n    } else {\n      const end = (node.raws.between || '') + (semicolon ? ';' : '')\n      this.builder(name + params + end, node)\n    }\n  }\n\n  beforeAfter(node, detect) {\n    let value\n    if (node.type === 'decl') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (node.type === 'comment') {\n      value = this.raw(node, null, 'beforeComment')\n    } else if (detect === 'before') {\n      value = this.raw(node, null, 'beforeRule')\n    } else {\n      value = this.raw(node, null, 'beforeClose')\n    }\n\n    let buf = node.parent\n    let depth = 0\n    while (buf && buf.type !== 'root') {\n      depth += 1\n      buf = buf.parent\n    }\n\n    if (value.includes('\\n')) {\n      const indent = this.raw(node, null, 'indent')\n      if (indent.length) {\n        for (let step = 0; step < depth; step++) value += indent\n      }\n    }\n\n    return value\n  }\n\n  block(node, start) {\n    const between = this.raw(node, 'between', 'beforeOpen')\n    this.builder(start + between + '{', node, 'start')\n\n    let after\n    if (node.nodes && node.nodes.length) {\n      this.body(node)\n      after = this.raw(node, 'after')\n    } else {\n      after = this.raw(node, 'after', 'emptyBody')\n    }\n\n    if (after) this.builder(after)\n    this.builder('}', node, 'end')\n  }\n\n  body(node) {\n    let last = node.nodes.length - 1\n    while (last > 0) {\n      if (node.nodes[last].type !== 'comment') break\n      last -= 1\n    }\n\n    const semicolon = this.raw(node, 'semicolon')\n    for (let i = 0; i < node.nodes.length; i++) {\n      const child = node.nodes[i]\n      const before = this.raw(child, 'before')\n      if (before) this.builder(before)\n      this.stringify(child, last !== i || semicolon)\n    }\n  }\n\n  comment(node) {\n    const left = this.raw(node, 'left', 'commentLeft')\n    const right = this.raw(node, 'right', 'commentRight')\n    this.builder('/*' + left + node.text + right + '*/', node)\n  }\n\n  decl(node, semicolon) {\n    const between = this.raw(node, 'between', 'colon')\n    let string = node.prop + between + this.rawValue(node, 'value')\n\n    if (node.important) {\n      string += node.raws.important || ' !important'\n    }\n\n    if (semicolon) string += ';'\n    this.builder(string, node)\n  }\n\n  document(node) {\n    this.body(node)\n  }\n\n  raw(node, own, detect) {\n    let value\n    if (!detect) detect = own\n\n    // Already had\n    if (own) {\n      value = node.raws[own]\n      if (typeof value !== 'undefined') return value\n    }\n\n    const parent = node.parent\n\n    if (detect === 'before') {\n      // Hack for first rule in CSS\n      if (!parent || (parent.type === 'root' && parent.first === node)) {\n        return ''\n      }\n\n      // `root` nodes in `document` should use only their own raws\n      if (parent && parent.type === 'document') {\n        return ''\n      }\n    }\n\n    // Floating child without parent\n    if (!parent) return DEFAULT_RAW[detect]\n\n    // Detect style by other nodes\n    const root = node.root()\n    if (!root.rawCache) root.rawCache = {}\n    if (typeof root.rawCache[detect] !== 'undefined') {\n      return root.rawCache[detect]\n    }\n\n    if (detect === 'before' || detect === 'after') {\n      return this.beforeAfter(node, detect)\n    } else {\n      const method = 'raw' + capitalize(detect)\n      if (this[method]) {\n        value = this[method](root, node)\n      } else {\n        root.walk(i => {\n          value = i.raws[own]\n          if (typeof value !== 'undefined') return false\n        })\n      }\n    }\n\n    if (typeof value === 'undefined') value = DEFAULT_RAW[detect]\n\n    root.rawCache[detect] = value\n    return value\n  }\n\n  rawBeforeClose(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length > 0) {\n        if (typeof i.raws.after !== 'undefined') {\n          value = i.raws.after\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeComment(root, node) {\n    let value\n    root.walkComments(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeDecl(root, node) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeRule')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeOpen(root) {\n    let value\n    root.walk(i => {\n      if (i.type !== 'decl') {\n        value = i.raws.between\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawBeforeRule(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && (i.parent !== root || root.first !== i)) {\n        if (typeof i.raws.before !== 'undefined') {\n          value = i.raws.before\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawColon(root) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.between !== 'undefined') {\n        value = i.raws.between.replace(/[^\\s:]/g, '')\n        return false\n      }\n    })\n    return value\n  }\n\n  rawEmptyBody(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length === 0) {\n        value = i.raws.after\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawIndent(root) {\n    if (root.raws.indent) return root.raws.indent\n    let value\n    root.walk(i => {\n      const p = i.parent\n      if (p && p !== root && p.parent && p.parent === root) {\n        if (typeof i.raws.before !== 'undefined') {\n          const parts = i.raws.before.split('\\n')\n          value = parts[parts.length - 1]\n          value = value.replace(/\\S/g, '')\n          return false\n        }\n      }\n    })\n    return value\n  }\n\n  rawSemicolon(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length && i.last.type === 'decl') {\n        value = i.raws.semicolon\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawValue(node, prop) {\n    const value = node[prop]\n    const raw = node.raws[prop]\n    if (raw && raw.value === value) {\n      return raw.raw\n    }\n\n    return value\n  }\n\n  root(node) {\n    this.body(node)\n    if (node.raws.after) this.builder(node.raws.after)\n  }\n\n  rule(node) {\n    this.block(node, this.rawValue(node, 'selector'))\n    if (node.raws.ownSemicolon) {\n      this.builder(node.raws.ownSemicolon, node, 'end')\n    }\n  }\n\n  stringify(node, semicolon) {\n    /* c8 ignore start */\n    if (!this[node.type]) {\n      throw new Error(\n        'Unknown AST node type ' +\n          node.type +\n          '. ' +\n          'Maybe you need to change PostCSS stringifier.'\n      )\n    }\n    /* c8 ignore stop */\n    this[node.type](node, semicolon)\n  }\n}", "\n\nimport { Stringifier } from \"./stringifier\";\n\nexport function stringify(node, builder) {\n  const str = new Stringifier(builder)\n  str.stringify(node)\n}", "\n\nexport const isClean = Symbol('isClean')\n\nexport const my = Symbol('my')\n", "import { CssSyntaxError } from \"./css-syntax-error\";\nimport { Stringifier } from \"./stringifier\";\nimport { stringify } from \"./stringify\";\nimport { isClean, my } from \"./symbols\";\n\nfunction cloneNode(obj, parent) {\n  const cloned = new obj.constructor()\n\n  for (const i in obj) {\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) {\n      /* c8 ignore next 2 */\n      continue\n    }\n    if (i === 'proxyCache') continue\n    let value = obj[i]\n    const type = typeof value\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent\n    } else if (i === 'source') {\n      cloned[i] = value\n    } else if (Array.isArray(value)) {\n      cloned[i] = value.map(j => cloneNode(j, cloned))\n    } else {\n      if (type === 'object' && value !== null) value = cloneNode(value)\n      cloned[i] = value\n    }\n  }\n\n  return cloned\n}\n\nfunction sourceOffset(inputCSS, position) {\n  // Not all custom syntaxes support `offset` in `source.start` and `source.end`\n  if (\n    position &&\n    typeof position.offset !== 'undefined'\n  ) {\n    return position.offset;\n  }\n\n  let column = 1\n  let line = 1\n  let offset = 0\n\n  for (let i = 0; i < inputCSS.length; i++) {\n    if (line === position.line && column === position.column) {\n      offset = i\n      break\n    }\n\n    if (inputCSS[i] === '\\n') {\n      column = 1\n      line += 1\n    } else {\n      column += 1\n    }\n  }\n\n  return offset\n}\n\nexport class Node {\n  constructor(defaults = {}) {\n    this.raws = {}\n    this[isClean] = false\n    this[my] = true\n\n    for (const name in defaults) {\n      if (name === 'nodes') {\n        this.nodes = []\n        for (const node of defaults[name]) {\n          if (typeof node.clone === 'function') {\n            this.append(node.clone())\n          } else {\n            this.append(node)\n          }\n        }\n      } else {\n        this[name] = defaults[name]\n      }\n    }\n  }\n\n  addToError(error) {\n    error.postcssNode = this\n    if (error.stack && this.source && /\\n\\s{4}at /.test(error.stack)) {\n      const s = this.source\n      error.stack = error.stack.replace(\n        /\\n\\s{4}at /,\n        `$&${s.input.from}:${s.start.line}:${s.start.column}$&`\n      )\n    }\n    return error\n  }\n\n  after(add) {\n    this.parent.insertAfter(this, add)\n    return this\n  }\n\n  assign(overrides = {}) {\n    for (const name in overrides) {\n      this[name] = overrides[name]\n    }\n    return this\n  }\n\n  before(add) {\n    this.parent.insertBefore(this, add)\n    return this\n  }\n\n  cleanRaws(keepBetween) {\n    delete this.raws.before\n    delete this.raws.after\n    if (!keepBetween) delete this.raws.between\n  }\n\n  clone(overrides = {}) {\n    const cloned = cloneNode(this)\n    for (const name in overrides) {\n      cloned[name] = overrides[name]\n    }\n    return cloned\n  }\n\n  cloneAfter(overrides = {}) {\n    const cloned = this.clone(overrides)\n    this.parent.insertAfter(this, cloned)\n    return cloned\n  }\n\n  cloneBefore(overrides = {}) {\n    const cloned = this.clone(overrides)\n    this.parent.insertBefore(this, cloned)\n    return cloned\n  }\n\n  error(message, opts = {}) {\n    if (this.source) {\n      const { end, start } = this.rangeBy(opts)\n      return this.source.input.error(\n        message,\n        { column: start.column, line: start.line },\n        { column: end.column, line: end.line },\n        opts\n      )\n    }\n    return new CssSyntaxError(message)\n  }\n\n  getProxyProcessor() {\n    return {\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else {\n          return node[prop]\n        }\n      },\n\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (\n          prop === 'prop' ||\n          prop === 'value' ||\n          prop === 'name' ||\n          prop === 'params' ||\n          prop === 'important' ||\n          /* c8 ignore next */\n          prop === 'text'\n        ) {\n          node.markDirty()\n        }\n        return true\n      }\n    }\n  }\n\n  /* c8 ignore next 3 */\n  markClean() {\n    this[isClean] = true\n  }\n\n  markDirty() {\n    if (this[isClean]) {\n      this[isClean] = false\n      let next = this\n      while ((next = next.parent)) {\n        next[isClean] = false\n      }\n    }\n  }\n\n  next() {\n    if (!this.parent) return undefined\n    const index = this.parent.index(this)\n    return this.parent.nodes[index + 1]\n  }\n\n  positionBy(opts) {\n    let pos = this.source.start\n    if (opts.index) {\n      pos = this.positionInside(opts.index)\n    } else if (opts.word) {\n      const stringRepresentation = this.source.input.css.slice(\n        sourceOffset(this.source.input.css, this.source.start),\n        sourceOffset(this.source.input.css, this.source.end)\n      )\n      const index = stringRepresentation.indexOf(opts.word)\n      if (index !== -1) pos = this.positionInside(index)\n    }\n    return pos\n  }\n\n  positionInside(index) {\n    let column = this.source.start.column\n    let line = this.source.start.line\n    const offset = sourceOffset(this.source.input.css, this.source.start)\n    const end = offset + index\n\n    for (let i = offset; i < end; i++) {\n      if (this.source.input.css[i] === '\\n') {\n        column = 1\n        line += 1\n      } else {\n        column += 1\n      }\n    }\n\n    return { column, line }\n  }\n\n  prev() {\n    if (!this.parent) return undefined\n    const index = this.parent.index(this)\n    return this.parent.nodes[index - 1]\n  }\n\n  rangeBy(opts) {\n    let start = {\n      column: this.source.start.column,\n      line: this.source.start.line\n    }\n    let end = this.source.end\n      ? {\n          column: this.source.end.column + 1,\n          line: this.source.end.line\n        }\n      : {\n          column: start.column + 1,\n          line: start.line\n        }\n\n    if (opts.word) {\n      const stringRepresentation = this.source.input.css.slice(\n        sourceOffset(this.source.input.css, this.source.start),\n        sourceOffset(this.source.input.css, this.source.end)\n      )\n      const index = stringRepresentation.indexOf(opts.word)\n      if (index !== -1) {\n        start = this.positionInside(index)\n        end = this.positionInside(\n          index + opts.word.length,\n        )\n      }\n    } else {\n      if (opts.start) {\n        start = {\n          column: opts.start.column,\n          line: opts.start.line\n        }\n      } else if (opts.index) {\n        start = this.positionInside(opts.index)\n      }\n\n      if (opts.end) {\n        end = {\n          column: opts.end.column,\n          line: opts.end.line\n        }\n      } else if (typeof opts.endIndex === 'number') {\n        end = this.positionInside(opts.endIndex)\n      } else if (opts.index) {\n        end = this.positionInside(opts.index + 1)\n      }\n    }\n\n    if (\n      end.line < start.line ||\n      (end.line === start.line && end.column <= start.column)\n    ) {\n      end = { column: start.column + 1, line: start.line }\n    }\n\n    return { end, start }\n  }\n\n  raw(prop, defaultType) {\n    const str = new Stringifier()\n    return str.raw(this, prop, defaultType)\n  }\n\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this)\n    }\n    this.parent = undefined\n    return this\n  }\n\n  replaceWith(...nodes) {\n    if (this.parent) {\n      let bookmark = this\n      let foundSelf = false\n      for (const node of nodes) {\n        if (node === this) {\n          foundSelf = true\n        } else if (foundSelf) {\n          this.parent.insertAfter(bookmark, node)\n          bookmark = node\n        } else {\n          this.parent.insertBefore(bookmark, node)\n        }\n      }\n\n      if (!foundSelf) {\n        this.remove()\n      }\n    }\n\n    return this\n  }\n\n  root() {\n    let result = this\n    while (result.parent && result.parent.type !== 'document') {\n      result = result.parent\n    }\n    return result\n  }\n\n  toJSON(_, inputs) {\n    const fixed = {}\n    const emitInputs = inputs == null\n    inputs = inputs || new Map()\n    let inputsNextIndex = 0\n\n    for (const name in this) {\n      if (!Object.prototype.hasOwnProperty.call(this, name)) {\n        /* c8 ignore next 2 */\n        continue\n      }\n      if (name === 'parent' || name === 'proxyCache') continue\n      const value = this[name]\n\n      if (Array.isArray(value)) {\n        fixed[name] = value.map(i => {\n          if (typeof i === 'object' && i.toJSON) {\n            return i.toJSON(null, inputs)\n          } else {\n            return i\n          }\n        })\n      } else if (typeof value === 'object' && value.toJSON) {\n        fixed[name] = value.toJSON(null, inputs)\n      } else if (name === 'source') {\n        let inputId = inputs.get(value.input)\n        if (inputId == null) {\n          inputId = inputsNextIndex\n          inputs.set(value.input, inputsNextIndex)\n          inputsNextIndex++\n        }\n        fixed[name] = {\n          end: value.end,\n          inputId,\n          start: value.start\n        }\n      } else {\n        fixed[name] = value\n      }\n    }\n\n    if (emitInputs) {\n      fixed.inputs = [...inputs.keys()].map(input => input.toJSON())\n    }\n\n    return fixed\n  }\n\n  toProxy() {\n    if (!this.proxyCache) {\n      this.proxyCache = new Proxy(this, this.getProxyProcessor())\n    }\n    return this.proxyCache\n  }\n\n  toString(stringifier = stringify) {\n    if (stringifier.stringify) stringifier = stringifier.stringify\n    let result = ''\n    stringifier(this, i => {\n      result += i\n    })\n    return result\n  }\n\n  warn(result, text, opts) {\n    const data = { node: this }\n    for (const i in opts) data[i] = opts[i]\n    return result.warn(text, data)\n  }\n\n  get proxyOf() {\n    return this\n  }\n}", "import { Node } from './node';\n\nexport class Comment extends Node {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'comment'\n  }\n}", "import { Node } from \"./node.js\";\n\nexport class Declaration extends Node {\n  constructor(defaults) {\n    if (\n      defaults &&\n      typeof defaults.value !== 'undefined' &&\n      typeof defaults.value !== 'string'\n    ) {\n      defaults = { ...defaults, value: String(defaults.value) }\n    }\n    super(defaults)\n    this.type = 'decl'\n  }\n\n  get variable() {\n    return this.prop.startsWith('--') || this.prop[0] === '$'\n  }\n}\n", "\n\nimport { Comment } from './comment';\nimport { Declaration } from './declaration';\nimport { isClean, my } from \"./symbols\";\nimport { Node } from \"./node\";\n\nlet AtRule, parse, Root, Rule\n\nfunction cleanSource(nodes) {\n  return nodes.map(i => {\n    if (i.nodes) i.nodes = cleanSource(i.nodes)\n    delete i.source\n    return i\n  })\n}\n\nfunction markTreeDirty(node) {\n  node[isClean] = false\n  if (node.proxyOf.nodes) {\n    for (const i of node.proxyOf.nodes) {\n      markTreeDirty(i)\n    }\n  }\n}\n\nexport class Container extends Node {\n  append(...children) {\n    for (const child of children) {\n      const nodes = this.normalize(child, this.last)\n      for (const node of nodes) this.proxyOf.nodes.push(node)\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  cleanRaws(keepBetween) {\n    super.cleanRaws(keepBetween)\n    if (this.nodes) {\n      for (const node of this.nodes) node.cleanRaws(keepBetween)\n    }\n  }\n\n  each(callback) {\n    if (!this.proxyOf.nodes) return undefined\n    const iterator = this.getIterator()\n\n    let index, result\n    while (this.indexes[iterator] < this.proxyOf.nodes.length) {\n      index = this.indexes[iterator]\n      result = callback(this.proxyOf.nodes[index], index)\n      if (result === false) break\n\n      this.indexes[iterator] += 1\n    }\n\n    delete this.indexes[iterator]\n    return result\n  }\n\n  every(condition) {\n    return this.nodes.every(condition)\n  }\n\n  getIterator() {\n    if (!this.lastEach) this.lastEach = 0\n    if (!this.indexes) this.indexes = {}\n\n    this.lastEach += 1\n    const iterator = this.lastEach\n    this.indexes[iterator] = 0\n\n    return iterator\n  }\n\n  getProxyProcessor() {\n    return {\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (!node[prop]) {\n          return node[prop]\n        } else if (\n          prop === 'each' ||\n          (typeof prop === 'string' && prop.startsWith('walk'))\n        ) {\n          return (...args) => {\n            return node[prop](\n              ...args.map(i => {\n                if (typeof i === 'function') {\n                  return (child, index) => i(child.toProxy(), index)\n                } else {\n                  return i\n                }\n              })\n            )\n          }\n        } else if (prop === 'every' || prop === 'some') {\n          return cb => {\n            return node[prop]((child, ...other) =>\n              cb(child.toProxy(), ...other)\n            )\n          }\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else if (prop === 'nodes') {\n          return node.nodes.map(i => i.toProxy())\n        } else if (prop === 'first' || prop === 'last') {\n          return node[prop].toProxy()\n        } else {\n          return node[prop]\n        }\n      },\n\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (prop === 'name' || prop === 'params' || prop === 'selector') {\n          node.markDirty()\n        }\n        return true\n      }\n    }\n  }\n\n  index(child) {\n    if (typeof child === 'number') return child\n    if (child.proxyOf) child = child.proxyOf\n    return this.proxyOf.nodes.indexOf(child)\n  }\n\n  insertAfter(exist, add) {\n    let existIndex = this.index(exist)\n    const nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse()\n    existIndex = this.index(exist)\n    for (const node of nodes) this.proxyOf.nodes.splice(existIndex + 1, 0, node)\n\n    let index\n    for (const id in this.indexes) {\n      index = this.indexes[id]\n      if (existIndex < index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  insertBefore(exist, add) {\n    let existIndex = this.index(exist)\n    const type = existIndex === 0 ? 'prepend' : false\n    const nodes = this.normalize(\n      add,\n      this.proxyOf.nodes[existIndex],\n      type\n    ).reverse()\n    existIndex = this.index(exist)\n    for (const node of nodes) this.proxyOf.nodes.splice(existIndex, 0, node)\n\n    let index\n    for (const id in this.indexes) {\n      index = this.indexes[id]\n      if (existIndex <= index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  normalize(nodes, sample) {\n    if (typeof nodes === 'string') {\n      nodes = cleanSource(parse(nodes).nodes)\n    } else if (typeof nodes === 'undefined') {\n      nodes = []\n    } else if (Array.isArray(nodes)) {\n      nodes = nodes.slice(0)\n      for (const i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type === 'root' && this.type !== 'document') {\n      nodes = nodes.nodes.slice(0)\n      for (const i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type) {\n      nodes = [nodes]\n    } else if (nodes.prop) {\n      if (typeof nodes.value === 'undefined') {\n        throw new Error('Value field is missed in node creation')\n      } else if (typeof nodes.value !== 'string') {\n        nodes.value = String(nodes.value)\n      }\n      nodes = [new Declaration(nodes)]\n    } else if (nodes.selector || nodes.selectors) {\n      nodes = [new Rule(nodes)]\n    } else if (nodes.name) {\n      nodes = [new AtRule(nodes)]\n    } else if (nodes.text) {\n      nodes = [new Comment(nodes)]\n    } else {\n      throw new Error('Unknown node type in node creation')\n    }\n\n    const processed = nodes.map(i => {\n      /* c8 ignore next */\n      if (!i[my]) Container.rebuild(i)\n      i = i.proxyOf\n      if (i.parent) i.parent.removeChild(i)\n      if (i[isClean]) markTreeDirty(i)\n\n      if (!i.raws) i.raws = {}\n      if (typeof i.raws.before === 'undefined') {\n        if (sample && typeof sample.raws.before !== 'undefined') {\n          i.raws.before = sample.raws.before.replace(/\\S/g, '')\n        }\n      }\n      i.parent = this.proxyOf\n      return i\n    })\n\n    return processed\n  }\n\n  prepend(...children) {\n    children = children.reverse()\n    for (const child of children) {\n      const nodes = this.normalize(child, this.first, 'prepend').reverse()\n      for (const node of nodes) this.proxyOf.nodes.unshift(node)\n      for (const id in this.indexes) {\n        this.indexes[id] = this.indexes[id] + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  push(child) {\n    child.parent = this\n    this.proxyOf.nodes.push(child)\n    return this\n  }\n\n  removeAll() {\n    for (const node of this.proxyOf.nodes) node.parent = undefined\n    this.proxyOf.nodes = []\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeChild(child) {\n    child = this.index(child)\n    this.proxyOf.nodes[child].parent = undefined\n    this.proxyOf.nodes.splice(child, 1)\n\n    let index\n    for (const id in this.indexes) {\n      index = this.indexes[id]\n      if (index >= child) {\n        this.indexes[id] = index - 1\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  replaceValues(pattern, opts, callback) {\n    if (!callback) {\n      callback = opts\n      opts = {}\n    }\n\n    this.walkDecls(decl => {\n      if (opts.props && !opts.props.includes(decl.prop)) return\n      if (opts.fast && !decl.value.includes(opts.fast)) return\n\n      decl.value = decl.value.replace(pattern, callback)\n    })\n\n    this.markDirty()\n\n    return this\n  }\n\n  some(condition) {\n    return this.nodes.some(condition)\n  }\n\n  walk(callback) {\n    return this.each((child, i) => {\n      let result\n      try {\n        result = callback(child, i)\n      } catch (e) {\n        throw child.addToError(e)\n      }\n      if (result !== false && child.walk) {\n        result = child.walk(callback)\n      }\n\n      return result\n    })\n  }\n\n  walkAtRules(name, callback) {\n    if (!callback) {\n      callback = name\n      return this.walk((child, i) => {\n        if (child.type === 'atrule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (name instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'atrule' && name.test(child.name)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'atrule' && child.name === name) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkComments(callback) {\n    return this.walk((child, i) => {\n      if (child.type === 'comment') {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkDecls(prop, callback) {\n    if (!callback) {\n      callback = prop\n      return this.walk((child, i) => {\n        if (child.type === 'decl') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (prop instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'decl' && prop.test(child.prop)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'decl' && child.prop === prop) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkRules(selector, callback) {\n    if (!callback) {\n      callback = selector\n\n      return this.walk((child, i) => {\n        if (child.type === 'rule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (selector instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'rule' && selector.test(child.selector)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'rule' && child.selector === selector) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  get first() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[0]\n  }\n\n  get last() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1]\n  }\n}\n\nContainer.registerParse = dependant => {\n  parse = dependant\n}\n\nContainer.registerRule = dependant => {\n  Rule = dependant\n}\n\nContainer.registerAtRule = dependant => {\n  AtRule = dependant\n}\n\nContainer.registerRoot = dependant => {\n  Root = dependant\n}\n\n\n/* c8 ignore start */\nContainer.rebuild = node => {\n  if (node.type === 'atrule') {\n    Object.setPrototypeOf(node, AtRule.prototype)\n  } else if (node.type === 'rule') {\n    Object.setPrototypeOf(node, Rule.prototype)\n  } else if (node.type === 'decl') {\n    Object.setPrototypeOf(node, Declaration.prototype)\n  } else if (node.type === 'comment') {\n    Object.setPrototypeOf(node, Comment.prototype)\n  } else if (node.type === 'root') {\n    Object.setPrototypeOf(node, Root.prototype)\n  }\n\n  node[my] = true\n\n  if (node.nodes) {\n    node.nodes.forEach(child => {\n      Container.rebuild(child)\n    })\n  }\n}\n/* c8 ignore stop */\n", "\n\nimport { Container } from './container';\n\nexport class AtRule extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'atrule'\n  }\n\n  append(...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.append(...children)\n  }\n\n  prepend(...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.prepend(...children)\n  }\n}\n\nContainer.registerAtRule(AtRule)\n", "\n\nimport { Container } from \"./container\";\n\nlet LazyResult, Processor\n\nexport class Root extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'root'\n    if (!this.nodes) this.nodes = []\n  }\n\n  normalize(child, sample, type) {\n    const nodes = super.normalize(child)\n\n    if (sample) {\n      if (type === 'prepend') {\n        if (this.nodes.length > 1) {\n          sample.raws.before = this.nodes[1].raws.before\n        } else {\n          delete sample.raws.before\n        }\n      } else if (this.first !== sample) {\n        for (const node of nodes) {\n          node.raws.before = sample.raws.before\n        }\n      }\n    }\n\n    return nodes\n  }\n\n  removeChild(child, ignore) {\n    const index = this.index(child)\n\n    if (!ignore && index === 0 && this.nodes.length > 1) {\n      this.nodes[1].raws.before = this.nodes[index].raws.before\n    }\n\n    return super.removeChild(child)\n  }\n\n  toResult(opts = {}) {\n    const lazy = new LazyResult(new Processor(), this, opts)\n    return lazy.stringify()\n  }\n}\n\nRoot.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nRoot.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nContainer.registerRoot(Root)\n", "export const list = {\n  comma(string) {\n    return list.split(string, [','], true)\n  },\n\n  space(string) {\n    const spaces = [' ', '\\n', '\\t']\n    return list.split(string, spaces)\n  },\n\n  split(string, separators, last) {\n    const array = []\n    let current = ''\n    let split = false\n\n    let func = 0\n    let inQuote = false\n    let prevQuote = ''\n    let escape = false\n\n    for (const letter of string) {\n      if (escape) {\n        escape = false\n      } else if (letter === '\\\\') {\n        escape = true\n      } else if (inQuote) {\n        if (letter === prevQuote) {\n          inQuote = false\n        }\n      } else if (letter === '\"' || letter === \"'\") {\n        inQuote = true\n        prevQuote = letter\n      } else if (letter === '(') {\n        func += 1\n      } else if (letter === ')') {\n        if (func > 0) func -= 1\n      } else if (func === 0) {\n        if (separators.includes(letter)) split = true\n      }\n\n      if (split) {\n        if (current !== '') array.push(current.trim())\n        current = ''\n        split = false\n      } else {\n        current += letter\n      }\n    }\n\n    if (last || current !== '') array.push(current.trim())\n    return array\n  }\n}\n", "import { Container } from \"./container\";\nimport { list } from './list';\n\nexport class Rule extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'rule'\n    if (!this.nodes) this.nodes = []\n  }\n\n  get selectors() {\n    return list.comma(this.selector)\n  }\n\n  set selectors(values) {\n    const match = this.selector ? this.selector.match(/,\\s*/) : null\n    const sep = match ? match[0] : ',' + this.raw('between', 'beforeOpen')\n    this.selector = values.join(sep)\n  }\n}\n\nContainer.registerRule(Rule)", "let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nexport let customAlphabet = (alphabet, defaultSize = 21) => {\n  return (size = defaultSize) => {\n    let id = ''\n    let i = size\n    while (i--) {\n      id += alphabet[(Math.random() * alphabet.length) | 0]\n    }\n    return id\n  }\n}\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let i = size\n  while (i--) {\n    id += urlAlphabet[(Math.random() * 64) | 0]\n  }\n  return id\n}\n", "\n\nimport { nanoid } from 'nanoid/non-secure';\nimport { isAbsolute, resolve } from 'path';\nimport { fileURLToPath, pathToFileURL } from 'url';\nimport { CssSyntaxError } from \"./css-syntax-error\";\n\nconst fromOffsetCache = Symbol('fromOffsetCache')\n\nconst sourceMapAvailable = Boolean(false);\nconst pathAvailable = Boolean(resolve && isAbsolute)\n\nexport class Input {\n  constructor(css, opts = {}) {\n    if (\n      css === null ||\n      typeof css === 'undefined' ||\n      (typeof css === 'object' && !css.toString)\n    ) {\n      throw new Error(`PostCSS received ${css} instead of CSS string`)\n    }\n\n    this.css = css.toString()\n\n    if (this.css[0] === '\\uFEFF' || this.css[0] === '\\uFFFE') {\n      this.hasBOM = true\n      this.css = this.css.slice(1)\n    } else {\n      this.hasBOM = false\n    }\n\n    if (opts.from) {\n      if (\n        !pathAvailable ||\n        /^\\w+:\\/\\//.test(opts.from) ||\n        isAbsolute(opts.from)\n      ) {\n        this.file = opts.from\n      } else {\n        this.file = resolve(opts.from)\n      }\n    }\n\n    // if (pathAvailable && sourceMapAvailable) {\n    //   const map = new PreviousMap(this.css, opts)\n    //   if (map.text) {\n    //     this.map = map\n    //     const file = map.consumer().file\n    //     if (!this.file && file) this.file = this.mapResolve(file)\n    //   }\n    // }\n\n    if (!this.file) {\n      this.id = '<input css ' + nanoid(6) + '>'\n    }\n    if (this.map) this.map.file = this.from\n  }\n\n  error(message, line, column, opts = {}) {\n    let endColumn, endLine, result\n\n    if (line && typeof line === 'object') {\n      const start = line\n      const end = column\n      if (typeof start.offset === 'number') {\n        const pos = this.fromOffset(start.offset)\n        line = pos.line\n        column = pos.col\n      } else {\n        line = start.line\n        column = start.column\n      }\n      if (typeof end.offset === 'number') {\n        const pos = this.fromOffset(end.offset)\n        endLine = pos.line\n        endColumn = pos.col\n      } else {\n        endLine = end.line\n        endColumn = end.column\n      }\n    } else if (!column) {\n      const pos = this.fromOffset(line)\n      line = pos.line\n      column = pos.col\n    }\n\n    const origin = this.origin(line, column, endLine, endColumn)\n    if (origin) {\n      result = new CssSyntaxError(\n        message,\n        origin.endLine === undefined\n          ? origin.line\n          : { column: origin.column, line: origin.line },\n        origin.endLine === undefined\n          ? origin.column\n          : { column: origin.endColumn, line: origin.endLine },\n        origin.source,\n        origin.file,\n        opts.plugin\n      )\n    } else {\n      result = new CssSyntaxError(\n        message,\n        endLine === undefined ? line : { column, line },\n        endLine === undefined ? column : { column: endColumn, line: endLine },\n        this.css,\n        this.file,\n        opts.plugin\n      )\n    }\n\n    result.input = { column, endColumn, endLine, line, source: this.css }\n    if (this.file) {\n      if (pathToFileURL) {\n        result.input.url = pathToFileURL(this.file).toString()\n      }\n      result.input.file = this.file\n    }\n\n    return result\n  }\n\n  fromOffset(offset) {\n    let lastLine, lineToIndex\n    if (!this[fromOffsetCache]) {\n      const lines = this.css.split('\\n')\n      lineToIndex = new Array(lines.length)\n      let prevIndex = 0\n\n      for (let i = 0, l = lines.length; i < l; i++) {\n        lineToIndex[i] = prevIndex\n        prevIndex += lines[i].length + 1\n      }\n\n      this[fromOffsetCache] = lineToIndex\n    } else {\n      lineToIndex = this[fromOffsetCache]\n    }\n    lastLine = lineToIndex[lineToIndex.length - 1]\n\n    let min = 0\n    if (offset >= lastLine) {\n      min = lineToIndex.length - 1\n    } else {\n      let max = lineToIndex.length - 2\n      let mid\n      while (min < max) {\n        mid = min + ((max - min) >> 1)\n        if (offset < lineToIndex[mid]) {\n          max = mid - 1\n        } else if (offset >= lineToIndex[mid + 1]) {\n          min = mid + 1\n        } else {\n          min = mid\n          break\n        }\n      }\n    }\n    return {\n      col: offset - lineToIndex[min] + 1,\n      line: min + 1\n    }\n  }\n\n  mapResolve(file) {\n    if (/^\\w+:\\/\\//.test(file)) {\n      return file\n    }\n    return resolve(this.map.consumer().sourceRoot || this.map.root || '.', file)\n  }\n\n  origin(line, column, endLine, endColumn) {\n    if (!this.map) return false\n    const consumer = this.map.consumer()\n\n    const from = consumer.originalPositionFor({ column, line })\n    if (!from.source) return false\n\n    let to\n    if (typeof endLine === 'number') {\n      to = consumer.originalPositionFor({ column: endColumn, line: endLine })\n    }\n\n    let fromUrl\n\n    if (isAbsolute(from.source)) {\n      fromUrl = pathToFileURL(from.source)\n    } else {\n      fromUrl = new URL(\n        from.source,\n        this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile)\n      )\n    }\n\n    const result = {\n      column: from.column,\n      endColumn: to && to.column,\n      endLine: to && to.line,\n      line: from.line,\n      url: fromUrl.toString()\n    }\n\n    if (fromUrl.protocol === 'file:') {\n      if (fileURLToPath) {\n        result.file = fileURLToPath(fromUrl)\n      } else {\n        /* c8 ignore next 2 */\n        throw new Error(`file: protocol is not available in this PostCSS build`)\n      }\n    }\n\n    const source = consumer.sourceContentFor(from.source)\n    if (source) result.source = source\n\n    return result\n  }\n\n  toJSON() {\n    const json = {}\n    for (const name of ['hasBOM', 'css', 'file', 'id']) {\n      if (this[name] != null) {\n        json[name] = this[name]\n      }\n    }\n    if (this.map) {\n      json.map = { ...this.map }\n      if (json.map.consumerCache) {\n        json.map.consumerCache = undefined\n      }\n    }\n    return json\n  }\n\n  get from() {\n    return this.file || this.id\n  }\n}\n", "const SINGLE_QUOTE = \"'\".charCodeAt(0)\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0)\nconst BACKSLASH = '\\\\'.charCodeAt(0)\nconst SLASH = '/'.charCodeAt(0)\nconst NEWLINE = '\\n'.charCodeAt(0)\nconst SPACE = ' '.charCodeAt(0)\nconst FEED = '\\f'.charCodeAt(0)\nconst TAB = '\\t'.charCodeAt(0)\nconst CR = '\\r'.charCodeAt(0)\nconst OPEN_SQUARE = '['.charCodeAt(0)\nconst CLOSE_SQUARE = ']'.charCodeAt(0)\nconst OPEN_PARENTHESES = '('.charCodeAt(0)\nconst CLOSE_PARENTHESES = ')'.charCodeAt(0)\nconst OPEN_CURLY = '{'.charCodeAt(0)\nconst CLOSE_CURLY = '}'.charCodeAt(0)\nconst SEMICOLON = ';'.charCodeAt(0)\nconst ASTERISK = '*'.charCodeAt(0)\nconst COLON = ':'.charCodeAt(0)\nconst AT = '@'.charCodeAt(0)\n\nconst RE_AT_END = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g\nconst RE_BAD_BRACKET = /.[\\r\\n\"'(/\\\\]/\nconst RE_HEX_ESCAPE = /[\\da-f]/i\n\nexport function tokenizer(input, options = {}) {\n  const css = input.css.valueOf()\n  const ignore = options.ignoreErrors\n\n  let code, content, escape, next, quote\n  let currentToken, escaped, escapePos, n, prev\n\n  const length = css.length\n  let pos = 0\n  const buffer = []\n  const returned = []\n\n  function position() {\n    return pos\n  }\n\n  function unclosed(what) {\n    throw input.error('Unclosed ' + what, pos)\n  }\n\n  function endOfFile() {\n    return returned.length === 0 && pos >= length\n  }\n\n  function nextToken(opts) {\n    if (returned.length) return returned.pop()\n    if (pos >= length) return\n\n    const ignoreUnclosed = opts ? opts.ignoreUnclosed : false\n\n    code = css.charCodeAt(pos)\n\n    switch (code) {\n      case NEWLINE:\n      case SPACE:\n      case TAB:\n      case CR:\n      case FEED: {\n        next = pos\n        do {\n          next += 1\n          code = css.charCodeAt(next)\n        } while (\n          code === SPACE ||\n          code === NEWLINE ||\n          code === TAB ||\n          code === CR ||\n          code === FEED\n        )\n\n        currentToken = ['space', css.slice(pos, next)]\n        pos = next - 1\n        break\n      }\n\n      case OPEN_SQUARE:\n      case CLOSE_SQUARE:\n      case OPEN_CURLY:\n      case CLOSE_CURLY:\n      case COLON:\n      case SEMICOLON:\n      case CLOSE_PARENTHESES: {\n        const controlChar = String.fromCharCode(code)\n        currentToken = [controlChar, controlChar, pos]\n        break\n      }\n\n      case OPEN_PARENTHESES: {\n        prev = buffer.length ? buffer.pop()[1] : ''\n        n = css.charCodeAt(pos + 1)\n        if (\n          prev === 'url' &&\n          n !== SINGLE_QUOTE &&\n          n !== DOUBLE_QUOTE &&\n          n !== SPACE &&\n          n !== NEWLINE &&\n          n !== TAB &&\n          n !== FEED &&\n          n !== CR\n        ) {\n          next = pos\n          do {\n            escaped = false\n            next = css.indexOf(')', next + 1)\n            if (next === -1) {\n              if (ignore || ignoreUnclosed) {\n                next = pos\n                break\n              } else {\n                unclosed('bracket')\n              }\n            }\n            escapePos = next\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1\n              escaped = !escaped\n            }\n          } while (escaped)\n\n          currentToken = ['brackets', css.slice(pos, next + 1), pos, next]\n\n          pos = next\n        } else {\n          next = css.indexOf(')', pos + 1)\n          content = css.slice(pos, next + 1)\n\n          if (next === -1 || RE_BAD_BRACKET.test(content)) {\n            currentToken = ['(', '(', pos]\n          } else {\n            currentToken = ['brackets', content, pos, next]\n            pos = next\n          }\n        }\n\n        break\n      }\n\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE: {\n        quote = code === SINGLE_QUOTE ? \"'\" : '\"'\n        next = pos\n        do {\n          escaped = false\n          next = css.indexOf(quote, next + 1)\n          if (next === -1) {\n            if (ignore || ignoreUnclosed) {\n              next = pos + 1\n              break\n            } else {\n              unclosed('string')\n            }\n          }\n          escapePos = next\n          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n            escapePos -= 1\n            escaped = !escaped\n          }\n        } while (escaped)\n\n        currentToken = ['string', css.slice(pos, next + 1), pos, next]\n        pos = next\n        break\n      }\n\n      case AT: {\n        RE_AT_END.lastIndex = pos + 1\n        RE_AT_END.test(css)\n        if (RE_AT_END.lastIndex === 0) {\n          next = css.length - 1\n        } else {\n          next = RE_AT_END.lastIndex - 2\n        }\n\n        currentToken = ['at-word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      case BACKSLASH: {\n        next = pos\n        escape = true\n        while (css.charCodeAt(next + 1) === BACKSLASH) {\n          next += 1\n          escape = !escape\n        }\n        code = css.charCodeAt(next + 1)\n        if (\n          escape &&\n          code !== SLASH &&\n          code !== SPACE &&\n          code !== NEWLINE &&\n          code !== TAB &&\n          code !== CR &&\n          code !== FEED\n        ) {\n          next += 1\n          if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n            while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {\n              next += 1\n            }\n            if (css.charCodeAt(next + 1) === SPACE) {\n              next += 1\n            }\n          }\n        }\n\n        currentToken = ['word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      default: {\n        if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n          next = css.indexOf('*/', pos + 2) + 1\n          if (next === 0) {\n            if (ignore || ignoreUnclosed) {\n              next = css.length\n            } else {\n              unclosed('comment')\n            }\n          }\n\n          currentToken = ['comment', css.slice(pos, next + 1), pos, next]\n          pos = next\n        } else {\n          RE_WORD_END.lastIndex = pos + 1\n          RE_WORD_END.test(css)\n          if (RE_WORD_END.lastIndex === 0) {\n            next = css.length - 1\n          } else {\n            next = RE_WORD_END.lastIndex - 2\n          }\n\n          currentToken = ['word', css.slice(pos, next + 1), pos, next]\n          buffer.push(currentToken)\n          pos = next\n        }\n\n        break\n      }\n    }\n\n    pos++\n    return currentToken\n  }\n\n  function back(token) {\n    returned.push(token)\n  }\n\n  return {\n    back,\n    endOfFile,\n    nextToken,\n    position\n  }\n}\n", "\n\nimport { AtRule } from './at-rule';\nimport { Comment } from './comment';\nimport { Declaration } from './declaration';\nimport { Root } from './root';\nimport { Rule } from './rule';\nimport { tokenizer } from \"./tokenize\";\n\nconst SAFE_COMMENT_NEIGHBOR = {\n  empty: true,\n  space: true\n}\n\nfunction findLastWithPosition(tokens) {\n  for (let i = tokens.length - 1; i >= 0; i--) {\n    const token = tokens[i]\n    const pos = token[3] || token[2]\n    if (pos) return pos\n  }\n}\n\nexport class Parser {\n  constructor(input) {\n    this.input = input\n\n    this.root = new Root()\n    this.current = this.root\n    this.spaces = ''\n    this.semicolon = false\n\n    this.createTokenizer()\n    this.root.source = { input, start: { column: 1, line: 1, offset: 0 } }\n  }\n\n  atrule(token) {\n    const node = new AtRule()\n    node.name = token[1].slice(1)\n    if (node.name === '') {\n      this.unnamedAtrule(node, token)\n    }\n    this.init(node, token[2])\n\n    let type\n    let prev\n    let shift\n    let last = false\n    let open = false\n    const params = []\n    const brackets = []\n\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n      type = token[0]\n\n      if (type === '(' || type === '[') {\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (type === '{' && brackets.length > 0) {\n        brackets.push('}')\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n      }\n\n      if (brackets.length === 0) {\n        if (type === ';') {\n          node.source.end = this.getPosition(token[2])\n          node.source.end.offset++\n          this.semicolon = true\n          break\n        } else if (type === '{') {\n          open = true\n          break\n        } else if (type === '}') {\n          if (params.length > 0) {\n            shift = params.length - 1\n            prev = params[shift]\n            while (prev && prev[0] === 'space') {\n              prev = params[--shift]\n            }\n            if (prev) {\n              node.source.end = this.getPosition(prev[3] || prev[2])\n              node.source.end.offset++\n            }\n          }\n          this.end(token)\n          break\n        } else {\n          params.push(token)\n        }\n      } else {\n        params.push(token)\n      }\n\n      if (this.tokenizer.endOfFile()) {\n        last = true\n        break\n      }\n    }\n\n    node.raws.between = this.spacesAndCommentsFromEnd(params)\n    if (params.length) {\n      node.raws.afterName = this.spacesAndCommentsFromStart(params)\n      this.raw(node, 'params', params)\n      if (last) {\n        token = params[params.length - 1]\n        node.source.end = this.getPosition(token[3] || token[2])\n        node.source.end.offset++\n        this.spaces = node.raws.between\n        node.raws.between = ''\n      }\n    } else {\n      node.raws.afterName = ''\n      node.params = ''\n    }\n\n    if (open) {\n      node.nodes = []\n      this.current = node\n    }\n  }\n\n  checkMissedSemicolon(tokens) {\n    const colon = this.colon(tokens)\n    if (colon === false) return\n\n    let founded = 0\n    let token\n    for (let j = colon - 1; j >= 0; j--) {\n      token = tokens[j]\n      if (token[0] !== 'space') {\n        founded += 1\n        if (founded === 2) break\n      }\n    }\n    // If the token is a word, e.g. `!important`, `red` or any other valid property's value.\n    // Then we need to return the colon after that word token. [3] is the \"end\" colon of that word.\n    // And because we need it after that one we do +1 to get the next one.\n    throw this.input.error(\n      'Missed semicolon',\n      token[0] === 'word' ? token[3] + 1 : token[2]\n    )\n  }\n\n  colon(tokens) {\n    let brackets = 0\n    let prev, token, type\n    for (const [i, element] of tokens.entries()) {\n      token = element\n      type = token[0]\n\n      if (type === '(') {\n        brackets += 1\n      }\n      if (type === ')') {\n        brackets -= 1\n      }\n      if (brackets === 0 && type === ':') {\n        if (!prev) {\n          this.doubleColon(token)\n        } else if (prev[0] === 'word' && prev[1] === 'progid') {\n          continue\n        } else {\n          return i\n        }\n      }\n\n      prev = token\n    }\n    return false\n  }\n\n  comment(token) {\n    const node = new Comment()\n    this.init(node, token[2])\n    node.source.end = this.getPosition(token[3] || token[2])\n    node.source.end.offset++\n\n    const text = token[1].slice(2, -2)\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      const match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input)\n  }\n\n  decl(tokens, customProperty) {\n    const node = new Declaration()\n    this.init(node, tokens[0][2])\n\n    const last = tokens[tokens.length - 1]\n    if (last[0] === ';') {\n      this.semicolon = true\n      tokens.pop()\n    }\n\n    node.source.end = this.getPosition(\n      last[3] || last[2] || findLastWithPosition(tokens)\n    )\n    node.source.end.offset++\n\n    while (tokens[0][0] !== 'word') {\n      if (tokens.length === 1) this.unknownWord(tokens)\n      node.raws.before += tokens.shift()[1]\n    }\n    node.source.start = this.getPosition(tokens[0][2])\n\n    node.prop = ''\n    while (tokens.length) {\n      const type = tokens[0][0]\n      if (type === ':' || type === 'space' || type === 'comment') {\n        break\n      }\n      node.prop += tokens.shift()[1]\n    }\n\n    node.raws.between = ''\n\n    let token\n    while (tokens.length) {\n      token = tokens.shift()\n\n      if (token[0] === ':') {\n        node.raws.between += token[1]\n        break\n      } else {\n        if (token[0] === 'word' && /\\w/.test(token[1])) {\n          this.unknownWord([token])\n        }\n        node.raws.between += token[1]\n      }\n    }\n\n    if (node.prop[0] === '_' || node.prop[0] === '*') {\n      node.raws.before += node.prop[0]\n      node.prop = node.prop.slice(1)\n    }\n\n    let firstSpaces = []\n    let next\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      firstSpaces.push(tokens.shift())\n    }\n\n    this.precheckMissedSemicolon(tokens)\n\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      token = tokens[i]\n      if (token[1].toLowerCase() === '!important') {\n        node.important = true\n        let string = this.stringFrom(tokens, i)\n        string = this.spacesFromEnd(tokens) + string\n        if (string !== ' !important') node.raws.important = string\n        break\n      } else if (token[1].toLowerCase() === 'important') {\n        const cache = tokens.slice(0)\n        let str = ''\n        for (let j = i; j > 0; j--) {\n          const type = cache[j][0]\n          if (str.trim().startsWith('!') && type !== 'space') {\n            break\n          }\n          str = cache.pop()[1] + str\n        }\n        if (str.trim().startsWith('!')) {\n          node.important = true\n          node.raws.important = str\n          tokens = cache\n        }\n      }\n\n      if (token[0] !== 'space' && token[0] !== 'comment') {\n        break\n      }\n    }\n\n    const hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment')\n\n    if (hasWord) {\n      node.raws.between += firstSpaces.map(i => i[1]).join('')\n      firstSpaces = []\n    }\n    this.raw(node, 'value', firstSpaces.concat(tokens), customProperty)\n\n    if (node.value.includes(':') && !customProperty) {\n      this.checkMissedSemicolon(tokens)\n    }\n  }\n\n  doubleColon(token) {\n    throw this.input.error(\n      'Double colon',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  emptyRule(token) {\n    const node = new Rule()\n    this.init(node, token[2])\n    node.selector = ''\n    node.raws.between = ''\n    this.current = node\n  }\n\n  end(token) {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.semicolon = false\n\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n    this.spaces = ''\n\n    if (this.current.parent) {\n      this.current.source.end = this.getPosition(token[2])\n      this.current.source.end.offset++\n      this.current = this.current.parent\n    } else {\n      this.unexpectedClose(token)\n    }\n  }\n\n  endFile() {\n    if (this.current.parent) this.unclosedBlock()\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n    this.root.source.end = this.getPosition(this.tokenizer.position())\n  }\n\n  freeSemicolon(token) {\n    this.spaces += token[1]\n    if (this.current.nodes) {\n      const prev = this.current.nodes[this.current.nodes.length - 1]\n      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n        prev.raws.ownSemicolon = this.spaces\n        this.spaces = ''\n      }\n    }\n  }\n\n  // Helpers\n\n  getPosition(offset) {\n    const pos = this.input.fromOffset(offset)\n    return {\n      column: pos.col,\n      line: pos.line,\n      offset\n    }\n  }\n\n  init(node, offset) {\n    this.current.push(node)\n    node.source = {\n      input: this.input,\n      start: this.getPosition(offset)\n    }\n    node.raws.before = this.spaces\n    this.spaces = ''\n    if (node.type !== 'comment') this.semicolon = false\n  }\n\n  other(start) {\n    let end = false\n    let type = null\n    let colon = false\n    let bracket = null\n    const brackets = []\n    const customProperty = start[1].startsWith('--')\n\n    const tokens = []\n    let token = start\n    while (token) {\n      type = token[0]\n      tokens.push(token)\n\n      if (type === '(' || type === '[') {\n        if (!bracket) bracket = token\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (customProperty && colon && type === '{') {\n        if (!bracket) bracket = token\n        brackets.push('}')\n      } else if (brackets.length === 0) {\n        if (type === ';') {\n          if (colon) {\n            this.decl(tokens, customProperty)\n            return\n          } else {\n            break\n          }\n        } else if (type === '{') {\n          this.rule(tokens)\n          return\n        } else if (type === '}') {\n          this.tokenizer.back(tokens.pop())\n          end = true\n          break\n        } else if (type === ':') {\n          colon = true\n        }\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n        if (brackets.length === 0) bracket = null\n      }\n\n      token = this.tokenizer.nextToken()\n    }\n\n    if (this.tokenizer.endOfFile()) end = true\n    if (brackets.length > 0) this.unclosedBracket(bracket)\n\n    if (end && colon) {\n      if (!customProperty) {\n        while (tokens.length) {\n          token = tokens[tokens.length - 1][0]\n          if (token !== 'space' && token !== 'comment') break\n          this.tokenizer.back(tokens.pop())\n        }\n      }\n      this.decl(tokens, customProperty)\n    } else {\n      this.unknownWord(tokens)\n    }\n  }\n\n  parse() {\n    let token\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n\n      switch (token[0]) {\n        case 'space':\n          this.spaces += token[1]\n          break\n\n        case ';':\n          this.freeSemicolon(token)\n          break\n\n        case '}':\n          this.end(token)\n          break\n\n        case 'comment':\n          this.comment(token)\n          break\n\n        case 'at-word':\n          this.atrule(token)\n          break\n\n        case '{':\n          this.emptyRule(token)\n          break\n\n        default:\n          this.other(token)\n          break\n      }\n    }\n    this.endFile()\n  }\n\n  precheckMissedSemicolon(/* tokens */) {\n    // Hook for Safe Parser\n  }\n\n  raw(node, prop, tokens, customProperty) {\n    let token, type\n    const length = tokens.length\n    let value = ''\n    let clean = true\n    let next, prev\n\n    for (let i = 0; i < length; i += 1) {\n      token = tokens[i]\n      type = token[0]\n      if (type === 'space' && i === length - 1 && !customProperty) {\n        clean = false\n      } else if (type === 'comment') {\n        prev = tokens[i - 1] ? tokens[i - 1][0] : 'empty'\n        next = tokens[i + 1] ? tokens[i + 1][0] : 'empty'\n        if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next]) {\n          if (value.slice(-1) === ',') {\n            clean = false\n          } else {\n            value += token[1]\n          }\n        } else {\n          clean = false\n        }\n      } else {\n        value += token[1]\n      }\n    }\n    if (!clean) {\n      const raw = tokens.reduce((all, i) => all + i[1], '')\n      node.raws[prop] = { raw, value }\n    }\n    node[prop] = value\n  }\n\n  rule(tokens) {\n    tokens.pop()\n\n    const node = new Rule()\n    this.init(node, tokens[0][2])\n\n    node.raws.between = this.spacesAndCommentsFromEnd(tokens)\n    this.raw(node, 'selector', tokens)\n    this.current = node\n  }\n\n  spacesAndCommentsFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  // Errors\n\n  spacesAndCommentsFromStart(tokens) {\n    let next\n    let spaces = ''\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      spaces += tokens.shift()[1]\n    }\n    return spaces\n  }\n\n  spacesFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  stringFrom(tokens, from) {\n    let result = ''\n    for (let i = from; i < tokens.length; i++) {\n      result += tokens[i][1]\n    }\n    tokens.splice(from, tokens.length - from)\n    return result\n  }\n\n  unclosedBlock() {\n    const pos = this.current.source.start\n    throw this.input.error('Unclosed block', pos.line, pos.column)\n  }\n\n  unclosedBracket(bracket) {\n    throw this.input.error(\n      'Unclosed bracket',\n      { offset: bracket[2] },\n      { offset: bracket[2] + 1 }\n    )\n  }\n\n  unexpectedClose(token) {\n    throw this.input.error(\n      'Unexpected }',\n      { offset: token[2] },\n      { offset: token[2] + 1 }\n    )\n  }\n\n  unknownWord(tokens) {\n    throw this.input.error(\n      'Unknown word',\n      { offset: tokens[0][2] },\n      { offset: tokens[0][2] + tokens[0][1].length }\n    )\n  }\n\n  unnamedAtrule(node, token) {\n    throw this.input.error(\n      'At-rule without name',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n}\n", "\n\nimport { Container } from \"./container\";\nimport { Input } from './input';\nimport { Parser } from './parser';\n\nexport function parse(css, opts) {\n  const input = new Input(css, opts)\n  const parser = new Parser(input)\n  try {\n    parser.parse()\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (e.name === 'CssSyntaxError' && opts && opts.from) {\n        if (/\\.scss$/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse SCSS with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-scss parser'\n        } else if (/\\.sass/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse Sass with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-sass parser'\n        } else if (/\\.less$/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse Less with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-less parser'\n        }\n      }\n    }\n    throw e\n  }\n\n  return parser.root\n}\n\nContainer.registerParse(parse)\n", "\n\nimport { Container } from \"./container\";\n\nlet LazyResult, Processor\n\nexport class Document extends Container {\n  constructor(defaults) {\n    // type needs to be passed to super, otherwise child roots won't be normalized correctly\n    super({ type: 'document', ...defaults })\n\n    if (!this.nodes) {\n      this.nodes = []\n    }\n  }\n\n  toResult(opts = {}) {\n    const lazy = new LazyResult(new Processor(), this, opts)\n\n    return lazy.stringify()\n  }\n}\n\nDocument.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nDocument.registerProcessor = dependant => {\n  Processor = dependant\n}", "\n\nimport { AtRule } from './at-rule';\nimport { Comment } from './comment';\nimport { Declaration } from './declaration';\nimport { Root } from './root';\nimport { Rule } from './rule';\nimport { Input } from './input';\n\nexport function fromJSON(json, inputs) {\n  if (Array.isArray(json)) return json.map(n => fromJSON(n))\n\n  const { inputs: ownInputs, ...defaults } = json\n  if (ownInputs) {\n    inputs = []\n    for (const input of ownInputs) {\n      const inputHydrated = { ...input, __proto__: Input.prototype }\n      if (inputHydrated.map) {\n        inputHydrated.map = {\n          ...inputHydrated.map,\n        }\n      }\n      inputs.push(inputHydrated)\n    }\n  }\n  if (defaults.nodes) {\n    defaults.nodes = json.nodes.map(n => fromJSON(n, inputs))\n  }\n  if (defaults.source) {\n    const { inputId, ...source } = defaults.source\n    defaults.source = source\n    if (inputId != null) {\n      defaults.source.input = inputs[inputId]\n    }\n  }\n  if (defaults.type === 'root') {\n    return new Root(defaults)\n  } else if (defaults.type === 'decl') {\n    return new Declaration(defaults)\n  } else if (defaults.type === 'rule') {\n    return new Rule(defaults)\n  } else if (defaults.type === 'comment') {\n    return new Comment(defaults)\n  } else if (defaults.type === 'atrule') {\n    return new AtRule(defaults)\n  } else {\n    throw new Error('Unknown node type: ' + json.type)\n  }\n}", "import { dirname, relative, resolve, sep } from 'path';\nimport { pathToFileURL } from 'url';\n\nimport { Input } from './input';\n\nconst sourceMapAvailable = Boolean(false);\nconst pathAvailable = Boolean(dirname && resolve && relative && sep)\n\nexport class MapGenerator {\n  constructor(stringify, root, opts, cssString) {\n    this.stringify = stringify\n    this.mapOpts = opts.map || {}\n    this.root = root\n    this.opts = opts\n    this.css = cssString\n    this.originalCSS = cssString\n    this.usesFileUrls = !this.mapOpts.from && this.mapOpts.absolute\n\n    this.memoizedFileURLs = new Map()\n    this.memoizedPaths = new Map()\n    this.memoizedURLs = new Map()\n  }\n\n  addAnnotation() {\n    let content\n\n    if (this.isInline()) {\n      content =\n        'data:application/json;base64,' + this.toBase64(this.map.toString())\n    } else if (typeof this.mapOpts.annotation === 'string') {\n      content = this.mapOpts.annotation\n    } else if (typeof this.mapOpts.annotation === 'function') {\n      content = this.mapOpts.annotation(this.opts.to, this.root)\n    } else {\n      content = this.outputFile() + '.map'\n    }\n    let eol = '\\n'\n    if (this.css.includes('\\r\\n')) eol = '\\r\\n'\n\n    this.css += eol + '/*# sourceMappingURL=' + content + ' */'\n  }\n\n  applyPrevMaps() {\n    for (const prev of this.previous()) {\n      const from = this.toUrl(this.path(prev.file))\n      const root = prev.root || dirname(prev.file)\n      let map\n\n      if (this.mapOpts.sourcesContent === false) {\n        map = new SourceMapConsumer(prev.text)\n        if (map.sourcesContent) {\n          map.sourcesContent = null\n        }\n      } else {\n        map = prev.consumer()\n      }\n\n      this.map.applySourceMap(map, from, this.toUrl(this.path(root)))\n    }\n  }\n\n  clearAnnotation() {\n    if (this.mapOpts.annotation === false) return\n\n    if (this.root) {\n      let node\n      for (let i = this.root.nodes.length - 1; i >= 0; i--) {\n        node = this.root.nodes[i]\n        if (node.type !== 'comment') continue\n        if (node.text.startsWith('# sourceMappingURL=')) {\n          this.root.removeChild(i)\n        }\n      }\n    } else if (this.css) {\n      this.css = this.css.replace(/\\n*\\/\\*#[\\S\\s]*?\\*\\/$/gm, '')\n    }\n  }\n\n  generate() {\n    this.clearAnnotation()\n    if (pathAvailable && sourceMapAvailable && this.isMap()) {\n      return this.generateMap()\n    } else {\n      let result = ''\n      this.stringify(this.root, i => {\n        result += i\n      })\n      return [result]\n    }\n  }\n\n  generateMap() {\n    if (this.root) {\n      this.generateString()\n    } else if (this.previous().length === 1) {\n      const prev = this.previous()[0].consumer()\n      prev.file = this.outputFile()\n      this.map = SourceMapGenerator.fromSourceMap(prev, {\n        ignoreInvalidMapping: true\n      })\n    } else {\n      this.map = new SourceMapGenerator({\n        file: this.outputFile(),\n        ignoreInvalidMapping: true\n      })\n      this.map.addMapping({\n        generated: { column: 0, line: 1 },\n        original: { column: 0, line: 1 },\n        source: this.opts.from\n          ? this.toUrl(this.path(this.opts.from))\n          : '<no source>'\n      })\n    }\n\n    if (this.isSourcesContent()) this.setSourcesContent()\n    if (this.root && this.previous().length > 0) this.applyPrevMaps()\n    if (this.isAnnotation()) this.addAnnotation()\n\n    if (this.isInline()) {\n      return [this.css]\n    } else {\n      return [this.css, this.map]\n    }\n  }\n\n  generateString() {\n    this.css = ''\n    this.map = new SourceMapGenerator({\n      file: this.outputFile(),\n      ignoreInvalidMapping: true\n    })\n\n    let line = 1\n    let column = 1\n\n    const noSource = '<no source>'\n    const mapping = {\n      generated: { column: 0, line: 0 },\n      original: { column: 0, line: 0 },\n      source: ''\n    }\n\n    let last, lines\n    this.stringify(this.root, (str, node, type) => {\n      this.css += str\n\n      if (node && type !== 'end') {\n        mapping.generated.line = line\n        mapping.generated.column = column - 1\n        if (node.source && node.source.start) {\n          mapping.source = this.sourcePath(node)\n          mapping.original.line = node.source.start.line\n          mapping.original.column = node.source.start.column - 1\n          this.map.addMapping(mapping)\n        } else {\n          mapping.source = noSource\n          mapping.original.line = 1\n          mapping.original.column = 0\n          this.map.addMapping(mapping)\n        }\n      }\n\n      lines = str.match(/\\n/g)\n      if (lines) {\n        line += lines.length\n        last = str.lastIndexOf('\\n')\n        column = str.length - last\n      } else {\n        column += str.length\n      }\n\n      if (node && type !== 'start') {\n        const p = node.parent || { raws: {} }\n        const childless =\n          node.type === 'decl' || (node.type === 'atrule' && !node.nodes)\n        if (!childless || node !== p.last || p.raws.semicolon) {\n          if (node.source && node.source.end) {\n            mapping.source = this.sourcePath(node)\n            mapping.original.line = node.source.end.line\n            mapping.original.column = node.source.end.column - 1\n            mapping.generated.line = line\n            mapping.generated.column = column - 2\n            this.map.addMapping(mapping)\n          } else {\n            mapping.source = noSource\n            mapping.original.line = 1\n            mapping.original.column = 0\n            mapping.generated.line = line\n            mapping.generated.column = column - 1\n            this.map.addMapping(mapping)\n          }\n        }\n      }\n    })\n  }\n\n  isAnnotation() {\n    if (this.isInline()) {\n      return true\n    }\n    if (typeof this.mapOpts.annotation !== 'undefined') {\n      return this.mapOpts.annotation\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.annotation)\n    }\n    return true\n  }\n\n  isInline() {\n    if (typeof this.mapOpts.inline !== 'undefined') {\n      return this.mapOpts.inline\n    }\n\n    const annotation = this.mapOpts.annotation\n    if (typeof annotation !== 'undefined' && annotation !== true) {\n      return false\n    }\n\n    if (this.previous().length) {\n      return this.previous().some(i => i.inline)\n    }\n    return true\n  }\n\n  isMap() {\n    if (typeof this.opts.map !== 'undefined') {\n      return !!this.opts.map\n    }\n    return this.previous().length > 0\n  }\n\n  isSourcesContent() {\n    if (typeof this.mapOpts.sourcesContent !== 'undefined') {\n      return this.mapOpts.sourcesContent\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.withContent())\n    }\n    return true\n  }\n\n  outputFile() {\n    if (this.opts.to) {\n      return this.path(this.opts.to)\n    } else if (this.opts.from) {\n      return this.path(this.opts.from)\n    } else {\n      return 'to.css'\n    }\n  }\n\n  path(file) {\n    if (this.mapOpts.absolute) return file\n    if (file.charCodeAt(0) === 60 /* `<` */) return file\n    if (/^\\w+:\\/\\//.test(file)) return file\n    const cached = this.memoizedPaths.get(file)\n    if (cached) return cached\n\n    let from = this.opts.to ? dirname(this.opts.to) : '.'\n\n    if (typeof this.mapOpts.annotation === 'string') {\n      from = dirname(resolve(from, this.mapOpts.annotation))\n    }\n\n    const path = relative(from, file)\n    this.memoizedPaths.set(file, path)\n\n    return path\n  }\n\n  previous() {\n    if (!this.previousMaps) {\n      this.previousMaps = []\n      if (this.root) {\n        this.root.walk(node => {\n          if (node.source && node.source.input.map) {\n            const map = node.source.input.map\n            if (!this.previousMaps.includes(map)) {\n              this.previousMaps.push(map)\n            }\n          }\n        })\n      } else {\n        const input = new Input(this.originalCSS, this.opts)\n        if (input.map) this.previousMaps.push(input.map)\n      }\n    }\n\n    return this.previousMaps\n  }\n\n  setSourcesContent() {\n    const already = {}\n    if (this.root) {\n      this.root.walk(node => {\n        if (node.source) {\n          const from = node.source.input.from\n          if (from && !already[from]) {\n            already[from] = true\n            const fromUrl = this.usesFileUrls\n              ? this.toFileUrl(from)\n              : this.toUrl(this.path(from))\n            this.map.setSourceContent(fromUrl, node.source.input.css)\n          }\n        }\n      })\n    } else if (this.css) {\n      const from = this.opts.from\n        ? this.toUrl(this.path(this.opts.from))\n        : '<no source>'\n      this.map.setSourceContent(from, this.css)\n    }\n  }\n\n  sourcePath(node) {\n    if (this.mapOpts.from) {\n      return this.toUrl(this.mapOpts.from)\n    } else if (this.usesFileUrls) {\n      return this.toFileUrl(node.source.input.from)\n    } else {\n      return this.toUrl(this.path(node.source.input.from))\n    }\n  }\n\n  toBase64(str) {\n    if (Buffer) {\n      return Buffer.from(str).toString('base64')\n    } else {\n      return window.btoa(unescape(encodeURIComponent(str)))\n    }\n  }\n\n  toFileUrl(path) {\n    const cached = this.memoizedFileURLs.get(path)\n    if (cached) return cached\n\n    if (pathToFileURL) {\n      const fileURL = pathToFileURL(path).toString()\n      this.memoizedFileURLs.set(path, fileURL)\n\n      return fileURL\n    } else {\n      throw new Error(\n        '`map.absolute` option is not available in this PostCSS build'\n      )\n    }\n  }\n\n  toUrl(path) {\n    const cached = this.memoizedURLs.get(path)\n    if (cached) return cached\n\n    if (sep === '\\\\') {\n      path = path.replace(/\\\\/g, '/')\n    }\n\n    const url = encodeURI(path).replace(/[#?]/g, encodeURIComponent)\n    this.memoizedURLs.set(path, url)\n\n    return url\n  }\n}\n", "const printed = {}\n\nexport  function warnOnce(message) {\n  if (printed[message]) return\n  printed[message] = true\n\n  if (typeof console !== 'undefined' && console.warn) {\n    console.warn(message)\n  }\n}\n", "export class Warning {\n  constructor(text, opts = {}) {\n    this.type = 'warning'\n    this.text = text\n\n    if (opts.node && opts.node.source) {\n      const range = opts.node.rangeBy(opts)\n      this.line = range.start.line\n      this.column = range.start.column\n      this.endLine = range.end.line\n      this.endColumn = range.end.column\n    }\n\n    for (const opt in opts) this[opt] = opts[opt]\n  }\n\n  toString() {\n    if (this.node) {\n      return this.node.error(this.text, {\n        index: this.index,\n        plugin: this.plugin,\n        word: this.word\n      }).message\n    }\n\n    if (this.plugin) {\n      return this.plugin + ': ' + this.text\n    }\n\n    return this.text\n  }\n}", "\n\nimport { Warning } from './warning';\n\nexport class Result {\n  constructor(processor, root, opts) {\n    this.processor = processor\n    this.messages = []\n    this.root = root\n    this.opts = opts\n    this.css = undefined\n    this.map = undefined\n  }\n\n  toString() {\n    return this.css\n  }\n\n  warn(text, opts = {}) {\n    if (!opts.plugin) {\n      if (this.lastPlugin && this.lastPlugin.postcssPlugin) {\n        opts.plugin = this.lastPlugin.postcssPlugin\n      }\n    }\n\n    const warning = new Warning(text, opts)\n    this.messages.push(warning)\n\n    return warning\n  }\n\n  warnings() {\n    return this.messages.filter(i => i.type === 'warning')\n  }\n\n  get content() {\n    return this.css\n  }\n}", "import { MapGenerator } from './map-generator';\nimport { warnOnce } from './warn-once';\nimport { parse } from './parse';\nimport { Result } from './result';\nimport { stringify } from \"./stringify\";\n\nexport class NoWorkResult {\n  constructor(processor, css, opts) {\n    css = css.toString()\n    this.stringified = false\n\n    this._processor = processor\n    this._css = css\n    this._opts = opts\n    this._map = undefined\n    let root\n\n    const str = stringify\n    this.result = new Result(this._processor, root, this._opts)\n    this.result.css = css\n\n    const self = this\n    Object.defineProperty(this.result, 'root', {\n      get() {\n        return self.root\n      }\n    })\n\n    const map = new MapGenerator(str, root, this._opts, css)\n    if (map.isMap()) {\n      const [generatedCSS, generatedMap] = map.generate()\n      if (generatedCSS) {\n        this.result.css = generatedCSS\n      }\n      if (generatedMap) {\n        this.result.map = generatedMap\n      }\n    } else {\n      map.clearAnnotation()\n      this.result.css = map.css\n    }\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    return Promise.resolve(this.result)\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    return this.result\n  }\n\n  then(onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this._opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  toString() {\n    return this._css\n  }\n\n  warnings() {\n    return []\n  }\n\n  get content() {\n    return this.result.css\n  }\n\n  get css() {\n    return this.result.css\n  }\n\n  get map() {\n    return this.result.map\n  }\n\n  get messages() {\n    return []\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get root() {\n    if (this._root) {\n      return this._root\n    }\n\n    let root\n    const parser = parse\n\n    try {\n      root = parser(this._css, this._opts)\n    } catch (error) {\n      this.error = error\n    }\n\n    if (this.error) {\n      throw this.error\n    } else {\n      this._root = root\n      return root\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'NoWorkResult'\n  }\n}", "\n\nimport { Document } from \"./document\";\nimport { Root } from './root';\nimport { NoWorkResult } from './no-work-result';\n\nexport class Processor {\n  constructor(plugins = []) {\n    this.version = '8.4.49'\n    this.plugins = this.normalize(plugins)\n  }\n\n  normalize(plugins) {\n    let normalized = []\n    for (let i of plugins) {\n      if (i.postcss === true) {\n        i = i()\n      } else if (i.postcss) {\n        i = i.postcss\n      }\n\n      if (typeof i === 'object' && Array.isArray(i.plugins)) {\n        normalized = normalized.concat(i.plugins)\n      } else if (typeof i === 'object' && i.postcssPlugin) {\n        normalized.push(i)\n      } else if (typeof i === 'function') {\n        normalized.push(i)\n      } else if (typeof i === 'object' && (i.parse || i.stringify)) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            'PostCSS syntaxes cannot be used as plugins. Instead, please use ' +\n              'one of the syntax/parser/stringifier options as outlined ' +\n              'in your PostCSS runner documentation.'\n          )\n        }\n      } else {\n        throw new Error(i + ' is not a PostCSS plugin')\n      }\n    }\n    return normalized\n  }\n\n  process(css, opts = {}) {\n    if (\n      !this.plugins.length &&\n      !opts.parser &&\n      !opts.stringifier &&\n      !opts.syntax\n    ) {\n      return new NoWorkResult(this, css, opts)\n    } else {\n      return new Promise(this, css, opts)\n    }\n  }\n\n  use(plugin) {\n    this.plugins = this.plugins.concat(this.normalize([plugin]))\n    return this\n  }\n}\n\nRoot.registerProcessor(Processor)\nDocument.registerProcessor(Processor)\n", "import { AtRule } from './at-rule';\nimport { Comment } from './comment';\nimport { Declaration } from './declaration';\nimport { Root } from './root';\nimport { Rule } from './rule';\nimport { parse } from \"./parse\";\nimport { list } from \"./list\";\nimport { Input } from './input';\nimport { stringify } from \"./stringify\";\nimport { CssSyntaxError } from \"./css-syntax-error\";\nimport { Container } from \"./container\";\nimport { Document } from \"./document\";\nimport { Node } from \"./node\";\nimport { fromJSON } from \"./fromJSON\";\nimport { Processor } from \"./processor\";\nimport { Warning } from \"./warning\";\nimport { Result } from \"./result\";\n\nfunction postcss(...plugins) {\n  if (plugins.length === 1 && Array.isArray(plugins[0])) {\n    plugins = plugins[0]\n  }\n  return new Processor(plugins)\n}\n\npostcss.plugin = function plugin(name, initializer) {\n  let warningPrinted = false\n  function creator(...args) {\n    // eslint-disable-next-line no-console\n    if (console && console.warn && !warningPrinted) {\n      warningPrinted = true\n      // eslint-disable-next-line no-console\n      console.warn(\n        name +\n          ': postcss.plugin was deprecated. Migration guide:\\n' +\n          'https://evilmartians.com/chronicles/postcss-8-plugin-migration'\n      )\n    }\n    const transformer = initializer(...args)\n    transformer.postcssPlugin = name\n    transformer.postcssVersion = new Processor().version\n    return transformer\n  }\n\n  let cache\n  Object.defineProperty(creator, 'postcss', {\n    get() {\n      if (!cache) cache = creator()\n      return cache\n    }\n  })\n\n  creator.process = (css, processOpts, pluginOpts) => postcss([creator(pluginOpts)]).process(css, processOpts)\n\n  return creator\n}\n\npostcss.stringify = stringify\npostcss.parse = parse\npostcss.fromJSON = fromJSON\npostcss.list = list\n\npostcss.comment = defaults => new Comment(defaults)\npostcss.atRule = defaults => new AtRule(defaults)\npostcss.decl = defaults => new Declaration(defaults)\npostcss.rule = defaults => new Rule(defaults)\npostcss.root = defaults => new Root(defaults)\npostcss.document = defaults => new Document(defaults)\n\npostcss.CssSyntaxError = CssSyntaxError\npostcss.Declaration = Declaration\npostcss.Container = Container\npostcss.Processor = Processor\npostcss.Document = Document\npostcss.Comment = Comment\npostcss.Warning = Warning\npostcss.AtRule = AtRule\npostcss.Result = Result\npostcss.Input = Input\npostcss.Rule = Rule\npostcss.Root = Root\npostcss.Node = Node\n\nexport default postcss;", "/**\n * Core package of PurgeCSS\n *\n * Contains the core methods to analyze the files, remove unused CSS.\n *\n * @packageDocumentation\n */\n\nimport postcss from \"./postcss/postcss\";\nimport selectorParser from \"postcss-selector-parser\";\nimport {\n  IGNORE_ANNOTATION_CURRENT,\n  IGNORE_ANNOTATION_END,\n  IGNORE_ANNOTATION_NEXT,\n  IGNORE_ANNOTATION_START\n} from \"./constants\";\nimport ExtractorResultSets from \"./ExtractorResultSets\";\nimport { CSS_SAFELIST } from \"./internal-safelist\";\nimport { defaultOptions } from \"./options\";\nimport type {\n  AtRules,\n  ComplexSafelist,\n  ExtractorFunction,\n  ExtractorResultDetailed,\n  Extractors,\n  IgnoreType,\n  Options,\n  PostCSSRoot,\n  RawContent,\n  RawCSS,\n  ResultPurge,\n  UserDefinedOptions,\n  UserDefinedSafelist,\n} from \"./types\";\n\nimport { VariablesStructure } from \"./VariablesStructure\";\n\nexport * from \"./types\";\nexport { defaultOptions, ExtractorResultSets, PurgeCSS, VariablesStructure };\nexport * from \"./VariablesStructure\";\n\n\n/**\n * Format the user defined safelist into a standardized safelist object\n *\n * @param userDefinedSafelist - the user defined safelist\n * @returns the formatted safelist object that can be used in the PurgeCSS options\n *\n * @public\n */\nexport function standardizeSafelist(\n  userDefinedSafelist: UserDefinedSafelist = [],\n): Required<ComplexSafelist> {\n  if (Array.isArray(userDefinedSafelist)) {\n    return {\n      ...defaultOptions.safelist,\n      standard: userDefinedSafelist,\n    };\n  }\n  return {\n    ...defaultOptions.safelist,\n    ...userDefinedSafelist,\n  };\n}\n\n/**\n * Use the extract function to get the list of selectors\n *\n * @param content - content (e.g. html file)\n * @param extractor - PurgeCSS extractor used to extract the selectors\n * @returns the sets containing the result of the extractor function\n */\nasync function extractSelectors(\n  content: string,\n  extractor: ExtractorFunction,\n): Promise<ExtractorResultSets> {\n  return new ExtractorResultSets(await extractor(content));\n}\n\n/**\n * Check if the node is a css comment indication to ignore the selector rule\n *\n * @param node - node of postcss AST\n * @param type - type of css comment\n * @returns true if the node is a PurgeCSS ignore comment\n */\nfunction isIgnoreAnnotation(node: any, type: IgnoreType): boolean {\n  switch (type) {\n    case \"next\":\n      return node.text.includes(IGNORE_ANNOTATION_NEXT);\n    case \"start\":\n      return node.text.includes(IGNORE_ANNOTATION_START);\n    case \"end\":\n      return node.text.includes(IGNORE_ANNOTATION_END);\n  }\n}\n\n/**\n * Check if the node correspond to an empty css rule\n *\n * @param node - node of postcss AST\n * @returns true if the rule is empty\n */\nfunction isRuleEmpty(node?: any): boolean {\n  if (\n    (isPostCSSRule(node) && !node.selector) ||\n    (node?.nodes && !node.nodes.length) ||\n    (isPostCSSAtRule(node) &&\n      ((!node.nodes && !node.params) ||\n        (!node.params && node.nodes && !node.nodes.length)))\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Check if the node has a css comment indicating to ignore the current selector rule\n *\n * @param rule - rule of postcss AST\n */\nfunction hasIgnoreAnnotation(rule: any): boolean {\n  let found = false;\n  rule.walkComments((node) => {\n    if (\n      node &&\n      node.type === \"comment\" &&\n      node.text.includes(IGNORE_ANNOTATION_CURRENT)\n    ) {\n      found = true;\n      node.remove();\n    }\n  });\n  return found;\n}\n\n/**\n * Merge two extractor selectors\n *\n * @param extractorSelectorsA - extractor selectors A\n * @param extractorSelectorsB - extractor selectors B\n * @returns  the merged extractor result sets\n *\n * @public\n */\nexport function mergeExtractorSelectors(\n  ...extractors: (ExtractorResultDetailed | ExtractorResultSets)[]\n): ExtractorResultSets {\n  const result = new ExtractorResultSets([]);\n  extractors.forEach(result.merge, result);\n  return result;\n}\n\n/**\n * Strips quotes of a string\n *\n * @param str - string to be stripped\n */\nfunction stripQuotes(str: string): string {\n  return str.replace(/(^[\"'])|([\"']$)/g, \"\");\n}\n\n/**\n * Returns true if the attribute is found in the extractor selectors\n *\n * @param attributeNode - node of type `attribute`\n * @param selectors - extractor selectors\n */\nfunction isAttributeFound(\n  attributeNode: selectorParser.Attribute,\n  selectors: ExtractorResultSets,\n): boolean {\n  if (!selectors.hasAttrName(attributeNode.attribute)) {\n    return false;\n  }\n\n  if (typeof attributeNode.value === \"undefined\") {\n    return true;\n  }\n\n  switch (attributeNode.operator) {\n    case \"$=\":\n      return selectors.hasAttrSuffix(attributeNode.value);\n    case \"~=\":\n    case \"*=\":\n      return selectors.hasAttrSubstr(attributeNode.value);\n    case \"=\":\n      return selectors.hasAttrValue(attributeNode.value);\n    case \"|=\":\n    case \"^=\":\n      return selectors.hasAttrPrefix(attributeNode.value);\n    default:\n      return true;\n  }\n}\n\n/**\n * Returns true if the class is found in the extractor selectors\n *\n * @param classNode - node of type `class`\n * @param selectors - extractor selectors\n */\nfunction isClassFound(\n  classNode: selectorParser.ClassName,\n  selectors: ExtractorResultSets,\n): boolean {\n  return selectors.hasClass(classNode.value);\n}\n\n/**\n * Returns true if the identifier is found in the extractor selectors\n *\n * @param identifierNode - node of type `identifier`\n * @param selectors - extractor selectors\n */\nfunction isIdentifierFound(\n  identifierNode: selectorParser.Identifier,\n  selectors: ExtractorResultSets,\n): boolean {\n  return selectors.hasId(identifierNode.value);\n}\n\n/**\n * Returns true if the tag is found in the extractor selectors\n *\n * @param tagNode - node of type `tag`\n * @param selectors - extractor selectors\n */\nfunction isTagFound(\n  tagNode: selectorParser.Tag,\n  selectors: ExtractorResultSets,\n): boolean {\n  return selectors.hasTag(tagNode.value);\n}\n\n/**\n * Returns true if the selector is inside a pseudo class\n * (e.g. :nth-child, :nth-of-type, :only-child, :not)\n *\n * @param selector - selector\n */\nfunction isInPseudoClass(selector: selectorParser.Node): boolean {\n  return (\n    (selector.parent &&\n      selector.parent.type === \"pseudo\" &&\n      selector.parent.value.startsWith(\":\")) ||\n    false\n  );\n}\n\n/**\n * Returns true if the selector is inside the pseudo classes :where() or :is()\n * @param selector - selector\n */\nfunction isInPseudoClassWhereOrIs(selector: selectorParser.Node): boolean {\n  return (\n    (selector.parent &&\n      selector.parent.type === \"pseudo\" &&\n      (selector.parent.value === \":where\" ||\n        selector.parent.value === \":is\")) ||\n    false\n  );\n}\n\n/**\n * Returns true if the selector is a pseudo class at the root level\n * Pseudo classes checked: :where, :is, :has, :not\n * @param selector - selector\n */\nfunction isPseudoClassAtRootLevel(selector: selectorParser.Node): boolean {\n  let result = false;\n  if (\n    selector.type === \"selector\" &&\n    selector.parent?.type === \"root\" &&\n    selector.nodes.length === 1\n  ) {\n    selector.walk((node) => {\n      if (\n        node.type === \"pseudo\" &&\n        (node.value === \":where\" ||\n          node.value === \":is\" ||\n          node.value === \":has\" ||\n          node.value === \":not\")\n      ) {\n        result = true;\n      }\n    });\n  }\n  return result;\n}\n\nfunction isPostCSSAtRule(node?: any): node is any {\n  return node?.type === \"atrule\";\n}\n\nfunction isPostCSSRule(node?: any): node is any {\n  return node?.type === \"rule\";\n}\n\nfunction isPostCSSComment(\n\t\tnode?: any,\n\t): node is any {\n  return node?.type === \"comment\";\n}\n\n/**\n * Class used to instantiate PurgeCSS and can then be used\n * to purge CSS files.\n *\n * @example\n * ```ts\n * await new PurgeCSS().purge({\n *    content: ['index.html'],\n *    css: ['css/app.css']\n * })\n * ```\n *\n * @public\n */\nclass PurgeCSS {\n  private ignore = false;\n  private atRules: AtRules = {\n    fontFace: [],\n    keyframes: [],\n  };\n\n  private usedAnimations: Set<string> = new Set();\n  private usedFontFaces: Set<string> = new Set();\n  public selectorsRemoved: Set<string> = new Set();\n  public removedNodes: any[] = [];\n  public variablesStructure: VariablesStructure = new VariablesStructure();\n\n  public options: Options = defaultOptions;\n\n  private collectDeclarationsData(declaration:  any): void {\n    const { prop, value } = declaration;\n\n    // collect css properties data\n    if (this.options.variables) {\n      const usedVariablesMatchesInDeclaration =\n        value.matchAll(/var\\((.+?)[,)]/g);\n      if (prop.startsWith(\"--\")) {\n        this.variablesStructure.addVariable(declaration);\n        this.variablesStructure.addVariableUsage(\n          declaration,\n          usedVariablesMatchesInDeclaration,\n        );\n      } else {\n        this.variablesStructure.addVariableUsageInProperties(\n          usedVariablesMatchesInDeclaration,\n        );\n      }\n    }\n\n    // collect keyframes data\n    if (this.options.keyframes) {\n      if (prop === \"animation\" || prop === \"animation-name\") {\n        for (const word of value.split(/[\\s,]+/)) {\n          this.usedAnimations.add(word);\n        }\n        return;\n      }\n    }\n\n    // collect font faces data\n    if (this.options.fontFace) {\n      if (prop === \"font-family\") {\n        for (const fontName of value.split(\",\")) {\n          const cleanedFontFace = stripQuotes(fontName.trim());\n          this.usedFontFaces.add(cleanedFontFace);\n        }\n      }\n      return;\n    }\n  }\n\n  /**\n   * Get the extractor corresponding to the extension file\n   * @param filename - Name of the file\n   * @param extractors - Array of extractors definition\n   */\n  private getFileExtractor(\n    filename: string,\n    extractors: Extractors[],\n  ): ExtractorFunction {\n    const extractorObj = extractors.find((extractor) =>\n      extractor.extensions.find((ext) => filename.endsWith(ext)),\n    );\n\n    return typeof extractorObj === \"undefined\"\n      ? this.options.defaultExtractor\n      : extractorObj.extractor;\n  }\n\n\n  /**\n   * Extract the selectors present in the passed string using a PurgeCSS extractor\n   *\n   * @param content - Array of content\n   * @param extractors - Array of extractors\n   */\n  public async extractSelectorsFromString(\n    content: RawContent[],\n    extractors: Extractors[],\n  ): Promise<ExtractorResultSets> {\n    const selectors = new ExtractorResultSets([]);\n    for (const { raw, extension } of content) {\n      const extractor = this.getFileExtractor(`.${extension}`, extractors);\n      const extractedSelectors = await extractSelectors(raw, extractor);\n      selectors.merge(extractedSelectors);\n    }\n    return selectors;\n  }\n\n  /**\n   * Evaluate at-rule and register it for future reference\n   * @param node - node of postcss AST\n   */\n  private evaluateAtRule(node:any): void {\n    // keyframes\n    if (this.options.keyframes && node.name.endsWith(\"keyframes\")) {\n      this.atRules.keyframes.push(node);\n      return;\n    }\n    // font-face\n    if (this.options.fontFace && node.name === \"font-face\" && node.nodes) {\n      for (const childNode of node.nodes) {\n        if (childNode.type === \"decl\" && childNode.prop === \"font-family\") {\n          this.atRules.fontFace.push({\n            name: stripQuotes(childNode.value),\n            node,\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Evaluate css selector and decide if it should be removed or not\n   *\n   * @param node - node of postcss AST\n   * @param selectors - selectors used in content files\n   */\n  private evaluateRule(\n    node: any,\n    selectors: ExtractorResultSets,\n  ): void {\n    // exit if is in ignoring state activated by an ignore comment\n    if (this.ignore) {\n      return;\n    }\n\n    // exit if the previous annotation is a ignore next line comment\n    const annotation = node.prev();\n    if (\n      isPostCSSComment(annotation) &&\n      isIgnoreAnnotation(annotation, \"next\")\n    ) {\n      annotation.remove();\n      return;\n    }\n\n    // exit if it is inside a keyframes\n    if (\n      node.parent &&\n      isPostCSSAtRule(node.parent) &&\n      node.parent.name.endsWith(\"keyframes\")\n    ) {\n      return;\n    }\n\n    // exit if it is not a rule\n    if (!isPostCSSRule(node)) {\n      return;\n    }\n\n    // exit if it has an ignore rule comment inside\n    if (hasIgnoreAnnotation(node)) {\n      return;\n    }\n\n    const selectorsRemovedFromRule: string[] = [];\n    // selector transformer, walk over the list of the parsed selectors twice.\n    // First pass will remove the unused selectors. It goes through\n    // pseudo-classes like :where() and :is() and remove the unused\n    // selectors inside of them, but will not remove the pseudo-classes\n    // themselves. Second pass will remove selectors containing empty\n    // :where and :is.\n    node.selector = selectorParser((selectorsParsed) => {\n      selectorsParsed.walk((selector) => {\n        if (selector.type !== \"selector\") {\n          return;\n        }\n        const keepSelector = this.shouldKeepSelector(selector, selectors);\n\n        if (!keepSelector) {\n          if (this.options.rejected) {\n            this.selectorsRemoved.add(selector.toString());\n          }\n          if (this.options.rejectedCss) {\n            selectorsRemovedFromRule.push(selector.toString());\n          }\n          selector.remove();\n        }\n      });\n\n      // removes selectors containing empty :where and :is\n      selectorsParsed.walk((selector) => {\n        if (selector.type !== \"selector\") {\n          return;\n        }\n\n        if (selector.toString() && /(:where)|(:is)/.test(selector.toString())) {\n          selector.walk((node) => {\n            if (node.type !== \"pseudo\") return;\n            if (node.value !== \":where\" && node.value !== \":is\") return;\n            if (node.nodes.length === 0) {\n              selector.remove();\n            }\n          });\n        }\n      });\n    }).processSync(node.selector);\n\n    // declarations\n    if (node.selector && typeof node.nodes !== \"undefined\") {\n      for (const childNode of node.nodes) {\n        if (childNode.type !== \"decl\") continue;\n        this.collectDeclarationsData(childNode);\n      }\n    }\n\n    // remove empty rules\n    const parent = node.parent;\n    if (!node.selector) {\n      node.remove();\n    }\n    if (isRuleEmpty(parent)) parent?.remove();\n\n    // rebuild the rule with the removed selectors and optionally its parent\n    if (this.options.rejectedCss) {\n      if (selectorsRemovedFromRule.length > 0) {\n        const clone = node.clone();\n        const parentClone = parent?.clone().removeAll().append(clone);\n        clone.selectors = selectorsRemovedFromRule;\n        const nodeToPreserve = parentClone ? parentClone : clone;\n        this.removedNodes.push(nodeToPreserve);\n      }\n    }\n  }\n\n  /**\n   * Get the purged version of the css based on the files\n   *\n   * @param cssOptions - css options, files or raw strings\n   * @param selectors - set of extracted css selectors\n   */\n  public async getPurgedCSS(\n    cssOptions: Array<string | RawCSS>,\n    selectors: ExtractorResultSets,\n  ): Promise<ResultPurge[]> {\n    const sources = [];\n\n    // resolve any globs\n    const processedOptions: Array<string | RawCSS> = [];\n    for (const option of cssOptions) {\n      if (typeof option === \"string\") {\n        throw new Error(\"PurgeCSS: string options are not supported\");\n      } else {\n        processedOptions.push(option);\n      }\n    }\n\n    for (const option of processedOptions) {\n      const cssContent =\n        typeof option === \"string\"\n          ? this.options.stdin\n            ? option\n            : null\n          : option.raw;\n      const isFromFile = typeof option === \"string\" && !this.options.stdin;\n          // @ts-ignore\n      const root = postcss.parse(cssContent, {\n        from: isFromFile ? option : undefined,\n      });\n\n      // purge unused selectors\n      this.walkThroughCSS(root, selectors);\n\n      if (this.options.fontFace) this.removeUnusedFontFaces();\n      if (this.options.keyframes) this.removeUnusedKeyframes();\n      if (this.options.variables) this.removeUnusedCSSVariables();\n\n      const postCSSResult = root.toResult({\n        map: this.options.sourceMap,\n        to:\n          typeof this.options.sourceMap === \"object\"\n            ? this.options.sourceMap.to\n            : undefined,\n      });\n      const result: any = {\n        css: postCSSResult.toString(),\n        file: typeof option === \"string\" ? option : option.name,\n      };\n\n      if (this.options.sourceMap) {\n        result.sourceMap = postCSSResult.map?.toString();\n      }\n\n      if (this.options.rejected) {\n        result.rejected = Array.from(this.selectorsRemoved);\n        this.selectorsRemoved.clear();\n      }\n\n      if (this.options.rejectedCss) {\n        result.rejectedCss = postcss\n          .root({ nodes: this.removedNodes })\n          .toString();\n      }\n\n      sources.push(result);\n    }\n    return sources;\n  }\n\n  /**\n   * Check if the keyframe is safelisted with the option safelist keyframes\n   *\n   * @param keyframesName - name of the keyframe animation\n   */\n  private isKeyframesSafelisted(keyframesName: string): boolean {\n    return this.options.safelist.keyframes.some((safelistItem) => {\n      return typeof safelistItem === \"string\"\n        ? safelistItem === keyframesName\n        : safelistItem.test(keyframesName);\n    });\n  }\n\n  /**\n   * Check if the selector is blocklisted with the option blocklist\n   *\n   * @param selector - css selector\n   */\n  private isSelectorBlocklisted(selector: string): boolean {\n    return this.options.blocklist.some((blocklistItem) => {\n      return typeof blocklistItem === \"string\"\n        ? blocklistItem === selector\n        : blocklistItem.test(selector);\n    });\n  }\n\n  /**\n   * Check if the selector is safelisted with the option safelist standard\n   *\n   * @param selector - css selector\n   */\n  private isSelectorSafelisted(selector: string): boolean {\n    const isSafelisted = this.options.safelist.standard.some((safelistItem) => {\n      return typeof safelistItem === \"string\"\n        ? safelistItem === selector\n        : safelistItem.test(selector);\n    });\n    const isPseudoElement = /^::.*/.test(selector);\n    return CSS_SAFELIST.includes(selector) || isPseudoElement || isSafelisted;\n  }\n\n  /**\n   * Check if the selector is safelisted with the option safelist deep\n   *\n   * @param selector - selector\n   */\n  private isSelectorSafelistedDeep(selector: string): boolean {\n    return this.options.safelist.deep.some((safelistItem) =>\n      safelistItem.test(selector),\n    );\n  }\n\n  /**\n   * Check if the selector is safelisted with the option safelist greedy\n   *\n   * @param selector - selector\n   */\n  private isSelectorSafelistedGreedy(selector: string): boolean {\n    return this.options.safelist.greedy.some((safelistItem) =>\n      safelistItem.test(selector),\n    );\n  }\n\n  /**\n   * Remove unused CSS\n   *\n   * @param userOptions - PurgeCSS options or path to the configuration file\n   * @returns an array of object containing the filename and the associated CSS\n   *\n   * @example Using a configuration file named purgecss.config.js\n   * ```ts\n   * const purgeCSSResults = await new PurgeCSS().purge()\n   * ```\n   *\n   * @example Using a custom path to the configuration file\n   * ```ts\n   * const purgeCSSResults = await new PurgeCSS().purge('./purgecss.config.js')\n   * ```\n   *\n   * @example Using the PurgeCSS options\n   * ```ts\n   * const purgeCSSResults = await new PurgeCSS().purge({\n   *    content: ['index.html', '**\\/*.js', '**\\/*.html', '**\\/*.vue'],\n   *    css: ['css/app.css']\n   * })\n   * ```\n   */\n  public async purge(\n    userOptions: UserDefinedOptions | string | undefined,\n  ): Promise<ResultPurge[]> {\n    this.options =\n      typeof userOptions !== \"object\"\n          // @ts-ignore\n        ? await setOptions(userOptions)\n        : {\n            ...defaultOptions,\n            ...userOptions,\n            safelist: standardizeSafelist(userOptions.safelist),\n          };\n    const { content, css, extractors, safelist } = this.options;\n\n    if (this.options.variables) {\n      this.variablesStructure.safelist = safelist.variables || [];\n    }\n\n\n    const rawFormatContents = content.filter(\n      (o) => typeof o === \"object\",\n    ) as RawContent[];\n\n\n    const cssRawSelectors = await this.extractSelectorsFromString(\n      rawFormatContents,\n      extractors,\n    );\n\n    return this.getPurgedCSS(\n      css,\n      mergeExtractorSelectors({} as any, cssRawSelectors),\n    );\n  }\n\n  /**\n   * Remove unused CSS variables\n   */\n  public removeUnusedCSSVariables(): void {\n    this.variablesStructure.removeUnused();\n  }\n\n  /**\n   * Remove unused font-faces\n   */\n  public removeUnusedFontFaces(): void {\n    for (const { name, node } of this.atRules.fontFace) {\n      if (!this.usedFontFaces.has(name)) {\n        node.remove();\n      }\n    }\n  }\n\n  /**\n   * Remove unused keyframes\n   */\n  public removeUnusedKeyframes(): void {\n    for (const node of this.atRules.keyframes) {\n      if (\n        !this.usedAnimations.has(node.params) &&\n        !this.isKeyframesSafelisted(node.params)\n      ) {\n        node.remove();\n      }\n    }\n  }\n\n  /**\n   * Transform a selector node into a string\n   */\n  private getSelectorValue(selector: selectorParser.Node): string | undefined {\n    return (\n      (selector.type === \"attribute\" && selector.attribute) || selector.value\n    );\n  }\n\n  /**\n   * Determine if the selector should be kept, based on the selectors found in the files\n   *\n   * @param selector - set of css selectors found in the content files or string\n   * @param selectorsFromExtractor - selectors in the css rule\n   *\n   * @returns true if the selector should be kept in the processed CSS\n   */\n  private shouldKeepSelector(\n    selector: selectorParser.Selector,\n    selectorsFromExtractor: ExtractorResultSets,\n  ): boolean {\n    // selectors in pseudo classes are ignored except :where() and :is(). For those pseudo-classes, we are treating the selectors inside the same way as they would be outside.\n    if (isInPseudoClass(selector) && !isInPseudoClassWhereOrIs(selector)) {\n      return true;\n    }\n\n    if (isPseudoClassAtRootLevel(selector)) {\n      return true;\n    }\n\n    // if there is any greedy safelist pattern, run all the selector parts through them\n    // if there is any match, return true\n    if (this.options.safelist.greedy.length > 0) {\n      const selectorParts = selector.nodes.map(this.getSelectorValue);\n      if (\n        selectorParts.some(\n          (selectorPart) =>\n            selectorPart && this.isSelectorSafelistedGreedy(selectorPart),\n        )\n      ) {\n        return true;\n      }\n    }\n\n    let isPresent = false;\n\n    for (const selectorNode of selector.nodes) {\n      const selectorValue = this.getSelectorValue(selectorNode);\n\n      // if the selector is safelisted with children\n      // returns true to keep all children selectors\n      if (selectorValue && this.isSelectorSafelistedDeep(selectorValue)) {\n        return true;\n      }\n\n      // The selector is found in the internal and user-defined safelist\n      if (\n        selectorValue &&\n        (CSS_SAFELIST.includes(selectorValue) ||\n          this.isSelectorSafelisted(selectorValue))\n      ) {\n        isPresent = true;\n        continue;\n      }\n\n      // The selector is present in the blocklist\n      if (selectorValue && this.isSelectorBlocklisted(selectorValue)) {\n        return false;\n      }\n\n      switch (selectorNode.type) {\n        case \"attribute\":\n          // `value` is a dynamic attribute, highly used in input element\n          // the choice is to always leave `value` as it can change based on the user\n          // idem for `checked`, `selected`, `open`\n          isPresent = [\n            ...this.options.dynamicAttributes,\n            \"value\",\n            \"checked\",\n            \"selected\",\n            \"open\",\n          ].includes(selectorNode.attribute)\n            ? true\n            : isAttributeFound(selectorNode, selectorsFromExtractor);\n          break;\n        case \"class\":\n          isPresent = isClassFound(selectorNode, selectorsFromExtractor);\n          break;\n        case \"id\":\n          isPresent = isIdentifierFound(selectorNode, selectorsFromExtractor);\n          break;\n        case \"tag\":\n          isPresent = isTagFound(selectorNode, selectorsFromExtractor);\n          break;\n        default:\n          continue;\n      }\n\n      // selector is not safelisted\n      // and it has not been found as an attribute/class/id/tag\n      if (!isPresent) {\n        return false;\n      }\n    }\n\n    return isPresent;\n  }\n\n  /**\n   * Walk through the CSS AST and remove unused CSS\n   *\n   * @param root - root node of the postcss AST\n   * @param selectors - selectors used in content files\n   */\n  public walkThroughCSS(\n    root: PostCSSRoot,\n    selectors: ExtractorResultSets,\n  ): void {\n    root.walk((node) => {\n      if (node.type === \"rule\") {\n        return this.evaluateRule(node, selectors);\n      }\n      if (node.type === \"atrule\") {\n        return this.evaluateAtRule(node);\n      }\n      if (node.type === \"comment\") {\n        if (isIgnoreAnnotation(node, \"start\")) {\n          this.ignore = true;\n          // remove ignore annotation\n          node.remove();\n        } else if (isIgnoreAnnotation(node, \"end\")) {\n          this.ignore = false;\n          // remove ignore annotation\n          node.remove();\n        }\n      }\n    });\n  }\n}\n", "export const IGNORE_ANNOTATION_CURRENT = \"purgecss ignore current\";\nexport const IGNORE_ANNOTATION_NEXT = \"purgecss ignore\";\nexport const IGNORE_ANNOTATION_START = \"purgecss start ignore\";\nexport const IGNORE_ANNOTATION_END = \"purgecss end ignore\";\nexport const CONFIG_FILENAME = \"purgecss.config.js\";\n\n// Error Message\nexport const ERROR_CONFIG_FILE_LOADING = \"Error loading the config file\";\n", "import type { ExtractorResult } from \"./types\";\n\nfunction mergeSets(into: Set<string>, from?: string[] | Set<string>): void {\n  if (from) {\n    from.forEach(into.add, into);\n  }\n}\n\n/**\n * @public\n */\nclass ExtractorResultSets {\n  private undetermined = new Set<string>();\n  private attrNames = new Set<string>();\n  private attrValues = new Set<string>();\n  private classes = new Set<string>();\n  private ids = new Set<string>();\n  private tags = new Set<string>();\n\n  constructor(er: ExtractorResult) {\n    this.merge(er);\n  }\n\n  merge(that: ExtractorResult | ExtractorResultSets): this {\n    if (Array.isArray(that)) {\n      mergeSets(this.undetermined, that);\n    } else if (that instanceof ExtractorResultSets) {\n      mergeSets(this.undetermined, that.undetermined);\n      mergeSets(this.attrNames, that.attrNames);\n      mergeSets(this.attrValues, that.attrValues);\n      mergeSets(this.classes, that.classes);\n      mergeSets(this.ids, that.ids);\n      mergeSets(this.tags, that.tags);\n    } else {\n      // ExtractorResultDetailed:\n      mergeSets(this.undetermined, that.undetermined);\n      if (that.attributes) {\n        mergeSets(this.attrNames, that.attributes.names);\n        mergeSets(this.attrValues, that.attributes.values);\n      }\n      mergeSets(this.classes, that.classes);\n      mergeSets(this.ids, that.ids);\n      mergeSets(this.tags, that.tags);\n    }\n    return this;\n  }\n\n  hasAttrName(name: string): boolean {\n    return this.attrNames.has(name) || this.undetermined.has(name);\n  }\n\n  private someAttrValue(predicate: (value: string) => boolean): boolean {\n    for (const val of this.attrValues) {\n      if (predicate(val)) return true;\n    }\n    for (const val of this.undetermined) {\n      if (predicate(val)) return true;\n    }\n    return false;\n  }\n\n  hasAttrPrefix(prefix: string): boolean {\n    return this.someAttrValue((value) => value.startsWith(prefix));\n  }\n\n  hasAttrSuffix(suffix: string): boolean {\n    return this.someAttrValue((value) => value.endsWith(suffix));\n  }\n\n  hasAttrSubstr(substr: string): boolean {\n    const wordSubstr = substr.trim().split(\" \");\n    return wordSubstr.every((word) =>\n      this.someAttrValue((value) => value.includes(word)),\n    );\n  }\n\n  hasAttrValue(value: string): boolean {\n    return this.attrValues.has(value) || this.undetermined.has(value);\n  }\n\n  hasClass(name: string): boolean {\n    return this.classes.has(name) || this.undetermined.has(name);\n  }\n\n  hasId(id: string): boolean {\n    return this.ids.has(id) || this.undetermined.has(id);\n  }\n\n  hasTag(tag: string): boolean {\n    return this.tags.has(tag) || this.undetermined.has(tag);\n  }\n}\n\nexport default ExtractorResultSets;\n", "export const CSS_SAFELIST = [\"*\", \":root\", \":after\", \":before\"];\n", "import type { ExtractorResult, Options } from \"./types/\";\n\n/**\n * @public\n */\nexport const defaultOptions: Options = {\n  css: [],\n  content: [],\n  defaultExtractor: (content: string): ExtractorResult =>\n    content.match(/[A-Za-z0-9_-]+/g) || [],\n  extractors: [],\n  fontFace: false,\n  keyframes: false,\n  rejected: false,\n  rejectedCss: false,\n  stdin: false,\n  stdout: false,\n  variables: false,\n  safelist: {\n    standard: [],\n    deep: [],\n    greedy: [],\n    variables: [],\n    keyframes: [],\n  },\n  blocklist: [],\n  skippedContentGlobs: [],\n  dynamicAttributes: [],\n};\n", "import type { StringRegExpArray } from \"./types\";\n\n/**\n * @public\n */\nexport class VariableNode {\n  public nodes: VariableNode[] = [];\n  public value: any;\n  public isUsed = false;\n\n  constructor(declaration: any) {\n    this.value = declaration;\n  }\n}\n\n/**\n * @public\n */\nexport class VariablesStructure {\n  public nodes: Map<string, VariableNode[]> = new Map();\n  public usedVariables: Set<string> = new Set();\n  public safelist: StringRegExpArray = [];\n\n  addVariable(declaration: any): void {\n    const { prop } = declaration;\n    if (!this.nodes.has(prop)) {\n      const node = new VariableNode(declaration);\n      this.nodes.set(prop, [node]);\n    } else {\n      const node = new VariableNode(declaration);\n      const variableNodes = this.nodes.get(prop) || [];\n      this.nodes.set(prop, [...variableNodes, node]);\n    }\n  }\n\n  addVariableUsage(\n    declaration: any,\n    matchedVariables: IterableIterator<RegExpMatchArray>,\n  ): void {\n    const { prop } = declaration;\n    const nodes = this.nodes.get(prop);\n    for (const variableMatch of matchedVariables) {\n      // capturing group containing the variable is in index 1\n      const variableName = variableMatch[1];\n      if (this.nodes.has(variableName)) {\n        const usedVariableNodes = this.nodes.get(variableName);\n        nodes?.forEach((node) => {\n          usedVariableNodes?.forEach((usedVariableNode) =>\n            node.nodes.push(usedVariableNode),\n          );\n        });\n      }\n    }\n  }\n\n  addVariableUsageInProperties(\n    matchedVariables: IterableIterator<RegExpMatchArray>,\n  ): void {\n    for (const variableMatch of matchedVariables) {\n      // capturing group containing the variable is in index 1\n      const variableName = variableMatch[1];\n      this.usedVariables.add(variableName);\n    }\n  }\n\n  setAsUsed(variableName: string): void {\n    const nodes = this.nodes.get(variableName);\n    if (nodes) {\n      const queue = [...nodes];\n      while (queue.length !== 0) {\n        const currentNode = queue.pop();\n        if (currentNode && !currentNode.isUsed) {\n          currentNode.isUsed = true;\n          queue.push(...currentNode.nodes);\n        }\n      }\n    }\n  }\n\n  removeUnused(): void {\n    // check unordered usage\n    for (const used of this.usedVariables) {\n      const usedNodes = this.nodes.get(used);\n      if (usedNodes) {\n        for (const usedNode of usedNodes) {\n          const usedVariablesMatchesInDeclaration =\n            usedNode.value.value.matchAll(/var\\((.+?)[,)]/g);\n\n          for (const usage of usedVariablesMatchesInDeclaration) {\n            if (!this.usedVariables.has(usage[1])) {\n              this.usedVariables.add(usage[1]);\n            }\n          }\n        }\n      }\n    }\n\n    for (const used of this.usedVariables) {\n      this.setAsUsed(used);\n    }\n\n    for (const [name, declarations] of this.nodes) {\n      for (const declaration of declarations) {\n        if (!declaration.isUsed && !this.isVariablesSafelisted(name)) {\n          declaration.value.remove();\n        }\n      }\n    }\n  }\n\n  isVariablesSafelisted(variable: string): boolean {\n    return this.safelist.some((safelistItem) => {\n      return typeof safelistItem === \"string\"\n        ? safelistItem === variable\n        : safelistItem.test(variable);\n    });\n  }\n}\n", "/**\n * PostCSS Plugin for PurgeCSS\n *\n * Most bundlers and frameworks to build websites are using PostCSS.\n * The easiest way to configure PurgeCSS is with its PostCSS plugin.\n *\n * @packageDocumentation\n */\n\nimport {\n  PurgeCSS,\n  defaultOptions,\n  mergeExtractorSelectors,\n  standardizeSafelist,\n  type RawContent,\n} from \"./index\";\nimport type { UserDefinedOptions } from \"./types\";\n\nexport * from \"./types\";\n\nconst PLUGIN_NAME = \"postcss-purgecss\";\n\n/**\n * Execute PurgeCSS process on the postCSS root node\n *\n * @param opts - PurgeCSS options\n * @param root - root node of postCSS\n * @param helpers - postCSS helpers\n */\nasync function purgeCSS(\n  opts: UserDefinedOptions,\n  root: any,\n  { result }: any,\n): Promise<void> {\n  const purgeCSS = new PurgeCSS();\n\n  let configFileOptions: UserDefinedOptions | undefined;\n\n  const options = {\n    ...defaultOptions,\n    ...configFileOptions,\n    ...opts,\n    safelist: standardizeSafelist(\n      opts?.safelist || configFileOptions?.safelist,\n    ),\n  };\n\n  // @ts-ignore\n  if (opts && typeof opts.contentFunction === \"function\") {\n    // @ts-ignore\n    options.content = opts.contentFunction(\n      // @ts-ignore\n      (root.source && root.source.input.file) || \"\",\n    );\n  }\n\n  purgeCSS.options = options;\n\n  if (options.variables) {\n    purgeCSS.variablesStructure.safelist = options.safelist.variables || [];\n  }\n\n  const { content, extractors } = options;\n\n  const rawFormatContents = content.filter(\n    (o) => typeof o === \"object\",\n  ) as RawContent[];\n\n  const cssRawSelectors = await purgeCSS.extractSelectorsFromString(\n    rawFormatContents,\n    extractors,\n  );\n\n  const selectors = mergeExtractorSelectors({} as any, cssRawSelectors);\n\n  //purge unused selectors\n  purgeCSS.walkThroughCSS(root, selectors);\n\n  if (purgeCSS.options.fontFace) purgeCSS.removeUnusedFontFaces();\n  if (purgeCSS.options.keyframes) purgeCSS.removeUnusedKeyframes();\n  if (purgeCSS.options.variables) purgeCSS.removeUnusedCSSVariables();\n\n  if (purgeCSS.options.rejected && purgeCSS.selectorsRemoved.size > 0) {\n    result.messages.push({\n      type: \"purgecss\",\n      plugin: \"postcss-purgecss\",\n      text: `purging ${purgeCSS.selectorsRemoved.size} selectors:\n          ${Array.from(purgeCSS.selectorsRemoved)\n            .map((selector) => selector.trim())\n            .join(\"\\n  \")}`,\n    });\n    purgeCSS.selectorsRemoved.clear();\n  }\n}\n\n/**\n * PostCSS Plugin for PurgeCSS\n *\n * @param opts - PurgeCSS Options\n * @returns the postCSS plugin\n *\n * @public\n */\nconst purgeCSSPlugin: any = (\n  opts,\n) => {\n  if (typeof opts === \"undefined\")\n    throw new Error(\"PurgeCSS plugin does not have the correct options\");\n  return {\n    postcssPlugin: PLUGIN_NAME,\n    OnceExit(root, helpers) {\n      return purgeCSS(opts, root, helpers);\n    },\n  };\n};\npurgeCSSPlugin.postcss = true;\n\nexport default purgeCSSPlugin;\nexport { purgeCSSPlugin };\n"],
  "mappings": "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",
  "names": ["plugin", "AtRule", "Root", "Rule", "sep", "Root", "AtRule", "Rule", "parse", "LazyResult", "Processor", "Root", "Rule", "AtRule", "resolve", "pathToFileURL", "sourceMapAvailable", "pathAvailable", "resolve", "stringify", "pathToFileURL", "parse", "Processor", "plugin", "Root", "Processor", "parse", "AtRule", "Rule", "Root", "node", "purgeCSS", "postcss_default"]
}
