var o=Object.defineProperty;var i=(r,s)=>o(r,"name",{value:s,configurable:!0});function t(r,s){s&&s.forEach(r.add,r)}i(t,"mergeSets");var n=class r{constructor(s){this.undetermined=new Set;this.attrNames=new Set;this.attrValues=new Set;this.classes=new Set;this.ids=new Set;this.tags=new Set;this.merge(s)}static{i(this,"ExtractorResultSets")}merge(s){return Array.isArray(s)?t(this.undetermined,s):s instanceof r?(t(this.undetermined,s.undetermined),t(this.attrNames,s.attrNames),t(this.attrValues,s.attrValues),t(this.classes,s.classes),t(this.ids,s.ids),t(this.tags,s.tags)):(t(this.undetermined,s.undetermined),s.attributes&&(t(this.attrNames,s.attributes.names),t(this.attrValues,s.attributes.values)),t(this.classes,s.classes),t(this.ids,s.ids),t(this.tags,s.tags)),this}hasAttrName(s){return this.attrNames.has(s)||this.undetermined.has(s)}someAttrValue(s){for(let e of this.attrValues)if(s(e))return!0;for(let e of this.undetermined)if(s(e))return!0;return!1}hasAttrPrefix(s){return this.someAttrValue(e=>e.startsWith(s))}hasAttrSuffix(s){return this.someAttrValue(e=>e.endsWith(s))}hasAttrSubstr(s){return s.trim().split(" ").every(a=>this.someAttrValue(u=>u.includes(a)))}hasAttrValue(s){return this.attrValues.has(s)||this.undetermined.has(s)}hasClass(s){return this.classes.has(s)||this.undetermined.has(s)}hasId(s){return this.ids.has(s)||this.undetermined.has(s)}hasTag(s){return this.tags.has(s)||this.undetermined.has(s)}},d=n;export{d as default};
//# sourceMappingURL=ExtractorResultSets.js.map
