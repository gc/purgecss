{
  "version": 3,
  "sources": ["../../src/postcss/list.js"],
  "sourcesContent": ["export const list = {\r\n    comma(string) {\r\n        return list.split(string, [','], true);\r\n    },\r\n    space(string) {\r\n        const spaces = [' ', '\\n', '\\t'];\r\n        return list.split(string, spaces);\r\n    },\r\n    split(string, separators, last) {\r\n        const array = [];\r\n        let current = '';\r\n        let split = false;\r\n        let func = 0;\r\n        let inQuote = false;\r\n        let prevQuote = '';\r\n        let escape = false;\r\n        for (const letter of string) {\r\n            if (escape) {\r\n                escape = false;\r\n            }\r\n            else if (letter === '\\\\') {\r\n                escape = true;\r\n            }\r\n            else if (inQuote) {\r\n                if (letter === prevQuote) {\r\n                    inQuote = false;\r\n                }\r\n            }\r\n            else if (letter === '\"' || letter === \"'\") {\r\n                inQuote = true;\r\n                prevQuote = letter;\r\n            }\r\n            else if (letter === '(') {\r\n                func += 1;\r\n            }\r\n            else if (letter === ')') {\r\n                if (func > 0)\r\n                    func -= 1;\r\n            }\r\n            else if (func === 0) {\r\n                if (separators.includes(letter))\r\n                    split = true;\r\n            }\r\n            if (split) {\r\n                if (current !== '')\r\n                    array.push(current.trim());\r\n                current = '';\r\n                split = false;\r\n            }\r\n            else {\r\n                current += letter;\r\n            }\r\n        }\r\n        if (last || current !== '')\r\n            array.push(current.trim());\r\n        return array;\r\n    }\r\n};\r\n"],
  "mappings": ";AAAO,IAAM,OAAO;AAAA,EAChB,MAAM,QAAQ;AACV,WAAO,KAAK,MAAM,QAAQ,CAAC,GAAG,GAAG,IAAI;AAAA,EACzC;AAAA,EACA,MAAM,QAAQ;AACV,UAAM,SAAS,CAAC,KAAK,MAAM,GAAI;AAC/B,WAAO,KAAK,MAAM,QAAQ,MAAM;AAAA,EACpC;AAAA,EACA,MAAM,QAAQ,YAAY,MAAM;AAC5B,UAAM,QAAQ,CAAC;AACf,QAAI,UAAU;AACd,QAAI,QAAQ;AACZ,QAAI,OAAO;AACX,QAAI,UAAU;AACd,QAAI,YAAY;AAChB,QAAI,SAAS;AACb,eAAW,UAAU,QAAQ;AACzB,UAAI,QAAQ;AACR,iBAAS;AAAA,MACb,WACS,WAAW,MAAM;AACtB,iBAAS;AAAA,MACb,WACS,SAAS;AACd,YAAI,WAAW,WAAW;AACtB,oBAAU;AAAA,QACd;AAAA,MACJ,WACS,WAAW,OAAO,WAAW,KAAK;AACvC,kBAAU;AACV,oBAAY;AAAA,MAChB,WACS,WAAW,KAAK;AACrB,gBAAQ;AAAA,MACZ,WACS,WAAW,KAAK;AACrB,YAAI,OAAO;AACP,kBAAQ;AAAA,MAChB,WACS,SAAS,GAAG;AACjB,YAAI,WAAW,SAAS,MAAM;AAC1B,kBAAQ;AAAA,MAChB;AACA,UAAI,OAAO;AACP,YAAI,YAAY;AACZ,gBAAM,KAAK,QAAQ,KAAK,CAAC;AAC7B,kBAAU;AACV,gBAAQ;AAAA,MACZ,OACK;AACD,mBAAW;AAAA,MACf;AAAA,IACJ;AACA,QAAI,QAAQ,YAAY;AACpB,YAAM,KAAK,QAAQ,KAAK,CAAC;AAC7B,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
