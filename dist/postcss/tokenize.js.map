{
  "version": 3,
  "sources": ["../../src/postcss/tokenize.js"],
  "sourcesContent": ["'use strict'\n\nconst SINGLE_QUOTE = \"'\".charCodeAt(0)\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0)\nconst BACKSLASH = '\\\\'.charCodeAt(0)\nconst SLASH = '/'.charCodeAt(0)\nconst NEWLINE = '\\n'.charCodeAt(0)\nconst SPACE = ' '.charCodeAt(0)\nconst FEED = '\\f'.charCodeAt(0)\nconst TAB = '\\t'.charCodeAt(0)\nconst CR = '\\r'.charCodeAt(0)\nconst OPEN_SQUARE = '['.charCodeAt(0)\nconst CLOSE_SQUARE = ']'.charCodeAt(0)\nconst OPEN_PARENTHESES = '('.charCodeAt(0)\nconst CLOSE_PARENTHESES = ')'.charCodeAt(0)\nconst OPEN_CURLY = '{'.charCodeAt(0)\nconst CLOSE_CURLY = '}'.charCodeAt(0)\nconst SEMICOLON = ';'.charCodeAt(0)\nconst ASTERISK = '*'.charCodeAt(0)\nconst COLON = ':'.charCodeAt(0)\nconst AT = '@'.charCodeAt(0)\n\nconst RE_AT_END = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g\nconst RE_BAD_BRACKET = /.[\\r\\n\"'(/\\\\]/\nconst RE_HEX_ESCAPE = /[\\da-f]/i\n\nmodule.exports = function tokenizer(input, options = {}) {\n  let css = input.css.valueOf()\n  let ignore = options.ignoreErrors\n\n  let code, content, escape, next, quote\n  let currentToken, escaped, escapePos, n, prev\n\n  let length = css.length\n  let pos = 0\n  let buffer = []\n  let returned = []\n\n  function position() {\n    return pos\n  }\n\n  function unclosed(what) {\n    throw input.error('Unclosed ' + what, pos)\n  }\n\n  function endOfFile() {\n    return returned.length === 0 && pos >= length\n  }\n\n  function nextToken(opts) {\n    if (returned.length) return returned.pop()\n    if (pos >= length) return\n\n    let ignoreUnclosed = opts ? opts.ignoreUnclosed : false\n\n    code = css.charCodeAt(pos)\n\n    switch (code) {\n      case NEWLINE:\n      case SPACE:\n      case TAB:\n      case CR:\n      case FEED: {\n        next = pos\n        do {\n          next += 1\n          code = css.charCodeAt(next)\n        } while (\n          code === SPACE ||\n          code === NEWLINE ||\n          code === TAB ||\n          code === CR ||\n          code === FEED\n        )\n\n        currentToken = ['space', css.slice(pos, next)]\n        pos = next - 1\n        break\n      }\n\n      case OPEN_SQUARE:\n      case CLOSE_SQUARE:\n      case OPEN_CURLY:\n      case CLOSE_CURLY:\n      case COLON:\n      case SEMICOLON:\n      case CLOSE_PARENTHESES: {\n        let controlChar = String.fromCharCode(code)\n        currentToken = [controlChar, controlChar, pos]\n        break\n      }\n\n      case OPEN_PARENTHESES: {\n        prev = buffer.length ? buffer.pop()[1] : ''\n        n = css.charCodeAt(pos + 1)\n        if (\n          prev === 'url' &&\n          n !== SINGLE_QUOTE &&\n          n !== DOUBLE_QUOTE &&\n          n !== SPACE &&\n          n !== NEWLINE &&\n          n !== TAB &&\n          n !== FEED &&\n          n !== CR\n        ) {\n          next = pos\n          do {\n            escaped = false\n            next = css.indexOf(')', next + 1)\n            if (next === -1) {\n              if (ignore || ignoreUnclosed) {\n                next = pos\n                break\n              } else {\n                unclosed('bracket')\n              }\n            }\n            escapePos = next\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1\n              escaped = !escaped\n            }\n          } while (escaped)\n\n          currentToken = ['brackets', css.slice(pos, next + 1), pos, next]\n\n          pos = next\n        } else {\n          next = css.indexOf(')', pos + 1)\n          content = css.slice(pos, next + 1)\n\n          if (next === -1 || RE_BAD_BRACKET.test(content)) {\n            currentToken = ['(', '(', pos]\n          } else {\n            currentToken = ['brackets', content, pos, next]\n            pos = next\n          }\n        }\n\n        break\n      }\n\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE: {\n        quote = code === SINGLE_QUOTE ? \"'\" : '\"'\n        next = pos\n        do {\n          escaped = false\n          next = css.indexOf(quote, next + 1)\n          if (next === -1) {\n            if (ignore || ignoreUnclosed) {\n              next = pos + 1\n              break\n            } else {\n              unclosed('string')\n            }\n          }\n          escapePos = next\n          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n            escapePos -= 1\n            escaped = !escaped\n          }\n        } while (escaped)\n\n        currentToken = ['string', css.slice(pos, next + 1), pos, next]\n        pos = next\n        break\n      }\n\n      case AT: {\n        RE_AT_END.lastIndex = pos + 1\n        RE_AT_END.test(css)\n        if (RE_AT_END.lastIndex === 0) {\n          next = css.length - 1\n        } else {\n          next = RE_AT_END.lastIndex - 2\n        }\n\n        currentToken = ['at-word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      case BACKSLASH: {\n        next = pos\n        escape = true\n        while (css.charCodeAt(next + 1) === BACKSLASH) {\n          next += 1\n          escape = !escape\n        }\n        code = css.charCodeAt(next + 1)\n        if (\n          escape &&\n          code !== SLASH &&\n          code !== SPACE &&\n          code !== NEWLINE &&\n          code !== TAB &&\n          code !== CR &&\n          code !== FEED\n        ) {\n          next += 1\n          if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n            while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {\n              next += 1\n            }\n            if (css.charCodeAt(next + 1) === SPACE) {\n              next += 1\n            }\n          }\n        }\n\n        currentToken = ['word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      default: {\n        if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n          next = css.indexOf('*/', pos + 2) + 1\n          if (next === 0) {\n            if (ignore || ignoreUnclosed) {\n              next = css.length\n            } else {\n              unclosed('comment')\n            }\n          }\n\n          currentToken = ['comment', css.slice(pos, next + 1), pos, next]\n          pos = next\n        } else {\n          RE_WORD_END.lastIndex = pos + 1\n          RE_WORD_END.test(css)\n          if (RE_WORD_END.lastIndex === 0) {\n            next = css.length - 1\n          } else {\n            next = RE_WORD_END.lastIndex - 2\n          }\n\n          currentToken = ['word', css.slice(pos, next + 1), pos, next]\n          buffer.push(currentToken)\n          pos = next\n        }\n\n        break\n      }\n    }\n\n    pos++\n    return currentToken\n  }\n\n  function back(token) {\n    returned.push(token)\n  }\n\n  return {\n    back,\n    endOfFile,\n    nextToken,\n    position\n  }\n}\n"],
  "mappings": "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",
  "names": ["require_tokenize", "__commonJSMin", "exports", "module", "RE_AT_END", "RE_WORD_END", "RE_BAD_BRACKET", "RE_HEX_ESCAPE", "__name", "input", "options", "css", "ignore", "code", "content", "escape", "next", "quote", "currentToken", "escaped", "escapePos", "n", "prev", "length", "pos", "buffer", "returned", "position", "unclosed", "what", "endOfFile", "nextToken", "opts", "ignoreUnclosed", "controlChar", "back", "token"]
}
