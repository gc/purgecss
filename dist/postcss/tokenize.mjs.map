{
  "version": 3,
  "sources": ["../../src/postcss/tokenize.js"],
  "sourcesContent": ["const SINGLE_QUOTE = \"'\".charCodeAt(0);\r\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0);\r\nconst BACKSLASH = '\\\\'.charCodeAt(0);\r\nconst SLASH = '/'.charCodeAt(0);\r\nconst NEWLINE = '\\n'.charCodeAt(0);\r\nconst SPACE = ' '.charCodeAt(0);\r\nconst FEED = '\\f'.charCodeAt(0);\r\nconst TAB = '\\t'.charCodeAt(0);\r\nconst CR = '\\r'.charCodeAt(0);\r\nconst OPEN_SQUARE = '['.charCodeAt(0);\r\nconst CLOSE_SQUARE = ']'.charCodeAt(0);\r\nconst OPEN_PARENTHESES = '('.charCodeAt(0);\r\nconst CLOSE_PARENTHESES = ')'.charCodeAt(0);\r\nconst OPEN_CURLY = '{'.charCodeAt(0);\r\nconst CLOSE_CURLY = '}'.charCodeAt(0);\r\nconst SEMICOLON = ';'.charCodeAt(0);\r\nconst ASTERISK = '*'.charCodeAt(0);\r\nconst COLON = ':'.charCodeAt(0);\r\nconst AT = '@'.charCodeAt(0);\r\nconst RE_AT_END = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g;\r\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g;\r\nconst RE_BAD_BRACKET = /.[\\r\\n\"'(/\\\\]/;\r\nconst RE_HEX_ESCAPE = /[\\da-f]/i;\r\nexport function tokenizer(input, options = {}) {\r\n    const css = input.css.valueOf();\r\n    const ignore = options.ignoreErrors;\r\n    let code, content, escape, next, quote;\r\n    let currentToken, escaped, escapePos, n, prev;\r\n    const length = css.length;\r\n    let pos = 0;\r\n    const buffer = [];\r\n    const returned = [];\r\n    function position() {\r\n        return pos;\r\n    }\r\n    function unclosed(what) {\r\n        throw input.error('Unclosed ' + what, pos);\r\n    }\r\n    function endOfFile() {\r\n        return returned.length === 0 && pos >= length;\r\n    }\r\n    function nextToken(opts) {\r\n        if (returned.length)\r\n            return returned.pop();\r\n        if (pos >= length)\r\n            return;\r\n        const ignoreUnclosed = opts ? opts.ignoreUnclosed : false;\r\n        code = css.charCodeAt(pos);\r\n        switch (code) {\r\n            case NEWLINE:\r\n            case SPACE:\r\n            case TAB:\r\n            case CR:\r\n            case FEED: {\r\n                next = pos;\r\n                do {\r\n                    next += 1;\r\n                    code = css.charCodeAt(next);\r\n                } while (code === SPACE ||\r\n                    code === NEWLINE ||\r\n                    code === TAB ||\r\n                    code === CR ||\r\n                    code === FEED);\r\n                currentToken = ['space', css.slice(pos, next)];\r\n                pos = next - 1;\r\n                break;\r\n            }\r\n            case OPEN_SQUARE:\r\n            case CLOSE_SQUARE:\r\n            case OPEN_CURLY:\r\n            case CLOSE_CURLY:\r\n            case COLON:\r\n            case SEMICOLON:\r\n            case CLOSE_PARENTHESES: {\r\n                const controlChar = String.fromCharCode(code);\r\n                currentToken = [controlChar, controlChar, pos];\r\n                break;\r\n            }\r\n            case OPEN_PARENTHESES: {\r\n                prev = buffer.length ? buffer.pop()[1] : '';\r\n                n = css.charCodeAt(pos + 1);\r\n                if (prev === 'url' &&\r\n                    n !== SINGLE_QUOTE &&\r\n                    n !== DOUBLE_QUOTE &&\r\n                    n !== SPACE &&\r\n                    n !== NEWLINE &&\r\n                    n !== TAB &&\r\n                    n !== FEED &&\r\n                    n !== CR) {\r\n                    next = pos;\r\n                    do {\r\n                        escaped = false;\r\n                        next = css.indexOf(')', next + 1);\r\n                        if (next === -1) {\r\n                            if (ignore || ignoreUnclosed) {\r\n                                next = pos;\r\n                                break;\r\n                            }\r\n                            else {\r\n                                unclosed('bracket');\r\n                            }\r\n                        }\r\n                        escapePos = next;\r\n                        while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\r\n                            escapePos -= 1;\r\n                            escaped = !escaped;\r\n                        }\r\n                    } while (escaped);\r\n                    currentToken = ['brackets', css.slice(pos, next + 1), pos, next];\r\n                    pos = next;\r\n                }\r\n                else {\r\n                    next = css.indexOf(')', pos + 1);\r\n                    content = css.slice(pos, next + 1);\r\n                    if (next === -1 || RE_BAD_BRACKET.test(content)) {\r\n                        currentToken = ['(', '(', pos];\r\n                    }\r\n                    else {\r\n                        currentToken = ['brackets', content, pos, next];\r\n                        pos = next;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case SINGLE_QUOTE:\r\n            case DOUBLE_QUOTE: {\r\n                quote = code === SINGLE_QUOTE ? \"'\" : '\"';\r\n                next = pos;\r\n                do {\r\n                    escaped = false;\r\n                    next = css.indexOf(quote, next + 1);\r\n                    if (next === -1) {\r\n                        if (ignore || ignoreUnclosed) {\r\n                            next = pos + 1;\r\n                            break;\r\n                        }\r\n                        else {\r\n                            unclosed('string');\r\n                        }\r\n                    }\r\n                    escapePos = next;\r\n                    while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\r\n                        escapePos -= 1;\r\n                        escaped = !escaped;\r\n                    }\r\n                } while (escaped);\r\n                currentToken = ['string', css.slice(pos, next + 1), pos, next];\r\n                pos = next;\r\n                break;\r\n            }\r\n            case AT: {\r\n                RE_AT_END.lastIndex = pos + 1;\r\n                RE_AT_END.test(css);\r\n                if (RE_AT_END.lastIndex === 0) {\r\n                    next = css.length - 1;\r\n                }\r\n                else {\r\n                    next = RE_AT_END.lastIndex - 2;\r\n                }\r\n                currentToken = ['at-word', css.slice(pos, next + 1), pos, next];\r\n                pos = next;\r\n                break;\r\n            }\r\n            case BACKSLASH: {\r\n                next = pos;\r\n                escape = true;\r\n                while (css.charCodeAt(next + 1) === BACKSLASH) {\r\n                    next += 1;\r\n                    escape = !escape;\r\n                }\r\n                code = css.charCodeAt(next + 1);\r\n                if (escape &&\r\n                    code !== SLASH &&\r\n                    code !== SPACE &&\r\n                    code !== NEWLINE &&\r\n                    code !== TAB &&\r\n                    code !== CR &&\r\n                    code !== FEED) {\r\n                    next += 1;\r\n                    if (RE_HEX_ESCAPE.test(css.charAt(next))) {\r\n                        while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {\r\n                            next += 1;\r\n                        }\r\n                        if (css.charCodeAt(next + 1) === SPACE) {\r\n                            next += 1;\r\n                        }\r\n                    }\r\n                }\r\n                currentToken = ['word', css.slice(pos, next + 1), pos, next];\r\n                pos = next;\r\n                break;\r\n            }\r\n            default: {\r\n                if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\r\n                    next = css.indexOf('*/', pos + 2) + 1;\r\n                    if (next === 0) {\r\n                        if (ignore || ignoreUnclosed) {\r\n                            next = css.length;\r\n                        }\r\n                        else {\r\n                            unclosed('comment');\r\n                        }\r\n                    }\r\n                    currentToken = ['comment', css.slice(pos, next + 1), pos, next];\r\n                    pos = next;\r\n                }\r\n                else {\r\n                    RE_WORD_END.lastIndex = pos + 1;\r\n                    RE_WORD_END.test(css);\r\n                    if (RE_WORD_END.lastIndex === 0) {\r\n                        next = css.length - 1;\r\n                    }\r\n                    else {\r\n                        next = RE_WORD_END.lastIndex - 2;\r\n                    }\r\n                    currentToken = ['word', css.slice(pos, next + 1), pos, next];\r\n                    buffer.push(currentToken);\r\n                    pos = next;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        pos++;\r\n        return currentToken;\r\n    }\r\n    function back(token) {\r\n        returned.push(token);\r\n    }\r\n    return {\r\n        back,\r\n        endOfFile,\r\n        nextToken,\r\n        position\r\n    };\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
