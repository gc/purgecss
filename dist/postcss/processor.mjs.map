{
  "version": 3,
  "sources": ["../../src/postcss/css-syntax-error.js", "../../src/postcss/stringifier.js", "../../src/postcss/stringify.js", "../../src/postcss/symbols.js", "../../src/postcss/node.js", "../../src/postcss/comment.js", "../../src/postcss/declaration.js", "../../src/postcss/container.js", "../../src/postcss/document.js", "../../src/postcss/root.js", "../../src/postcss/input.js", "../../src/postcss/map-generator.js", "../../src/postcss/warn-once.js", "../../src/postcss/at-rule.js", "../../src/postcss/list.js", "../../src/postcss/rule.js", "../../src/postcss/tokenize.js", "../../src/postcss/parser.js", "../../src/postcss/parse.js", "../../src/postcss/warning.js", "../../src/postcss/result.js", "../../src/postcss/no-work-result.js", "../../src/postcss/lazy-result.js", "../../src/postcss/processor.js"],
  "sourcesContent": ["export class CssSyntaxError extends Error {\r\n    constructor(message, line, column, source, file, plugin) {\r\n        super(message);\r\n        this.name = 'CssSyntaxError';\r\n        this.reason = message;\r\n        if (file) {\r\n            this.file = file;\r\n        }\r\n        if (source) {\r\n            this.source = source;\r\n        }\r\n        if (plugin) {\r\n            this.plugin = plugin;\r\n        }\r\n        if (typeof line !== 'undefined' && typeof column !== 'undefined') {\r\n            if (typeof line === 'number') {\r\n                this.line = line;\r\n                this.column = column;\r\n            }\r\n            else {\r\n                this.line = line.line;\r\n                this.column = line.column;\r\n                this.endLine = column.line;\r\n                this.endColumn = column.column;\r\n            }\r\n        }\r\n        this.setMessage();\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, CssSyntaxError);\r\n        }\r\n    }\r\n    setMessage() {\r\n        this.message = this.plugin ? this.plugin + ': ' : '';\r\n        this.message += this.file ? this.file : '<css input>';\r\n        if (typeof this.line !== 'undefined') {\r\n            this.message += ':' + this.line + ':' + this.column;\r\n        }\r\n        this.message += ': ' + this.reason;\r\n    }\r\n    showSourceCode() {\r\n        return '';\r\n    }\r\n    toString() {\r\n        let code = this.showSourceCode();\r\n        if (code) {\r\n            code = '\\n\\n' + code + '\\n';\r\n        }\r\n        return this.name + ': ' + this.message + code;\r\n    }\r\n}\r\n", "const DEFAULT_RAW = {\r\n    after: '\\n',\r\n    beforeClose: '\\n',\r\n    beforeComment: '\\n',\r\n    beforeDecl: '\\n',\r\n    beforeOpen: ' ',\r\n    beforeRule: '\\n',\r\n    colon: ': ',\r\n    commentLeft: ' ',\r\n    commentRight: ' ',\r\n    emptyBody: '',\r\n    indent: '    ',\r\n    semicolon: false\r\n};\r\nfunction capitalize(str) {\r\n    return str[0].toUpperCase() + str.slice(1);\r\n}\r\nexport class Stringifier {\r\n    constructor(builder) {\r\n        this.builder = builder;\r\n    }\r\n    atrule(node, semicolon) {\r\n        let name = '@' + node.name;\r\n        const params = node.params ? this.rawValue(node, 'params') : '';\r\n        if (typeof node.raws.afterName !== 'undefined') {\r\n            name += node.raws.afterName;\r\n        }\r\n        else if (params) {\r\n            name += ' ';\r\n        }\r\n        if (node.nodes) {\r\n            this.block(node, name + params);\r\n        }\r\n        else {\r\n            const end = (node.raws.between || '') + (semicolon ? ';' : '');\r\n            this.builder(name + params + end, node);\r\n        }\r\n    }\r\n    beforeAfter(node, detect) {\r\n        let value;\r\n        if (node.type === 'decl') {\r\n            value = this.raw(node, null, 'beforeDecl');\r\n        }\r\n        else if (node.type === 'comment') {\r\n            value = this.raw(node, null, 'beforeComment');\r\n        }\r\n        else if (detect === 'before') {\r\n            value = this.raw(node, null, 'beforeRule');\r\n        }\r\n        else {\r\n            value = this.raw(node, null, 'beforeClose');\r\n        }\r\n        let buf = node.parent;\r\n        let depth = 0;\r\n        while (buf && buf.type !== 'root') {\r\n            depth += 1;\r\n            buf = buf.parent;\r\n        }\r\n        if (value.includes('\\n')) {\r\n            const indent = this.raw(node, null, 'indent');\r\n            if (indent.length) {\r\n                for (let step = 0; step < depth; step++)\r\n                    value += indent;\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n    block(node, start) {\r\n        const between = this.raw(node, 'between', 'beforeOpen');\r\n        this.builder(start + between + '{', node, 'start');\r\n        let after;\r\n        if (node.nodes && node.nodes.length) {\r\n            this.body(node);\r\n            after = this.raw(node, 'after');\r\n        }\r\n        else {\r\n            after = this.raw(node, 'after', 'emptyBody');\r\n        }\r\n        if (after)\r\n            this.builder(after);\r\n        this.builder('}', node, 'end');\r\n    }\r\n    body(node) {\r\n        let last = node.nodes.length - 1;\r\n        while (last > 0) {\r\n            if (node.nodes[last].type !== 'comment')\r\n                break;\r\n            last -= 1;\r\n        }\r\n        const semicolon = this.raw(node, 'semicolon');\r\n        for (let i = 0; i < node.nodes.length; i++) {\r\n            const child = node.nodes[i];\r\n            const before = this.raw(child, 'before');\r\n            if (before)\r\n                this.builder(before);\r\n            this.stringify(child, last !== i || semicolon);\r\n        }\r\n    }\r\n    comment(node) {\r\n        const left = this.raw(node, 'left', 'commentLeft');\r\n        const right = this.raw(node, 'right', 'commentRight');\r\n        this.builder('/*' + left + node.text + right + '*/', node);\r\n    }\r\n    decl(node, semicolon) {\r\n        const between = this.raw(node, 'between', 'colon');\r\n        let string = node.prop + between + this.rawValue(node, 'value');\r\n        if (node.important) {\r\n            string += node.raws.important || ' !important';\r\n        }\r\n        if (semicolon)\r\n            string += ';';\r\n        this.builder(string, node);\r\n    }\r\n    document(node) {\r\n        this.body(node);\r\n    }\r\n    raw(node, own, detect) {\r\n        let value;\r\n        if (!detect)\r\n            detect = own;\r\n        // Already had\r\n        if (own) {\r\n            value = node.raws[own];\r\n            if (typeof value !== 'undefined')\r\n                return value;\r\n        }\r\n        const parent = node.parent;\r\n        if (detect === 'before') {\r\n            // Hack for first rule in CSS\r\n            if (!parent || (parent.type === 'root' && parent.first === node)) {\r\n                return '';\r\n            }\r\n            // `root` nodes in `document` should use only their own raws\r\n            if (parent && parent.type === 'document') {\r\n                return '';\r\n            }\r\n        }\r\n        // Floating child without parent\r\n        if (!parent)\r\n            return DEFAULT_RAW[detect];\r\n        // Detect style by other nodes\r\n        const root = node.root();\r\n        if (!root.rawCache)\r\n            root.rawCache = {};\r\n        if (typeof root.rawCache[detect] !== 'undefined') {\r\n            return root.rawCache[detect];\r\n        }\r\n        if (detect === 'before' || detect === 'after') {\r\n            return this.beforeAfter(node, detect);\r\n        }\r\n        else {\r\n            const method = 'raw' + capitalize(detect);\r\n            if (this[method]) {\r\n                value = this[method](root, node);\r\n            }\r\n            else {\r\n                root.walk(i => {\r\n                    value = i.raws[own];\r\n                    if (typeof value !== 'undefined')\r\n                        return false;\r\n                });\r\n            }\r\n        }\r\n        if (typeof value === 'undefined')\r\n            value = DEFAULT_RAW[detect];\r\n        root.rawCache[detect] = value;\r\n        return value;\r\n    }\r\n    rawBeforeClose(root) {\r\n        let value;\r\n        root.walk(i => {\r\n            if (i.nodes && i.nodes.length > 0) {\r\n                if (typeof i.raws.after !== 'undefined') {\r\n                    value = i.raws.after;\r\n                    if (value.includes('\\n')) {\r\n                        value = value.replace(/[^\\n]+$/, '');\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n        });\r\n        if (value)\r\n            value = value.replace(/\\S/g, '');\r\n        return value;\r\n    }\r\n    rawBeforeComment(root, node) {\r\n        let value;\r\n        root.walkComments(i => {\r\n            if (typeof i.raws.before !== 'undefined') {\r\n                value = i.raws.before;\r\n                if (value.includes('\\n')) {\r\n                    value = value.replace(/[^\\n]+$/, '');\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n        if (typeof value === 'undefined') {\r\n            value = this.raw(node, null, 'beforeDecl');\r\n        }\r\n        else if (value) {\r\n            value = value.replace(/\\S/g, '');\r\n        }\r\n        return value;\r\n    }\r\n    rawBeforeDecl(root, node) {\r\n        let value;\r\n        root.walkDecls(i => {\r\n            if (typeof i.raws.before !== 'undefined') {\r\n                value = i.raws.before;\r\n                if (value.includes('\\n')) {\r\n                    value = value.replace(/[^\\n]+$/, '');\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n        if (typeof value === 'undefined') {\r\n            value = this.raw(node, null, 'beforeRule');\r\n        }\r\n        else if (value) {\r\n            value = value.replace(/\\S/g, '');\r\n        }\r\n        return value;\r\n    }\r\n    rawBeforeOpen(root) {\r\n        let value;\r\n        root.walk(i => {\r\n            if (i.type !== 'decl') {\r\n                value = i.raws.between;\r\n                if (typeof value !== 'undefined')\r\n                    return false;\r\n            }\r\n        });\r\n        return value;\r\n    }\r\n    rawBeforeRule(root) {\r\n        let value;\r\n        root.walk(i => {\r\n            if (i.nodes && (i.parent !== root || root.first !== i)) {\r\n                if (typeof i.raws.before !== 'undefined') {\r\n                    value = i.raws.before;\r\n                    if (value.includes('\\n')) {\r\n                        value = value.replace(/[^\\n]+$/, '');\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n        });\r\n        if (value)\r\n            value = value.replace(/\\S/g, '');\r\n        return value;\r\n    }\r\n    rawColon(root) {\r\n        let value;\r\n        root.walkDecls(i => {\r\n            if (typeof i.raws.between !== 'undefined') {\r\n                value = i.raws.between.replace(/[^\\s:]/g, '');\r\n                return false;\r\n            }\r\n        });\r\n        return value;\r\n    }\r\n    rawEmptyBody(root) {\r\n        let value;\r\n        root.walk(i => {\r\n            if (i.nodes && i.nodes.length === 0) {\r\n                value = i.raws.after;\r\n                if (typeof value !== 'undefined')\r\n                    return false;\r\n            }\r\n        });\r\n        return value;\r\n    }\r\n    rawIndent(root) {\r\n        if (root.raws.indent)\r\n            return root.raws.indent;\r\n        let value;\r\n        root.walk(i => {\r\n            const p = i.parent;\r\n            if (p && p !== root && p.parent && p.parent === root) {\r\n                if (typeof i.raws.before !== 'undefined') {\r\n                    const parts = i.raws.before.split('\\n');\r\n                    value = parts[parts.length - 1];\r\n                    value = value.replace(/\\S/g, '');\r\n                    return false;\r\n                }\r\n            }\r\n        });\r\n        return value;\r\n    }\r\n    rawSemicolon(root) {\r\n        let value;\r\n        root.walk(i => {\r\n            if (i.nodes && i.nodes.length && i.last.type === 'decl') {\r\n                value = i.raws.semicolon;\r\n                if (typeof value !== 'undefined')\r\n                    return false;\r\n            }\r\n        });\r\n        return value;\r\n    }\r\n    rawValue(node, prop) {\r\n        const value = node[prop];\r\n        const raw = node.raws[prop];\r\n        if (raw && raw.value === value) {\r\n            return raw.raw;\r\n        }\r\n        return value;\r\n    }\r\n    root(node) {\r\n        this.body(node);\r\n        if (node.raws.after)\r\n            this.builder(node.raws.after);\r\n    }\r\n    rule(node) {\r\n        this.block(node, this.rawValue(node, 'selector'));\r\n        if (node.raws.ownSemicolon) {\r\n            this.builder(node.raws.ownSemicolon, node, 'end');\r\n        }\r\n    }\r\n    stringify(node, semicolon) {\r\n        /* c8 ignore start */\r\n        if (!this[node.type]) {\r\n            throw new Error('Unknown AST node type ' +\r\n                node.type +\r\n                '. ' +\r\n                'Maybe you need to change PostCSS stringifier.');\r\n        }\r\n        /* c8 ignore stop */\r\n        this[node.type](node, semicolon);\r\n    }\r\n}\r\n", "import { Stringifier } from \"./stringifier\";\r\nexport function stringify(node, builder) {\r\n    const str = new Stringifier(builder);\r\n    str.stringify(node);\r\n}\r\n", "export const isClean = Symbol('isClean');\r\nexport const my = Symbol('my');\r\n", "import { CssSyntaxError } from \"./css-syntax-error\";\r\nimport { Stringifier } from \"./stringifier\";\r\nimport { stringify } from \"./stringify\";\r\nimport { isClean, my } from \"./symbols\";\r\nfunction cloneNode(obj, parent) {\r\n    const cloned = new obj.constructor();\r\n    for (const i in obj) {\r\n        if (!Object.prototype.hasOwnProperty.call(obj, i)) {\r\n            /* c8 ignore next 2 */\r\n            continue;\r\n        }\r\n        if (i === 'proxyCache')\r\n            continue;\r\n        let value = obj[i];\r\n        const type = typeof value;\r\n        if (i === 'parent' && type === 'object') {\r\n            if (parent)\r\n                cloned[i] = parent;\r\n        }\r\n        else if (i === 'source') {\r\n            cloned[i] = value;\r\n        }\r\n        else if (Array.isArray(value)) {\r\n            cloned[i] = value.map(j => cloneNode(j, cloned));\r\n        }\r\n        else {\r\n            if (type === 'object' && value !== null)\r\n                value = cloneNode(value);\r\n            cloned[i] = value;\r\n        }\r\n    }\r\n    return cloned;\r\n}\r\nfunction sourceOffset(inputCSS, position) {\r\n    // Not all custom syntaxes support `offset` in `source.start` and `source.end`\r\n    if (position &&\r\n        typeof position.offset !== 'undefined') {\r\n        return position.offset;\r\n    }\r\n    let column = 1;\r\n    let line = 1;\r\n    let offset = 0;\r\n    for (let i = 0; i < inputCSS.length; i++) {\r\n        if (line === position.line && column === position.column) {\r\n            offset = i;\r\n            break;\r\n        }\r\n        if (inputCSS[i] === '\\n') {\r\n            column = 1;\r\n            line += 1;\r\n        }\r\n        else {\r\n            column += 1;\r\n        }\r\n    }\r\n    return offset;\r\n}\r\nexport class Node {\r\n    constructor(defaults = {}) {\r\n        this.raws = {};\r\n        this[isClean] = false;\r\n        this[my] = true;\r\n        for (const name in defaults) {\r\n            if (name === 'nodes') {\r\n                this.nodes = [];\r\n                for (const node of defaults[name]) {\r\n                    if (typeof node.clone === 'function') {\r\n                        this.append(node.clone());\r\n                    }\r\n                    else {\r\n                        this.append(node);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                this[name] = defaults[name];\r\n            }\r\n        }\r\n    }\r\n    addToError(error) {\r\n        error.postcssNode = this;\r\n        if (error.stack && this.source && /\\n\\s{4}at /.test(error.stack)) {\r\n            const s = this.source;\r\n            error.stack = error.stack.replace(/\\n\\s{4}at /, `$&${s.input.from}:${s.start.line}:${s.start.column}$&`);\r\n        }\r\n        return error;\r\n    }\r\n    after(add) {\r\n        this.parent.insertAfter(this, add);\r\n        return this;\r\n    }\r\n    assign(overrides = {}) {\r\n        for (const name in overrides) {\r\n            this[name] = overrides[name];\r\n        }\r\n        return this;\r\n    }\r\n    before(add) {\r\n        this.parent.insertBefore(this, add);\r\n        return this;\r\n    }\r\n    cleanRaws(keepBetween) {\r\n        delete this.raws.before;\r\n        delete this.raws.after;\r\n        if (!keepBetween)\r\n            delete this.raws.between;\r\n    }\r\n    clone(overrides = {}) {\r\n        const cloned = cloneNode(this);\r\n        for (const name in overrides) {\r\n            cloned[name] = overrides[name];\r\n        }\r\n        return cloned;\r\n    }\r\n    cloneAfter(overrides = {}) {\r\n        const cloned = this.clone(overrides);\r\n        this.parent.insertAfter(this, cloned);\r\n        return cloned;\r\n    }\r\n    cloneBefore(overrides = {}) {\r\n        const cloned = this.clone(overrides);\r\n        this.parent.insertBefore(this, cloned);\r\n        return cloned;\r\n    }\r\n    error(message, opts = {}) {\r\n        if (this.source) {\r\n            const { end, start } = this.rangeBy(opts);\r\n            return this.source.input.error(message, { column: start.column, line: start.line }, { column: end.column, line: end.line }, opts);\r\n        }\r\n        return new CssSyntaxError(message);\r\n    }\r\n    getProxyProcessor() {\r\n        return {\r\n            get(node, prop) {\r\n                if (prop === 'proxyOf') {\r\n                    return node;\r\n                }\r\n                else if (prop === 'root') {\r\n                    return () => node.root().toProxy();\r\n                }\r\n                else {\r\n                    return node[prop];\r\n                }\r\n            },\r\n            set(node, prop, value) {\r\n                if (node[prop] === value)\r\n                    return true;\r\n                node[prop] = value;\r\n                if (prop === 'prop' ||\r\n                    prop === 'value' ||\r\n                    prop === 'name' ||\r\n                    prop === 'params' ||\r\n                    prop === 'important' ||\r\n                    /* c8 ignore next */\r\n                    prop === 'text') {\r\n                    node.markDirty();\r\n                }\r\n                return true;\r\n            }\r\n        };\r\n    }\r\n    /* c8 ignore next 3 */\r\n    markClean() {\r\n        this[isClean] = true;\r\n    }\r\n    markDirty() {\r\n        if (this[isClean]) {\r\n            this[isClean] = false;\r\n            let next = this;\r\n            while ((next = next.parent)) {\r\n                next[isClean] = false;\r\n            }\r\n        }\r\n    }\r\n    next() {\r\n        if (!this.parent)\r\n            return undefined;\r\n        const index = this.parent.index(this);\r\n        return this.parent.nodes[index + 1];\r\n    }\r\n    positionBy(opts) {\r\n        let pos = this.source.start;\r\n        if (opts.index) {\r\n            pos = this.positionInside(opts.index);\r\n        }\r\n        else if (opts.word) {\r\n            const stringRepresentation = this.source.input.css.slice(sourceOffset(this.source.input.css, this.source.start), sourceOffset(this.source.input.css, this.source.end));\r\n            const index = stringRepresentation.indexOf(opts.word);\r\n            if (index !== -1)\r\n                pos = this.positionInside(index);\r\n        }\r\n        return pos;\r\n    }\r\n    positionInside(index) {\r\n        let column = this.source.start.column;\r\n        let line = this.source.start.line;\r\n        const offset = sourceOffset(this.source.input.css, this.source.start);\r\n        const end = offset + index;\r\n        for (let i = offset; i < end; i++) {\r\n            if (this.source.input.css[i] === '\\n') {\r\n                column = 1;\r\n                line += 1;\r\n            }\r\n            else {\r\n                column += 1;\r\n            }\r\n        }\r\n        return { column, line };\r\n    }\r\n    prev() {\r\n        if (!this.parent)\r\n            return undefined;\r\n        const index = this.parent.index(this);\r\n        return this.parent.nodes[index - 1];\r\n    }\r\n    rangeBy(opts) {\r\n        let start = {\r\n            column: this.source.start.column,\r\n            line: this.source.start.line\r\n        };\r\n        let end = this.source.end\r\n            ? {\r\n                column: this.source.end.column + 1,\r\n                line: this.source.end.line\r\n            }\r\n            : {\r\n                column: start.column + 1,\r\n                line: start.line\r\n            };\r\n        if (opts.word) {\r\n            const stringRepresentation = this.source.input.css.slice(sourceOffset(this.source.input.css, this.source.start), sourceOffset(this.source.input.css, this.source.end));\r\n            const index = stringRepresentation.indexOf(opts.word);\r\n            if (index !== -1) {\r\n                start = this.positionInside(index);\r\n                end = this.positionInside(index + opts.word.length);\r\n            }\r\n        }\r\n        else {\r\n            if (opts.start) {\r\n                start = {\r\n                    column: opts.start.column,\r\n                    line: opts.start.line\r\n                };\r\n            }\r\n            else if (opts.index) {\r\n                start = this.positionInside(opts.index);\r\n            }\r\n            if (opts.end) {\r\n                end = {\r\n                    column: opts.end.column,\r\n                    line: opts.end.line\r\n                };\r\n            }\r\n            else if (typeof opts.endIndex === 'number') {\r\n                end = this.positionInside(opts.endIndex);\r\n            }\r\n            else if (opts.index) {\r\n                end = this.positionInside(opts.index + 1);\r\n            }\r\n        }\r\n        if (end.line < start.line ||\r\n            (end.line === start.line && end.column <= start.column)) {\r\n            end = { column: start.column + 1, line: start.line };\r\n        }\r\n        return { end, start };\r\n    }\r\n    raw(prop, defaultType) {\r\n        const str = new Stringifier();\r\n        return str.raw(this, prop, defaultType);\r\n    }\r\n    remove() {\r\n        if (this.parent) {\r\n            this.parent.removeChild(this);\r\n        }\r\n        this.parent = undefined;\r\n        return this;\r\n    }\r\n    replaceWith(...nodes) {\r\n        if (this.parent) {\r\n            let bookmark = this;\r\n            let foundSelf = false;\r\n            for (const node of nodes) {\r\n                if (node === this) {\r\n                    foundSelf = true;\r\n                }\r\n                else if (foundSelf) {\r\n                    this.parent.insertAfter(bookmark, node);\r\n                    bookmark = node;\r\n                }\r\n                else {\r\n                    this.parent.insertBefore(bookmark, node);\r\n                }\r\n            }\r\n            if (!foundSelf) {\r\n                this.remove();\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    root() {\r\n        let result = this;\r\n        while (result.parent && result.parent.type !== 'document') {\r\n            result = result.parent;\r\n        }\r\n        return result;\r\n    }\r\n    toJSON(_, inputs) {\r\n        const fixed = {};\r\n        const emitInputs = inputs == null;\r\n        inputs = inputs || new Map();\r\n        let inputsNextIndex = 0;\r\n        for (const name in this) {\r\n            if (!Object.prototype.hasOwnProperty.call(this, name)) {\r\n                /* c8 ignore next 2 */\r\n                continue;\r\n            }\r\n            if (name === 'parent' || name === 'proxyCache')\r\n                continue;\r\n            const value = this[name];\r\n            if (Array.isArray(value)) {\r\n                fixed[name] = value.map(i => {\r\n                    if (typeof i === 'object' && i.toJSON) {\r\n                        return i.toJSON(null, inputs);\r\n                    }\r\n                    else {\r\n                        return i;\r\n                    }\r\n                });\r\n            }\r\n            else if (typeof value === 'object' && value.toJSON) {\r\n                fixed[name] = value.toJSON(null, inputs);\r\n            }\r\n            else if (name === 'source') {\r\n                let inputId = inputs.get(value.input);\r\n                if (inputId == null) {\r\n                    inputId = inputsNextIndex;\r\n                    inputs.set(value.input, inputsNextIndex);\r\n                    inputsNextIndex++;\r\n                }\r\n                fixed[name] = {\r\n                    end: value.end,\r\n                    inputId,\r\n                    start: value.start\r\n                };\r\n            }\r\n            else {\r\n                fixed[name] = value;\r\n            }\r\n        }\r\n        if (emitInputs) {\r\n            fixed.inputs = [...inputs.keys()].map(input => input.toJSON());\r\n        }\r\n        return fixed;\r\n    }\r\n    toProxy() {\r\n        if (!this.proxyCache) {\r\n            this.proxyCache = new Proxy(this, this.getProxyProcessor());\r\n        }\r\n        return this.proxyCache;\r\n    }\r\n    toString(stringifier = stringify) {\r\n        if (stringifier.stringify)\r\n            stringifier = stringifier.stringify;\r\n        let result = '';\r\n        stringifier(this, i => {\r\n            result += i;\r\n        });\r\n        return result;\r\n    }\r\n    warn(result, text, opts) {\r\n        const data = { node: this };\r\n        for (const i in opts)\r\n            data[i] = opts[i];\r\n        return result.warn(text, data);\r\n    }\r\n    get proxyOf() {\r\n        return this;\r\n    }\r\n}\r\n", "import { Node } from './node';\r\nexport class Comment extends Node {\r\n    constructor(defaults) {\r\n        super(defaults);\r\n        this.type = 'comment';\r\n    }\r\n}\r\n", "import { Node } from \"./node.js\";\r\nexport class Declaration extends Node {\r\n    constructor(defaults) {\r\n        if (defaults &&\r\n            typeof defaults.value !== 'undefined' &&\r\n            typeof defaults.value !== 'string') {\r\n            defaults = { ...defaults, value: String(defaults.value) };\r\n        }\r\n        super(defaults);\r\n        this.type = 'decl';\r\n    }\r\n    get variable() {\r\n        return this.prop.startsWith('--') || this.prop[0] === '$';\r\n    }\r\n}\r\n", "import { Comment } from './comment';\r\nimport { Declaration } from './declaration';\r\nimport { isClean, my } from \"./symbols\";\r\nimport { Node } from \"./node\";\r\nlet AtRule, parse, Root, Rule;\r\nfunction cleanSource(nodes) {\r\n    return nodes.map(i => {\r\n        if (i.nodes)\r\n            i.nodes = cleanSource(i.nodes);\r\n        delete i.source;\r\n        return i;\r\n    });\r\n}\r\nfunction markTreeDirty(node) {\r\n    node[isClean] = false;\r\n    if (node.proxyOf.nodes) {\r\n        for (const i of node.proxyOf.nodes) {\r\n            markTreeDirty(i);\r\n        }\r\n    }\r\n}\r\nexport class Container extends Node {\r\n    append(...children) {\r\n        for (const child of children) {\r\n            const nodes = this.normalize(child, this.last);\r\n            for (const node of nodes)\r\n                this.proxyOf.nodes.push(node);\r\n        }\r\n        this.markDirty();\r\n        return this;\r\n    }\r\n    cleanRaws(keepBetween) {\r\n        super.cleanRaws(keepBetween);\r\n        if (this.nodes) {\r\n            for (const node of this.nodes)\r\n                node.cleanRaws(keepBetween);\r\n        }\r\n    }\r\n    each(callback) {\r\n        if (!this.proxyOf.nodes)\r\n            return undefined;\r\n        const iterator = this.getIterator();\r\n        let index, result;\r\n        while (this.indexes[iterator] < this.proxyOf.nodes.length) {\r\n            index = this.indexes[iterator];\r\n            result = callback(this.proxyOf.nodes[index], index);\r\n            if (result === false)\r\n                break;\r\n            this.indexes[iterator] += 1;\r\n        }\r\n        delete this.indexes[iterator];\r\n        return result;\r\n    }\r\n    every(condition) {\r\n        return this.nodes.every(condition);\r\n    }\r\n    getIterator() {\r\n        if (!this.lastEach)\r\n            this.lastEach = 0;\r\n        if (!this.indexes)\r\n            this.indexes = {};\r\n        this.lastEach += 1;\r\n        const iterator = this.lastEach;\r\n        this.indexes[iterator] = 0;\r\n        return iterator;\r\n    }\r\n    getProxyProcessor() {\r\n        return {\r\n            get(node, prop) {\r\n                if (prop === 'proxyOf') {\r\n                    return node;\r\n                }\r\n                else if (!node[prop]) {\r\n                    return node[prop];\r\n                }\r\n                else if (prop === 'each' ||\r\n                    (typeof prop === 'string' && prop.startsWith('walk'))) {\r\n                    return (...args) => {\r\n                        return node[prop](...args.map(i => {\r\n                            if (typeof i === 'function') {\r\n                                return (child, index) => i(child.toProxy(), index);\r\n                            }\r\n                            else {\r\n                                return i;\r\n                            }\r\n                        }));\r\n                    };\r\n                }\r\n                else if (prop === 'every' || prop === 'some') {\r\n                    return cb => {\r\n                        return node[prop]((child, ...other) => cb(child.toProxy(), ...other));\r\n                    };\r\n                }\r\n                else if (prop === 'root') {\r\n                    return () => node.root().toProxy();\r\n                }\r\n                else if (prop === 'nodes') {\r\n                    return node.nodes.map(i => i.toProxy());\r\n                }\r\n                else if (prop === 'first' || prop === 'last') {\r\n                    return node[prop].toProxy();\r\n                }\r\n                else {\r\n                    return node[prop];\r\n                }\r\n            },\r\n            set(node, prop, value) {\r\n                if (node[prop] === value)\r\n                    return true;\r\n                node[prop] = value;\r\n                if (prop === 'name' || prop === 'params' || prop === 'selector') {\r\n                    node.markDirty();\r\n                }\r\n                return true;\r\n            }\r\n        };\r\n    }\r\n    index(child) {\r\n        if (typeof child === 'number')\r\n            return child;\r\n        if (child.proxyOf)\r\n            child = child.proxyOf;\r\n        return this.proxyOf.nodes.indexOf(child);\r\n    }\r\n    insertAfter(exist, add) {\r\n        let existIndex = this.index(exist);\r\n        const nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse();\r\n        existIndex = this.index(exist);\r\n        for (const node of nodes)\r\n            this.proxyOf.nodes.splice(existIndex + 1, 0, node);\r\n        let index;\r\n        for (const id in this.indexes) {\r\n            index = this.indexes[id];\r\n            if (existIndex < index) {\r\n                this.indexes[id] = index + nodes.length;\r\n            }\r\n        }\r\n        this.markDirty();\r\n        return this;\r\n    }\r\n    insertBefore(exist, add) {\r\n        let existIndex = this.index(exist);\r\n        const type = existIndex === 0 ? 'prepend' : false;\r\n        const nodes = this.normalize(add, this.proxyOf.nodes[existIndex], type).reverse();\r\n        existIndex = this.index(exist);\r\n        for (const node of nodes)\r\n            this.proxyOf.nodes.splice(existIndex, 0, node);\r\n        let index;\r\n        for (const id in this.indexes) {\r\n            index = this.indexes[id];\r\n            if (existIndex <= index) {\r\n                this.indexes[id] = index + nodes.length;\r\n            }\r\n        }\r\n        this.markDirty();\r\n        return this;\r\n    }\r\n    normalize(nodes, sample) {\r\n        if (typeof nodes === 'string') {\r\n            nodes = cleanSource(parse(nodes).nodes);\r\n        }\r\n        else if (typeof nodes === 'undefined') {\r\n            nodes = [];\r\n        }\r\n        else if (Array.isArray(nodes)) {\r\n            nodes = nodes.slice(0);\r\n            for (const i of nodes) {\r\n                if (i.parent)\r\n                    i.parent.removeChild(i, 'ignore');\r\n            }\r\n        }\r\n        else if (nodes.type === 'root' && this.type !== 'document') {\r\n            nodes = nodes.nodes.slice(0);\r\n            for (const i of nodes) {\r\n                if (i.parent)\r\n                    i.parent.removeChild(i, 'ignore');\r\n            }\r\n        }\r\n        else if (nodes.type) {\r\n            nodes = [nodes];\r\n        }\r\n        else if (nodes.prop) {\r\n            if (typeof nodes.value === 'undefined') {\r\n                throw new Error('Value field is missed in node creation');\r\n            }\r\n            else if (typeof nodes.value !== 'string') {\r\n                nodes.value = String(nodes.value);\r\n            }\r\n            nodes = [new Declaration(nodes)];\r\n        }\r\n        else if (nodes.selector || nodes.selectors) {\r\n            nodes = [new Rule(nodes)];\r\n        }\r\n        else if (nodes.name) {\r\n            nodes = [new AtRule(nodes)];\r\n        }\r\n        else if (nodes.text) {\r\n            nodes = [new Comment(nodes)];\r\n        }\r\n        else {\r\n            throw new Error('Unknown node type in node creation');\r\n        }\r\n        const processed = nodes.map(i => {\r\n            /* c8 ignore next */\r\n            if (!i[my])\r\n                Container.rebuild(i);\r\n            i = i.proxyOf;\r\n            if (i.parent)\r\n                i.parent.removeChild(i);\r\n            if (i[isClean])\r\n                markTreeDirty(i);\r\n            if (!i.raws)\r\n                i.raws = {};\r\n            if (typeof i.raws.before === 'undefined') {\r\n                if (sample && typeof sample.raws.before !== 'undefined') {\r\n                    i.raws.before = sample.raws.before.replace(/\\S/g, '');\r\n                }\r\n            }\r\n            i.parent = this.proxyOf;\r\n            return i;\r\n        });\r\n        return processed;\r\n    }\r\n    prepend(...children) {\r\n        children = children.reverse();\r\n        for (const child of children) {\r\n            const nodes = this.normalize(child, this.first, 'prepend').reverse();\r\n            for (const node of nodes)\r\n                this.proxyOf.nodes.unshift(node);\r\n            for (const id in this.indexes) {\r\n                this.indexes[id] = this.indexes[id] + nodes.length;\r\n            }\r\n        }\r\n        this.markDirty();\r\n        return this;\r\n    }\r\n    push(child) {\r\n        child.parent = this;\r\n        this.proxyOf.nodes.push(child);\r\n        return this;\r\n    }\r\n    removeAll() {\r\n        for (const node of this.proxyOf.nodes)\r\n            node.parent = undefined;\r\n        this.proxyOf.nodes = [];\r\n        this.markDirty();\r\n        return this;\r\n    }\r\n    removeChild(child) {\r\n        child = this.index(child);\r\n        this.proxyOf.nodes[child].parent = undefined;\r\n        this.proxyOf.nodes.splice(child, 1);\r\n        let index;\r\n        for (const id in this.indexes) {\r\n            index = this.indexes[id];\r\n            if (index >= child) {\r\n                this.indexes[id] = index - 1;\r\n            }\r\n        }\r\n        this.markDirty();\r\n        return this;\r\n    }\r\n    replaceValues(pattern, opts, callback) {\r\n        if (!callback) {\r\n            callback = opts;\r\n            opts = {};\r\n        }\r\n        this.walkDecls(decl => {\r\n            if (opts.props && !opts.props.includes(decl.prop))\r\n                return;\r\n            if (opts.fast && !decl.value.includes(opts.fast))\r\n                return;\r\n            decl.value = decl.value.replace(pattern, callback);\r\n        });\r\n        this.markDirty();\r\n        return this;\r\n    }\r\n    some(condition) {\r\n        return this.nodes.some(condition);\r\n    }\r\n    walk(callback) {\r\n        return this.each((child, i) => {\r\n            let result;\r\n            try {\r\n                result = callback(child, i);\r\n            }\r\n            catch (e) {\r\n                throw child.addToError(e);\r\n            }\r\n            if (result !== false && child.walk) {\r\n                result = child.walk(callback);\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n    walkAtRules(name, callback) {\r\n        if (!callback) {\r\n            callback = name;\r\n            return this.walk((child, i) => {\r\n                if (child.type === 'atrule') {\r\n                    return callback(child, i);\r\n                }\r\n            });\r\n        }\r\n        if (name instanceof RegExp) {\r\n            return this.walk((child, i) => {\r\n                if (child.type === 'atrule' && name.test(child.name)) {\r\n                    return callback(child, i);\r\n                }\r\n            });\r\n        }\r\n        return this.walk((child, i) => {\r\n            if (child.type === 'atrule' && child.name === name) {\r\n                return callback(child, i);\r\n            }\r\n        });\r\n    }\r\n    walkComments(callback) {\r\n        return this.walk((child, i) => {\r\n            if (child.type === 'comment') {\r\n                return callback(child, i);\r\n            }\r\n        });\r\n    }\r\n    walkDecls(prop, callback) {\r\n        if (!callback) {\r\n            callback = prop;\r\n            return this.walk((child, i) => {\r\n                if (child.type === 'decl') {\r\n                    return callback(child, i);\r\n                }\r\n            });\r\n        }\r\n        if (prop instanceof RegExp) {\r\n            return this.walk((child, i) => {\r\n                if (child.type === 'decl' && prop.test(child.prop)) {\r\n                    return callback(child, i);\r\n                }\r\n            });\r\n        }\r\n        return this.walk((child, i) => {\r\n            if (child.type === 'decl' && child.prop === prop) {\r\n                return callback(child, i);\r\n            }\r\n        });\r\n    }\r\n    walkRules(selector, callback) {\r\n        if (!callback) {\r\n            callback = selector;\r\n            return this.walk((child, i) => {\r\n                if (child.type === 'rule') {\r\n                    return callback(child, i);\r\n                }\r\n            });\r\n        }\r\n        if (selector instanceof RegExp) {\r\n            return this.walk((child, i) => {\r\n                if (child.type === 'rule' && selector.test(child.selector)) {\r\n                    return callback(child, i);\r\n                }\r\n            });\r\n        }\r\n        return this.walk((child, i) => {\r\n            if (child.type === 'rule' && child.selector === selector) {\r\n                return callback(child, i);\r\n            }\r\n        });\r\n    }\r\n    get first() {\r\n        if (!this.proxyOf.nodes)\r\n            return undefined;\r\n        return this.proxyOf.nodes[0];\r\n    }\r\n    get last() {\r\n        if (!this.proxyOf.nodes)\r\n            return undefined;\r\n        return this.proxyOf.nodes[this.proxyOf.nodes.length - 1];\r\n    }\r\n}\r\nContainer.registerParse = dependant => {\r\n    parse = dependant;\r\n};\r\nContainer.registerRule = dependant => {\r\n    Rule = dependant;\r\n};\r\nContainer.registerAtRule = dependant => {\r\n    AtRule = dependant;\r\n};\r\nContainer.registerRoot = dependant => {\r\n    Root = dependant;\r\n};\r\n/* c8 ignore start */\r\nContainer.rebuild = node => {\r\n    if (node.type === 'atrule') {\r\n        Object.setPrototypeOf(node, AtRule.prototype);\r\n    }\r\n    else if (node.type === 'rule') {\r\n        Object.setPrototypeOf(node, Rule.prototype);\r\n    }\r\n    else if (node.type === 'decl') {\r\n        Object.setPrototypeOf(node, Declaration.prototype);\r\n    }\r\n    else if (node.type === 'comment') {\r\n        Object.setPrototypeOf(node, Comment.prototype);\r\n    }\r\n    else if (node.type === 'root') {\r\n        Object.setPrototypeOf(node, Root.prototype);\r\n    }\r\n    node[my] = true;\r\n    if (node.nodes) {\r\n        node.nodes.forEach(child => {\r\n            Container.rebuild(child);\r\n        });\r\n    }\r\n};\r\n/* c8 ignore stop */\r\n", "import { Container } from \"./container\";\r\nlet LazyResult, Processor;\r\nexport class Document extends Container {\r\n    constructor(defaults) {\r\n        // type needs to be passed to super, otherwise child roots won't be normalized correctly\r\n        super({ type: 'document', ...defaults });\r\n        if (!this.nodes) {\r\n            this.nodes = [];\r\n        }\r\n    }\r\n    toResult(opts = {}) {\r\n        const lazy = new LazyResult(new Processor(), this, opts);\r\n        return lazy.stringify();\r\n    }\r\n}\r\nDocument.registerLazyResult = dependant => {\r\n    LazyResult = dependant;\r\n};\r\nDocument.registerProcessor = dependant => {\r\n    Processor = dependant;\r\n};\r\n", "import { Container } from \"./container\";\r\nlet LazyResult, Processor;\r\nexport class Root extends Container {\r\n    constructor(defaults) {\r\n        super(defaults);\r\n        this.type = 'root';\r\n        if (!this.nodes)\r\n            this.nodes = [];\r\n    }\r\n    normalize(child, sample, type) {\r\n        const nodes = super.normalize(child);\r\n        if (sample) {\r\n            if (type === 'prepend') {\r\n                if (this.nodes.length > 1) {\r\n                    sample.raws.before = this.nodes[1].raws.before;\r\n                }\r\n                else {\r\n                    delete sample.raws.before;\r\n                }\r\n            }\r\n            else if (this.first !== sample) {\r\n                for (const node of nodes) {\r\n                    node.raws.before = sample.raws.before;\r\n                }\r\n            }\r\n        }\r\n        return nodes;\r\n    }\r\n    removeChild(child, ignore) {\r\n        const index = this.index(child);\r\n        if (!ignore && index === 0 && this.nodes.length > 1) {\r\n            this.nodes[1].raws.before = this.nodes[index].raws.before;\r\n        }\r\n        return super.removeChild(child);\r\n    }\r\n    toResult(opts = {}) {\r\n        const lazy = new LazyResult(new Processor(), this, opts);\r\n        return lazy.stringify();\r\n    }\r\n    static registerLazyResult = dependant => {\r\n        LazyResult = dependant;\r\n    };\r\n    static registerProcessor = dependant => {\r\n        Processor = dependant;\r\n    };\r\n}\r\nContainer.registerRoot(Root);\r\n", "import { CssSyntaxError } from \"./css-syntax-error\";\r\nconst fromOffsetCache = Symbol('fromOffsetCache');\r\nexport class Input {\r\n    constructor(css, opts = {}) {\r\n        if (css === null ||\r\n            typeof css === 'undefined' ||\r\n            (typeof css === 'object' && !css.toString)) {\r\n            throw new Error(`PostCSS received ${css} instead of CSS string`);\r\n        }\r\n        this.css = css.toString();\r\n        if (this.css[0] === '\\uFEFF' || this.css[0] === '\\uFFFE') {\r\n            this.hasBOM = true;\r\n            this.css = this.css.slice(1);\r\n        }\r\n        else {\r\n            this.hasBOM = false;\r\n        }\r\n        if (this.map)\r\n            this.map.file = this.from;\r\n    }\r\n    error(message, line, column, opts = {}) {\r\n        let endColumn, endLine, result;\r\n        if (line && typeof line === 'object') {\r\n            const start = line;\r\n            const end = column;\r\n            if (typeof start.offset === 'number') {\r\n                const pos = this.fromOffset(start.offset);\r\n                line = pos.line;\r\n                column = pos.col;\r\n            }\r\n            else {\r\n                line = start.line;\r\n                column = start.column;\r\n            }\r\n            if (typeof end.offset === 'number') {\r\n                const pos = this.fromOffset(end.offset);\r\n                endLine = pos.line;\r\n                endColumn = pos.col;\r\n            }\r\n            else {\r\n                endLine = end.line;\r\n                endColumn = end.column;\r\n            }\r\n        }\r\n        else if (!column) {\r\n            const pos = this.fromOffset(line);\r\n            line = pos.line;\r\n            column = pos.col;\r\n        }\r\n        const origin = this.origin(line, column, endLine, endColumn);\r\n        if (origin) {\r\n            result = new CssSyntaxError(message, origin.endLine === undefined\r\n                ? origin.line\r\n                : { column: origin.column, line: origin.line }, origin.endLine === undefined\r\n                ? origin.column\r\n                : { column: origin.endColumn, line: origin.endLine }, origin.source, origin.file, opts.plugin);\r\n        }\r\n        else {\r\n            result = new CssSyntaxError(message, endLine === undefined ? line : { column, line }, endLine === undefined ? column : { column: endColumn, line: endLine }, this.css, this.file, opts.plugin);\r\n        }\r\n        result.input = { column, endColumn, endLine, line, source: this.css };\r\n        if (this.file) {\r\n            result.input.file = this.file;\r\n        }\r\n        return result;\r\n    }\r\n    fromOffset(offset) {\r\n        let lastLine, lineToIndex;\r\n        if (!this[fromOffsetCache]) {\r\n            const lines = this.css.split('\\n');\r\n            lineToIndex = new Array(lines.length);\r\n            let prevIndex = 0;\r\n            for (let i = 0, l = lines.length; i < l; i++) {\r\n                lineToIndex[i] = prevIndex;\r\n                prevIndex += lines[i].length + 1;\r\n            }\r\n            this[fromOffsetCache] = lineToIndex;\r\n        }\r\n        else {\r\n            lineToIndex = this[fromOffsetCache];\r\n        }\r\n        lastLine = lineToIndex[lineToIndex.length - 1];\r\n        let min = 0;\r\n        if (offset >= lastLine) {\r\n            min = lineToIndex.length - 1;\r\n        }\r\n        else {\r\n            let max = lineToIndex.length - 2;\r\n            let mid;\r\n            while (min < max) {\r\n                mid = min + ((max - min) >> 1);\r\n                if (offset < lineToIndex[mid]) {\r\n                    max = mid - 1;\r\n                }\r\n                else if (offset >= lineToIndex[mid + 1]) {\r\n                    min = mid + 1;\r\n                }\r\n                else {\r\n                    min = mid;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            col: offset - lineToIndex[min] + 1,\r\n            line: min + 1\r\n        };\r\n    }\r\n    origin(line, column, endLine, endColumn) {\r\n        if (!this.map)\r\n            return false;\r\n        const consumer = this.map.consumer();\r\n        const from = consumer.originalPositionFor({ column, line });\r\n        if (!from.source)\r\n            return false;\r\n        let to;\r\n        if (typeof endLine === 'number') {\r\n            to = consumer.originalPositionFor({ column: endColumn, line: endLine });\r\n        }\r\n        let fromUrl;\r\n        fromUrl = new URL(from.source, this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile));\r\n        const result = {\r\n            column: from.column,\r\n            endColumn: to && to.column,\r\n            endLine: to && to.line,\r\n            line: from.line,\r\n            url: fromUrl.toString()\r\n        };\r\n        const source = consumer.sourceContentFor(from.source);\r\n        if (source)\r\n            result.source = source;\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        const json = {};\r\n        for (const name of ['hasBOM', 'css', 'file', 'id']) {\r\n            if (this[name] != null) {\r\n                json[name] = this[name];\r\n            }\r\n        }\r\n        if (this.map) {\r\n            json.map = { ...this.map };\r\n            if (json.map.consumerCache) {\r\n                json.map.consumerCache = undefined;\r\n            }\r\n        }\r\n        return json;\r\n    }\r\n    get from() {\r\n        return this.file || this.id;\r\n    }\r\n}\r\n", "import { Input } from './input';\r\nexport class MapGenerator {\r\n    constructor(stringify, root, opts, cssString) {\r\n        this.stringify = stringify;\r\n        this.mapOpts = opts.map || {};\r\n        this.root = root;\r\n        this.opts = opts;\r\n        this.css = cssString;\r\n        this.originalCSS = cssString;\r\n        this.usesFileUrls = !this.mapOpts.from && this.mapOpts.absolute;\r\n        this.memoizedFileURLs = new Map();\r\n        this.memoizedPaths = new Map();\r\n        this.memoizedURLs = new Map();\r\n    }\r\n    addAnnotation() {\r\n        let content;\r\n        if (this.isInline()) {\r\n            content =\r\n                'data:application/json;base64,' + this.toBase64(this.map.toString());\r\n        }\r\n        else if (typeof this.mapOpts.annotation === 'string') {\r\n            content = this.mapOpts.annotation;\r\n        }\r\n        else if (typeof this.mapOpts.annotation === 'function') {\r\n            content = this.mapOpts.annotation(this.opts.to, this.root);\r\n        }\r\n        else {\r\n            content = this.outputFile() + '.map';\r\n        }\r\n        let eol = '\\n';\r\n        if (this.css.includes('\\r\\n'))\r\n            eol = '\\r\\n';\r\n        this.css += eol + '/*# sourceMappingURL=' + content + ' */';\r\n    }\r\n    applyPrevMaps() {\r\n    }\r\n    clearAnnotation() {\r\n        if (this.mapOpts.annotation === false)\r\n            return;\r\n        if (this.root) {\r\n            let node;\r\n            for (let i = this.root.nodes.length - 1; i >= 0; i--) {\r\n                node = this.root.nodes[i];\r\n                if (node.type !== 'comment')\r\n                    continue;\r\n                if (node.text.startsWith('# sourceMappingURL=')) {\r\n                    this.root.removeChild(i);\r\n                }\r\n            }\r\n        }\r\n        else if (this.css) {\r\n            this.css = this.css.replace(/\\n*\\/\\*#[\\S\\s]*?\\*\\/$/gm, '');\r\n        }\r\n    }\r\n    generate() {\r\n        this.clearAnnotation();\r\n        let result = '';\r\n        this.stringify(this.root, i => {\r\n            result += i;\r\n        });\r\n        return [result];\r\n    }\r\n    generateMap() {\r\n        if (this.root) {\r\n            this.generateString();\r\n        }\r\n        else if (this.previous().length === 1) {\r\n            const prev = this.previous()[0].consumer();\r\n            prev.file = this.outputFile();\r\n            this.map = SourceMapGenerator.fromSourceMap(prev, {\r\n                ignoreInvalidMapping: true\r\n            });\r\n        }\r\n        else {\r\n            this.map = new SourceMapGenerator({\r\n                file: this.outputFile(),\r\n                ignoreInvalidMapping: true\r\n            });\r\n            this.map.addMapping({\r\n                generated: { column: 0, line: 1 },\r\n                original: { column: 0, line: 1 },\r\n                source: this.opts.from\r\n                    ? this.toUrl(this.path(this.opts.from))\r\n                    : '<no source>'\r\n            });\r\n        }\r\n        if (this.isSourcesContent())\r\n            this.setSourcesContent();\r\n        if (this.root && this.previous().length > 0)\r\n            this.applyPrevMaps();\r\n        if (this.isAnnotation())\r\n            this.addAnnotation();\r\n        if (this.isInline()) {\r\n            return [this.css];\r\n        }\r\n        else {\r\n            return [this.css, this.map];\r\n        }\r\n    }\r\n    generateString() {\r\n        this.css = '';\r\n        this.map = new SourceMapGenerator({\r\n            file: this.outputFile(),\r\n            ignoreInvalidMapping: true\r\n        });\r\n        let line = 1;\r\n        let column = 1;\r\n        const noSource = '<no source>';\r\n        const mapping = {\r\n            generated: { column: 0, line: 0 },\r\n            original: { column: 0, line: 0 },\r\n            source: ''\r\n        };\r\n        let last, lines;\r\n        this.stringify(this.root, (str, node, type) => {\r\n            this.css += str;\r\n            if (node && type !== 'end') {\r\n                mapping.generated.line = line;\r\n                mapping.generated.column = column - 1;\r\n                if (node.source && node.source.start) {\r\n                    mapping.source = this.sourcePath(node);\r\n                    mapping.original.line = node.source.start.line;\r\n                    mapping.original.column = node.source.start.column - 1;\r\n                    this.map.addMapping(mapping);\r\n                }\r\n                else {\r\n                    mapping.source = noSource;\r\n                    mapping.original.line = 1;\r\n                    mapping.original.column = 0;\r\n                    this.map.addMapping(mapping);\r\n                }\r\n            }\r\n            lines = str.match(/\\n/g);\r\n            if (lines) {\r\n                line += lines.length;\r\n                last = str.lastIndexOf('\\n');\r\n                column = str.length - last;\r\n            }\r\n            else {\r\n                column += str.length;\r\n            }\r\n            if (node && type !== 'start') {\r\n                const p = node.parent || { raws: {} };\r\n                const childless = node.type === 'decl' || (node.type === 'atrule' && !node.nodes);\r\n                if (!childless || node !== p.last || p.raws.semicolon) {\r\n                    if (node.source && node.source.end) {\r\n                        mapping.source = this.sourcePath(node);\r\n                        mapping.original.line = node.source.end.line;\r\n                        mapping.original.column = node.source.end.column - 1;\r\n                        mapping.generated.line = line;\r\n                        mapping.generated.column = column - 2;\r\n                        this.map.addMapping(mapping);\r\n                    }\r\n                    else {\r\n                        mapping.source = noSource;\r\n                        mapping.original.line = 1;\r\n                        mapping.original.column = 0;\r\n                        mapping.generated.line = line;\r\n                        mapping.generated.column = column - 1;\r\n                        this.map.addMapping(mapping);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    isAnnotation() {\r\n        if (this.isInline()) {\r\n            return true;\r\n        }\r\n        if (typeof this.mapOpts.annotation !== 'undefined') {\r\n            return this.mapOpts.annotation;\r\n        }\r\n        if (this.previous().length) {\r\n            return this.previous().some(i => i.annotation);\r\n        }\r\n        return true;\r\n    }\r\n    isInline() {\r\n        if (typeof this.mapOpts.inline !== 'undefined') {\r\n            return this.mapOpts.inline;\r\n        }\r\n        const annotation = this.mapOpts.annotation;\r\n        if (typeof annotation !== 'undefined' && annotation !== true) {\r\n            return false;\r\n        }\r\n        if (this.previous().length) {\r\n            return this.previous().some(i => i.inline);\r\n        }\r\n        return true;\r\n    }\r\n    isMap() {\r\n        if (typeof this.opts.map !== 'undefined') {\r\n            return !!this.opts.map;\r\n        }\r\n        return this.previous().length > 0;\r\n    }\r\n    isSourcesContent() {\r\n        if (typeof this.mapOpts.sourcesContent !== 'undefined') {\r\n            return this.mapOpts.sourcesContent;\r\n        }\r\n        if (this.previous().length) {\r\n            return this.previous().some(i => i.withContent());\r\n        }\r\n        return true;\r\n    }\r\n    outputFile() {\r\n        if (this.opts.to) {\r\n            return this.path(this.opts.to);\r\n        }\r\n        else if (this.opts.from) {\r\n            return this.path(this.opts.from);\r\n        }\r\n        else {\r\n            return 'to.css';\r\n        }\r\n    }\r\n    path(file) {\r\n        return file;\r\n    }\r\n    previous() {\r\n        if (!this.previousMaps) {\r\n            this.previousMaps = [];\r\n            if (this.root) {\r\n                this.root.walk(node => {\r\n                    if (node.source && node.source.input.map) {\r\n                        const map = node.source.input.map;\r\n                        if (!this.previousMaps.includes(map)) {\r\n                            this.previousMaps.push(map);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                const input = new Input(this.originalCSS, this.opts);\r\n                if (input.map)\r\n                    this.previousMaps.push(input.map);\r\n            }\r\n        }\r\n        return this.previousMaps;\r\n    }\r\n    setSourcesContent() {\r\n        throw new Error(`setSourcesContent isnt implemented`);\r\n    }\r\n    sourcePath(node) {\r\n        if (this.mapOpts.from) {\r\n            return this.toUrl(this.mapOpts.from);\r\n        }\r\n        else if (this.usesFileUrls) {\r\n            return this.toFileUrl(node.source.input.from);\r\n        }\r\n        else {\r\n            return this.toUrl(this.path(node.source.input.from));\r\n        }\r\n    }\r\n    toBase64(str) {\r\n        if (Buffer) {\r\n            return Buffer.from(str).toString('base64');\r\n        }\r\n        else {\r\n            return window.btoa(unescape(encodeURIComponent(str)));\r\n        }\r\n    }\r\n    toFileUrl(path) {\r\n        const cached = this.memoizedFileURLs.get(path);\r\n        if (cached)\r\n            return cached;\r\n        throw new Error('`map.absolute` option is not available in this PostCSS build');\r\n    }\r\n    toUrl(path) {\r\n        const cached = this.memoizedURLs.get(path);\r\n        if (cached)\r\n            return cached;\r\n        path = path.replace(/\\\\/g, '/');\r\n        const url = encodeURI(path).replace(/[#?]/g, encodeURIComponent);\r\n        this.memoizedURLs.set(path, url);\r\n        return url;\r\n    }\r\n}\r\n", "const printed = {};\r\nexport function warnOnce(message) {\r\n    if (printed[message])\r\n        return;\r\n    printed[message] = true;\r\n    if (typeof console !== 'undefined' && console.warn) {\r\n        console.warn(message);\r\n    }\r\n}\r\n", "import { Container } from './container';\r\nexport class AtRule extends Container {\r\n    constructor(defaults) {\r\n        super(defaults);\r\n        this.type = 'atrule';\r\n    }\r\n    append(...children) {\r\n        if (!this.proxyOf.nodes)\r\n            this.nodes = [];\r\n        return super.append(...children);\r\n    }\r\n    prepend(...children) {\r\n        if (!this.proxyOf.nodes)\r\n            this.nodes = [];\r\n        return super.prepend(...children);\r\n    }\r\n}\r\nContainer.registerAtRule(AtRule);\r\n", "export const list = {\r\n    comma(string) {\r\n        return list.split(string, [','], true);\r\n    },\r\n    space(string) {\r\n        const spaces = [' ', '\\n', '\\t'];\r\n        return list.split(string, spaces);\r\n    },\r\n    split(string, separators, last) {\r\n        const array = [];\r\n        let current = '';\r\n        let split = false;\r\n        let func = 0;\r\n        let inQuote = false;\r\n        let prevQuote = '';\r\n        let escape = false;\r\n        for (const letter of string) {\r\n            if (escape) {\r\n                escape = false;\r\n            }\r\n            else if (letter === '\\\\') {\r\n                escape = true;\r\n            }\r\n            else if (inQuote) {\r\n                if (letter === prevQuote) {\r\n                    inQuote = false;\r\n                }\r\n            }\r\n            else if (letter === '\"' || letter === \"'\") {\r\n                inQuote = true;\r\n                prevQuote = letter;\r\n            }\r\n            else if (letter === '(') {\r\n                func += 1;\r\n            }\r\n            else if (letter === ')') {\r\n                if (func > 0)\r\n                    func -= 1;\r\n            }\r\n            else if (func === 0) {\r\n                if (separators.includes(letter))\r\n                    split = true;\r\n            }\r\n            if (split) {\r\n                if (current !== '')\r\n                    array.push(current.trim());\r\n                current = '';\r\n                split = false;\r\n            }\r\n            else {\r\n                current += letter;\r\n            }\r\n        }\r\n        if (last || current !== '')\r\n            array.push(current.trim());\r\n        return array;\r\n    }\r\n};\r\n", "import { Container } from \"./container\";\r\nimport { list } from './list';\r\nexport class Rule extends Container {\r\n    constructor(defaults) {\r\n        super(defaults);\r\n        this.type = 'rule';\r\n        if (!this.nodes)\r\n            this.nodes = [];\r\n    }\r\n    get selectors() {\r\n        return list.comma(this.selector);\r\n    }\r\n    set selectors(values) {\r\n        const match = this.selector ? this.selector.match(/,\\s*/) : null;\r\n        const sep = match ? match[0] : ',' + this.raw('between', 'beforeOpen');\r\n        this.selector = values.join(sep);\r\n    }\r\n}\r\nContainer.registerRule(Rule);\r\n", "const SINGLE_QUOTE = \"'\".charCodeAt(0);\r\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0);\r\nconst BACKSLASH = '\\\\'.charCodeAt(0);\r\nconst SLASH = '/'.charCodeAt(0);\r\nconst NEWLINE = '\\n'.charCodeAt(0);\r\nconst SPACE = ' '.charCodeAt(0);\r\nconst FEED = '\\f'.charCodeAt(0);\r\nconst TAB = '\\t'.charCodeAt(0);\r\nconst CR = '\\r'.charCodeAt(0);\r\nconst OPEN_SQUARE = '['.charCodeAt(0);\r\nconst CLOSE_SQUARE = ']'.charCodeAt(0);\r\nconst OPEN_PARENTHESES = '('.charCodeAt(0);\r\nconst CLOSE_PARENTHESES = ')'.charCodeAt(0);\r\nconst OPEN_CURLY = '{'.charCodeAt(0);\r\nconst CLOSE_CURLY = '}'.charCodeAt(0);\r\nconst SEMICOLON = ';'.charCodeAt(0);\r\nconst ASTERISK = '*'.charCodeAt(0);\r\nconst COLON = ':'.charCodeAt(0);\r\nconst AT = '@'.charCodeAt(0);\r\nconst RE_AT_END = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g;\r\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g;\r\nconst RE_BAD_BRACKET = /.[\\r\\n\"'(/\\\\]/;\r\nconst RE_HEX_ESCAPE = /[\\da-f]/i;\r\nexport function tokenizer(input, options = {}) {\r\n    const css = input.css.valueOf();\r\n    const ignore = options.ignoreErrors;\r\n    let code, content, escape, next, quote;\r\n    let currentToken, escaped, escapePos, n, prev;\r\n    const length = css.length;\r\n    let pos = 0;\r\n    const buffer = [];\r\n    const returned = [];\r\n    function position() {\r\n        return pos;\r\n    }\r\n    function unclosed(what) {\r\n        throw input.error('Unclosed ' + what, pos);\r\n    }\r\n    function endOfFile() {\r\n        return returned.length === 0 && pos >= length;\r\n    }\r\n    function nextToken(opts) {\r\n        if (returned.length)\r\n            return returned.pop();\r\n        if (pos >= length)\r\n            return;\r\n        const ignoreUnclosed = opts ? opts.ignoreUnclosed : false;\r\n        code = css.charCodeAt(pos);\r\n        switch (code) {\r\n            case NEWLINE:\r\n            case SPACE:\r\n            case TAB:\r\n            case CR:\r\n            case FEED: {\r\n                next = pos;\r\n                do {\r\n                    next += 1;\r\n                    code = css.charCodeAt(next);\r\n                } while (code === SPACE ||\r\n                    code === NEWLINE ||\r\n                    code === TAB ||\r\n                    code === CR ||\r\n                    code === FEED);\r\n                currentToken = ['space', css.slice(pos, next)];\r\n                pos = next - 1;\r\n                break;\r\n            }\r\n            case OPEN_SQUARE:\r\n            case CLOSE_SQUARE:\r\n            case OPEN_CURLY:\r\n            case CLOSE_CURLY:\r\n            case COLON:\r\n            case SEMICOLON:\r\n            case CLOSE_PARENTHESES: {\r\n                const controlChar = String.fromCharCode(code);\r\n                currentToken = [controlChar, controlChar, pos];\r\n                break;\r\n            }\r\n            case OPEN_PARENTHESES: {\r\n                prev = buffer.length ? buffer.pop()[1] : '';\r\n                n = css.charCodeAt(pos + 1);\r\n                if (prev === 'url' &&\r\n                    n !== SINGLE_QUOTE &&\r\n                    n !== DOUBLE_QUOTE &&\r\n                    n !== SPACE &&\r\n                    n !== NEWLINE &&\r\n                    n !== TAB &&\r\n                    n !== FEED &&\r\n                    n !== CR) {\r\n                    next = pos;\r\n                    do {\r\n                        escaped = false;\r\n                        next = css.indexOf(')', next + 1);\r\n                        if (next === -1) {\r\n                            if (ignore || ignoreUnclosed) {\r\n                                next = pos;\r\n                                break;\r\n                            }\r\n                            else {\r\n                                unclosed('bracket');\r\n                            }\r\n                        }\r\n                        escapePos = next;\r\n                        while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\r\n                            escapePos -= 1;\r\n                            escaped = !escaped;\r\n                        }\r\n                    } while (escaped);\r\n                    currentToken = ['brackets', css.slice(pos, next + 1), pos, next];\r\n                    pos = next;\r\n                }\r\n                else {\r\n                    next = css.indexOf(')', pos + 1);\r\n                    content = css.slice(pos, next + 1);\r\n                    if (next === -1 || RE_BAD_BRACKET.test(content)) {\r\n                        currentToken = ['(', '(', pos];\r\n                    }\r\n                    else {\r\n                        currentToken = ['brackets', content, pos, next];\r\n                        pos = next;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case SINGLE_QUOTE:\r\n            case DOUBLE_QUOTE: {\r\n                quote = code === SINGLE_QUOTE ? \"'\" : '\"';\r\n                next = pos;\r\n                do {\r\n                    escaped = false;\r\n                    next = css.indexOf(quote, next + 1);\r\n                    if (next === -1) {\r\n                        if (ignore || ignoreUnclosed) {\r\n                            next = pos + 1;\r\n                            break;\r\n                        }\r\n                        else {\r\n                            unclosed('string');\r\n                        }\r\n                    }\r\n                    escapePos = next;\r\n                    while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\r\n                        escapePos -= 1;\r\n                        escaped = !escaped;\r\n                    }\r\n                } while (escaped);\r\n                currentToken = ['string', css.slice(pos, next + 1), pos, next];\r\n                pos = next;\r\n                break;\r\n            }\r\n            case AT: {\r\n                RE_AT_END.lastIndex = pos + 1;\r\n                RE_AT_END.test(css);\r\n                if (RE_AT_END.lastIndex === 0) {\r\n                    next = css.length - 1;\r\n                }\r\n                else {\r\n                    next = RE_AT_END.lastIndex - 2;\r\n                }\r\n                currentToken = ['at-word', css.slice(pos, next + 1), pos, next];\r\n                pos = next;\r\n                break;\r\n            }\r\n            case BACKSLASH: {\r\n                next = pos;\r\n                escape = true;\r\n                while (css.charCodeAt(next + 1) === BACKSLASH) {\r\n                    next += 1;\r\n                    escape = !escape;\r\n                }\r\n                code = css.charCodeAt(next + 1);\r\n                if (escape &&\r\n                    code !== SLASH &&\r\n                    code !== SPACE &&\r\n                    code !== NEWLINE &&\r\n                    code !== TAB &&\r\n                    code !== CR &&\r\n                    code !== FEED) {\r\n                    next += 1;\r\n                    if (RE_HEX_ESCAPE.test(css.charAt(next))) {\r\n                        while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {\r\n                            next += 1;\r\n                        }\r\n                        if (css.charCodeAt(next + 1) === SPACE) {\r\n                            next += 1;\r\n                        }\r\n                    }\r\n                }\r\n                currentToken = ['word', css.slice(pos, next + 1), pos, next];\r\n                pos = next;\r\n                break;\r\n            }\r\n            default: {\r\n                if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\r\n                    next = css.indexOf('*/', pos + 2) + 1;\r\n                    if (next === 0) {\r\n                        if (ignore || ignoreUnclosed) {\r\n                            next = css.length;\r\n                        }\r\n                        else {\r\n                            unclosed('comment');\r\n                        }\r\n                    }\r\n                    currentToken = ['comment', css.slice(pos, next + 1), pos, next];\r\n                    pos = next;\r\n                }\r\n                else {\r\n                    RE_WORD_END.lastIndex = pos + 1;\r\n                    RE_WORD_END.test(css);\r\n                    if (RE_WORD_END.lastIndex === 0) {\r\n                        next = css.length - 1;\r\n                    }\r\n                    else {\r\n                        next = RE_WORD_END.lastIndex - 2;\r\n                    }\r\n                    currentToken = ['word', css.slice(pos, next + 1), pos, next];\r\n                    buffer.push(currentToken);\r\n                    pos = next;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        pos++;\r\n        return currentToken;\r\n    }\r\n    function back(token) {\r\n        returned.push(token);\r\n    }\r\n    return {\r\n        back,\r\n        endOfFile,\r\n        nextToken,\r\n        position\r\n    };\r\n}\r\n", "import { AtRule } from './at-rule';\r\nimport { Comment } from './comment';\r\nimport { Declaration } from './declaration';\r\nimport { Root } from './root';\r\nimport { Rule } from './rule';\r\nimport { tokenizer } from \"./tokenize\";\r\nconst SAFE_COMMENT_NEIGHBOR = {\r\n    empty: true,\r\n    space: true\r\n};\r\nfunction findLastWithPosition(tokens) {\r\n    for (let i = tokens.length - 1; i >= 0; i--) {\r\n        const token = tokens[i];\r\n        const pos = token[3] || token[2];\r\n        if (pos)\r\n            return pos;\r\n    }\r\n}\r\nexport class Parser {\r\n    constructor(input) {\r\n        this.input = input;\r\n        this.root = new Root();\r\n        this.current = this.root;\r\n        this.spaces = '';\r\n        this.semicolon = false;\r\n        this.createTokenizer();\r\n        this.root.source = { input, start: { column: 1, line: 1, offset: 0 } };\r\n    }\r\n    atrule(token) {\r\n        const node = new AtRule();\r\n        node.name = token[1].slice(1);\r\n        if (node.name === '') {\r\n            this.unnamedAtrule(node, token);\r\n        }\r\n        this.init(node, token[2]);\r\n        let type;\r\n        let prev;\r\n        let shift;\r\n        let last = false;\r\n        let open = false;\r\n        const params = [];\r\n        const brackets = [];\r\n        while (!this.tokenizer.endOfFile()) {\r\n            token = this.tokenizer.nextToken();\r\n            type = token[0];\r\n            if (type === '(' || type === '[') {\r\n                brackets.push(type === '(' ? ')' : ']');\r\n            }\r\n            else if (type === '{' && brackets.length > 0) {\r\n                brackets.push('}');\r\n            }\r\n            else if (type === brackets[brackets.length - 1]) {\r\n                brackets.pop();\r\n            }\r\n            if (brackets.length === 0) {\r\n                if (type === ';') {\r\n                    node.source.end = this.getPosition(token[2]);\r\n                    node.source.end.offset++;\r\n                    this.semicolon = true;\r\n                    break;\r\n                }\r\n                else if (type === '{') {\r\n                    open = true;\r\n                    break;\r\n                }\r\n                else if (type === '}') {\r\n                    if (params.length > 0) {\r\n                        shift = params.length - 1;\r\n                        prev = params[shift];\r\n                        while (prev && prev[0] === 'space') {\r\n                            prev = params[--shift];\r\n                        }\r\n                        if (prev) {\r\n                            node.source.end = this.getPosition(prev[3] || prev[2]);\r\n                            node.source.end.offset++;\r\n                        }\r\n                    }\r\n                    this.end(token);\r\n                    break;\r\n                }\r\n                else {\r\n                    params.push(token);\r\n                }\r\n            }\r\n            else {\r\n                params.push(token);\r\n            }\r\n            if (this.tokenizer.endOfFile()) {\r\n                last = true;\r\n                break;\r\n            }\r\n        }\r\n        node.raws.between = this.spacesAndCommentsFromEnd(params);\r\n        if (params.length) {\r\n            node.raws.afterName = this.spacesAndCommentsFromStart(params);\r\n            this.raw(node, 'params', params);\r\n            if (last) {\r\n                token = params[params.length - 1];\r\n                node.source.end = this.getPosition(token[3] || token[2]);\r\n                node.source.end.offset++;\r\n                this.spaces = node.raws.between;\r\n                node.raws.between = '';\r\n            }\r\n        }\r\n        else {\r\n            node.raws.afterName = '';\r\n            node.params = '';\r\n        }\r\n        if (open) {\r\n            node.nodes = [];\r\n            this.current = node;\r\n        }\r\n    }\r\n    checkMissedSemicolon(tokens) {\r\n        const colon = this.colon(tokens);\r\n        if (colon === false)\r\n            return;\r\n        let founded = 0;\r\n        let token;\r\n        for (let j = colon - 1; j >= 0; j--) {\r\n            token = tokens[j];\r\n            if (token[0] !== 'space') {\r\n                founded += 1;\r\n                if (founded === 2)\r\n                    break;\r\n            }\r\n        }\r\n        // If the token is a word, e.g. `!important`, `red` or any other valid property's value.\r\n        // Then we need to return the colon after that word token. [3] is the \"end\" colon of that word.\r\n        // And because we need it after that one we do +1 to get the next one.\r\n        throw this.input.error('Missed semicolon', token[0] === 'word' ? token[3] + 1 : token[2]);\r\n    }\r\n    colon(tokens) {\r\n        let brackets = 0;\r\n        let prev, token, type;\r\n        for (const [i, element] of tokens.entries()) {\r\n            token = element;\r\n            type = token[0];\r\n            if (type === '(') {\r\n                brackets += 1;\r\n            }\r\n            if (type === ')') {\r\n                brackets -= 1;\r\n            }\r\n            if (brackets === 0 && type === ':') {\r\n                if (!prev) {\r\n                    this.doubleColon(token);\r\n                }\r\n                else if (prev[0] === 'word' && prev[1] === 'progid') {\r\n                    continue;\r\n                }\r\n                else {\r\n                    return i;\r\n                }\r\n            }\r\n            prev = token;\r\n        }\r\n        return false;\r\n    }\r\n    comment(token) {\r\n        const node = new Comment();\r\n        this.init(node, token[2]);\r\n        node.source.end = this.getPosition(token[3] || token[2]);\r\n        node.source.end.offset++;\r\n        const text = token[1].slice(2, -2);\r\n        if (/^\\s*$/.test(text)) {\r\n            node.text = '';\r\n            node.raws.left = text;\r\n            node.raws.right = '';\r\n        }\r\n        else {\r\n            const match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/);\r\n            node.text = match[2];\r\n            node.raws.left = match[1];\r\n            node.raws.right = match[3];\r\n        }\r\n    }\r\n    createTokenizer() {\r\n        this.tokenizer = tokenizer(this.input);\r\n    }\r\n    decl(tokens, customProperty) {\r\n        const node = new Declaration();\r\n        this.init(node, tokens[0][2]);\r\n        const last = tokens[tokens.length - 1];\r\n        if (last[0] === ';') {\r\n            this.semicolon = true;\r\n            tokens.pop();\r\n        }\r\n        node.source.end = this.getPosition(last[3] || last[2] || findLastWithPosition(tokens));\r\n        node.source.end.offset++;\r\n        while (tokens[0][0] !== 'word') {\r\n            if (tokens.length === 1)\r\n                this.unknownWord(tokens);\r\n            node.raws.before += tokens.shift()[1];\r\n        }\r\n        node.source.start = this.getPosition(tokens[0][2]);\r\n        node.prop = '';\r\n        while (tokens.length) {\r\n            const type = tokens[0][0];\r\n            if (type === ':' || type === 'space' || type === 'comment') {\r\n                break;\r\n            }\r\n            node.prop += tokens.shift()[1];\r\n        }\r\n        node.raws.between = '';\r\n        let token;\r\n        while (tokens.length) {\r\n            token = tokens.shift();\r\n            if (token[0] === ':') {\r\n                node.raws.between += token[1];\r\n                break;\r\n            }\r\n            else {\r\n                if (token[0] === 'word' && /\\w/.test(token[1])) {\r\n                    this.unknownWord([token]);\r\n                }\r\n                node.raws.between += token[1];\r\n            }\r\n        }\r\n        if (node.prop[0] === '_' || node.prop[0] === '*') {\r\n            node.raws.before += node.prop[0];\r\n            node.prop = node.prop.slice(1);\r\n        }\r\n        let firstSpaces = [];\r\n        let next;\r\n        while (tokens.length) {\r\n            next = tokens[0][0];\r\n            if (next !== 'space' && next !== 'comment')\r\n                break;\r\n            firstSpaces.push(tokens.shift());\r\n        }\r\n        this.precheckMissedSemicolon(tokens);\r\n        for (let i = tokens.length - 1; i >= 0; i--) {\r\n            token = tokens[i];\r\n            if (token[1].toLowerCase() === '!important') {\r\n                node.important = true;\r\n                let string = this.stringFrom(tokens, i);\r\n                string = this.spacesFromEnd(tokens) + string;\r\n                if (string !== ' !important')\r\n                    node.raws.important = string;\r\n                break;\r\n            }\r\n            else if (token[1].toLowerCase() === 'important') {\r\n                const cache = tokens.slice(0);\r\n                let str = '';\r\n                for (let j = i; j > 0; j--) {\r\n                    const type = cache[j][0];\r\n                    if (str.trim().startsWith('!') && type !== 'space') {\r\n                        break;\r\n                    }\r\n                    str = cache.pop()[1] + str;\r\n                }\r\n                if (str.trim().startsWith('!')) {\r\n                    node.important = true;\r\n                    node.raws.important = str;\r\n                    tokens = cache;\r\n                }\r\n            }\r\n            if (token[0] !== 'space' && token[0] !== 'comment') {\r\n                break;\r\n            }\r\n        }\r\n        const hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment');\r\n        if (hasWord) {\r\n            node.raws.between += firstSpaces.map(i => i[1]).join('');\r\n            firstSpaces = [];\r\n        }\r\n        this.raw(node, 'value', firstSpaces.concat(tokens), customProperty);\r\n        if (node.value.includes(':') && !customProperty) {\r\n            this.checkMissedSemicolon(tokens);\r\n        }\r\n    }\r\n    doubleColon(token) {\r\n        throw this.input.error('Double colon', { offset: token[2] }, { offset: token[2] + token[1].length });\r\n    }\r\n    emptyRule(token) {\r\n        const node = new Rule();\r\n        this.init(node, token[2]);\r\n        node.selector = '';\r\n        node.raws.between = '';\r\n        this.current = node;\r\n    }\r\n    end(token) {\r\n        if (this.current.nodes && this.current.nodes.length) {\r\n            this.current.raws.semicolon = this.semicolon;\r\n        }\r\n        this.semicolon = false;\r\n        this.current.raws.after = (this.current.raws.after || '') + this.spaces;\r\n        this.spaces = '';\r\n        if (this.current.parent) {\r\n            this.current.source.end = this.getPosition(token[2]);\r\n            this.current.source.end.offset++;\r\n            this.current = this.current.parent;\r\n        }\r\n        else {\r\n            this.unexpectedClose(token);\r\n        }\r\n    }\r\n    endFile() {\r\n        if (this.current.parent)\r\n            this.unclosedBlock();\r\n        if (this.current.nodes && this.current.nodes.length) {\r\n            this.current.raws.semicolon = this.semicolon;\r\n        }\r\n        this.current.raws.after = (this.current.raws.after || '') + this.spaces;\r\n        this.root.source.end = this.getPosition(this.tokenizer.position());\r\n    }\r\n    freeSemicolon(token) {\r\n        this.spaces += token[1];\r\n        if (this.current.nodes) {\r\n            const prev = this.current.nodes[this.current.nodes.length - 1];\r\n            if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\r\n                prev.raws.ownSemicolon = this.spaces;\r\n                this.spaces = '';\r\n            }\r\n        }\r\n    }\r\n    // Helpers\r\n    getPosition(offset) {\r\n        const pos = this.input.fromOffset(offset);\r\n        return {\r\n            column: pos.col,\r\n            line: pos.line,\r\n            offset\r\n        };\r\n    }\r\n    init(node, offset) {\r\n        this.current.push(node);\r\n        node.source = {\r\n            input: this.input,\r\n            start: this.getPosition(offset)\r\n        };\r\n        node.raws.before = this.spaces;\r\n        this.spaces = '';\r\n        if (node.type !== 'comment')\r\n            this.semicolon = false;\r\n    }\r\n    other(start) {\r\n        let end = false;\r\n        let type = null;\r\n        let colon = false;\r\n        let bracket = null;\r\n        const brackets = [];\r\n        const customProperty = start[1].startsWith('--');\r\n        const tokens = [];\r\n        let token = start;\r\n        while (token) {\r\n            type = token[0];\r\n            tokens.push(token);\r\n            if (type === '(' || type === '[') {\r\n                if (!bracket)\r\n                    bracket = token;\r\n                brackets.push(type === '(' ? ')' : ']');\r\n            }\r\n            else if (customProperty && colon && type === '{') {\r\n                if (!bracket)\r\n                    bracket = token;\r\n                brackets.push('}');\r\n            }\r\n            else if (brackets.length === 0) {\r\n                if (type === ';') {\r\n                    if (colon) {\r\n                        this.decl(tokens, customProperty);\r\n                        return;\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n                else if (type === '{') {\r\n                    this.rule(tokens);\r\n                    return;\r\n                }\r\n                else if (type === '}') {\r\n                    this.tokenizer.back(tokens.pop());\r\n                    end = true;\r\n                    break;\r\n                }\r\n                else if (type === ':') {\r\n                    colon = true;\r\n                }\r\n            }\r\n            else if (type === brackets[brackets.length - 1]) {\r\n                brackets.pop();\r\n                if (brackets.length === 0)\r\n                    bracket = null;\r\n            }\r\n            token = this.tokenizer.nextToken();\r\n        }\r\n        if (this.tokenizer.endOfFile())\r\n            end = true;\r\n        if (brackets.length > 0)\r\n            this.unclosedBracket(bracket);\r\n        if (end && colon) {\r\n            if (!customProperty) {\r\n                while (tokens.length) {\r\n                    token = tokens[tokens.length - 1][0];\r\n                    if (token !== 'space' && token !== 'comment')\r\n                        break;\r\n                    this.tokenizer.back(tokens.pop());\r\n                }\r\n            }\r\n            this.decl(tokens, customProperty);\r\n        }\r\n        else {\r\n            this.unknownWord(tokens);\r\n        }\r\n    }\r\n    parse() {\r\n        let token;\r\n        while (!this.tokenizer.endOfFile()) {\r\n            token = this.tokenizer.nextToken();\r\n            switch (token[0]) {\r\n                case 'space':\r\n                    this.spaces += token[1];\r\n                    break;\r\n                case ';':\r\n                    this.freeSemicolon(token);\r\n                    break;\r\n                case '}':\r\n                    this.end(token);\r\n                    break;\r\n                case 'comment':\r\n                    this.comment(token);\r\n                    break;\r\n                case 'at-word':\r\n                    this.atrule(token);\r\n                    break;\r\n                case '{':\r\n                    this.emptyRule(token);\r\n                    break;\r\n                default:\r\n                    this.other(token);\r\n                    break;\r\n            }\r\n        }\r\n        this.endFile();\r\n    }\r\n    precheckMissedSemicolon( /* tokens */) {\r\n        // Hook for Safe Parser\r\n    }\r\n    raw(node, prop, tokens, customProperty) {\r\n        let token, type;\r\n        const length = tokens.length;\r\n        let value = '';\r\n        let clean = true;\r\n        let next, prev;\r\n        for (let i = 0; i < length; i += 1) {\r\n            token = tokens[i];\r\n            type = token[0];\r\n            if (type === 'space' && i === length - 1 && !customProperty) {\r\n                clean = false;\r\n            }\r\n            else if (type === 'comment') {\r\n                prev = tokens[i - 1] ? tokens[i - 1][0] : 'empty';\r\n                next = tokens[i + 1] ? tokens[i + 1][0] : 'empty';\r\n                if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next]) {\r\n                    if (value.slice(-1) === ',') {\r\n                        clean = false;\r\n                    }\r\n                    else {\r\n                        value += token[1];\r\n                    }\r\n                }\r\n                else {\r\n                    clean = false;\r\n                }\r\n            }\r\n            else {\r\n                value += token[1];\r\n            }\r\n        }\r\n        if (!clean) {\r\n            const raw = tokens.reduce((all, i) => all + i[1], '');\r\n            node.raws[prop] = { raw, value };\r\n        }\r\n        node[prop] = value;\r\n    }\r\n    rule(tokens) {\r\n        tokens.pop();\r\n        const node = new Rule();\r\n        this.init(node, tokens[0][2]);\r\n        node.raws.between = this.spacesAndCommentsFromEnd(tokens);\r\n        this.raw(node, 'selector', tokens);\r\n        this.current = node;\r\n    }\r\n    spacesAndCommentsFromEnd(tokens) {\r\n        let lastTokenType;\r\n        let spaces = '';\r\n        while (tokens.length) {\r\n            lastTokenType = tokens[tokens.length - 1][0];\r\n            if (lastTokenType !== 'space' && lastTokenType !== 'comment')\r\n                break;\r\n            spaces = tokens.pop()[1] + spaces;\r\n        }\r\n        return spaces;\r\n    }\r\n    // Errors\r\n    spacesAndCommentsFromStart(tokens) {\r\n        let next;\r\n        let spaces = '';\r\n        while (tokens.length) {\r\n            next = tokens[0][0];\r\n            if (next !== 'space' && next !== 'comment')\r\n                break;\r\n            spaces += tokens.shift()[1];\r\n        }\r\n        return spaces;\r\n    }\r\n    spacesFromEnd(tokens) {\r\n        let lastTokenType;\r\n        let spaces = '';\r\n        while (tokens.length) {\r\n            lastTokenType = tokens[tokens.length - 1][0];\r\n            if (lastTokenType !== 'space')\r\n                break;\r\n            spaces = tokens.pop()[1] + spaces;\r\n        }\r\n        return spaces;\r\n    }\r\n    stringFrom(tokens, from) {\r\n        let result = '';\r\n        for (let i = from; i < tokens.length; i++) {\r\n            result += tokens[i][1];\r\n        }\r\n        tokens.splice(from, tokens.length - from);\r\n        return result;\r\n    }\r\n    unclosedBlock() {\r\n        const pos = this.current.source.start;\r\n        throw this.input.error('Unclosed block', pos.line, pos.column);\r\n    }\r\n    unclosedBracket(bracket) {\r\n        throw this.input.error('Unclosed bracket', { offset: bracket[2] }, { offset: bracket[2] + 1 });\r\n    }\r\n    unexpectedClose(token) {\r\n        throw this.input.error('Unexpected }', { offset: token[2] }, { offset: token[2] + 1 });\r\n    }\r\n    unknownWord(tokens) {\r\n        throw this.input.error('Unknown word', { offset: tokens[0][2] }, { offset: tokens[0][2] + tokens[0][1].length });\r\n    }\r\n    unnamedAtrule(node, token) {\r\n        throw this.input.error('At-rule without name', { offset: token[2] }, { offset: token[2] + token[1].length });\r\n    }\r\n}\r\n", "import { Container } from \"./container\";\r\nimport { Input } from './input';\r\nimport { Parser } from './parser';\r\nexport function parse(css, opts) {\r\n    const input = new Input(css, opts);\r\n    const parser = new Parser(input);\r\n    try {\r\n        parser.parse();\r\n    }\r\n    catch (e) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (e.name === 'CssSyntaxError' && opts && opts.from) {\r\n                if (/\\.scss$/i.test(opts.from)) {\r\n                    e.message +=\r\n                        '\\nYou tried to parse SCSS with ' +\r\n                            'the standard CSS parser; ' +\r\n                            'try again with the postcss-scss parser';\r\n                }\r\n                else if (/\\.sass/i.test(opts.from)) {\r\n                    e.message +=\r\n                        '\\nYou tried to parse Sass with ' +\r\n                            'the standard CSS parser; ' +\r\n                            'try again with the postcss-sass parser';\r\n                }\r\n                else if (/\\.less$/i.test(opts.from)) {\r\n                    e.message +=\r\n                        '\\nYou tried to parse Less with ' +\r\n                            'the standard CSS parser; ' +\r\n                            'try again with the postcss-less parser';\r\n                }\r\n            }\r\n        }\r\n        throw e;\r\n    }\r\n    return parser.root;\r\n}\r\nContainer.registerParse(parse);\r\n", "export class Warning {\r\n    constructor(text, opts = {}) {\r\n        this.type = 'warning';\r\n        this.text = text;\r\n        if (opts.node && opts.node.source) {\r\n            const range = opts.node.rangeBy(opts);\r\n            this.line = range.start.line;\r\n            this.column = range.start.column;\r\n            this.endLine = range.end.line;\r\n            this.endColumn = range.end.column;\r\n        }\r\n        for (const opt in opts)\r\n            this[opt] = opts[opt];\r\n    }\r\n    toString() {\r\n        if (this.node) {\r\n            return this.node.error(this.text, {\r\n                index: this.index,\r\n                plugin: this.plugin,\r\n                word: this.word\r\n            }).message;\r\n        }\r\n        if (this.plugin) {\r\n            return this.plugin + ': ' + this.text;\r\n        }\r\n        return this.text;\r\n    }\r\n}\r\n", "import { Warning } from './warning';\r\nexport class Result {\r\n    constructor(processor, root, opts) {\r\n        this.processor = processor;\r\n        this.messages = [];\r\n        this.root = root;\r\n        this.opts = opts;\r\n        this.css = undefined;\r\n        this.map = undefined;\r\n    }\r\n    toString() {\r\n        return this.css;\r\n    }\r\n    warn(text, opts = {}) {\r\n        if (!opts.plugin) {\r\n            if (this.lastPlugin && this.lastPlugin.postcssPlugin) {\r\n                opts.plugin = this.lastPlugin.postcssPlugin;\r\n            }\r\n        }\r\n        const warning = new Warning(text, opts);\r\n        this.messages.push(warning);\r\n        return warning;\r\n    }\r\n    warnings() {\r\n        return this.messages.filter(i => i.type === 'warning');\r\n    }\r\n    get content() {\r\n        return this.css;\r\n    }\r\n}\r\n", "import { MapGenerator } from './map-generator';\r\nimport { warnOnce } from './warn-once';\r\nimport { parse } from './parse';\r\nimport { Result } from './result';\r\nimport { stringify } from \"./stringify\";\r\nexport class NoWorkResult {\r\n    constructor(processor, css, opts) {\r\n        css = css.toString();\r\n        this.stringified = false;\r\n        this._processor = processor;\r\n        this._css = css;\r\n        this._opts = opts;\r\n        this._map = undefined;\r\n        let root;\r\n        const str = stringify;\r\n        this.result = new Result(this._processor, root, this._opts);\r\n        this.result.css = css;\r\n        const self = this;\r\n        Object.defineProperty(this.result, 'root', {\r\n            get() {\r\n                return self.root;\r\n            }\r\n        });\r\n        const map = new MapGenerator(str, root, this._opts, css);\r\n        if (map.isMap()) {\r\n            const [generatedCSS, generatedMap] = map.generate();\r\n            if (generatedCSS) {\r\n                this.result.css = generatedCSS;\r\n            }\r\n            if (generatedMap) {\r\n                this.result.map = generatedMap;\r\n            }\r\n        }\r\n        else {\r\n            map.clearAnnotation();\r\n            this.result.css = map.css;\r\n        }\r\n    }\r\n    async() {\r\n        if (this.error)\r\n            return Promise.reject(this.error);\r\n        return Promise.resolve(this.result);\r\n    }\r\n    catch(onRejected) {\r\n        return this.async().catch(onRejected);\r\n    }\r\n    finally(onFinally) {\r\n        return this.async().then(onFinally, onFinally);\r\n    }\r\n    sync() {\r\n        if (this.error)\r\n            throw this.error;\r\n        return this.result;\r\n    }\r\n    then(onFulfilled, onRejected) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!('from' in this._opts)) {\r\n                warnOnce('Without `from` option PostCSS could generate wrong source map ' +\r\n                    'and will not find Browserslist config. Set it to CSS file path ' +\r\n                    'or to `undefined` to prevent this warning.');\r\n            }\r\n        }\r\n        return this.async().then(onFulfilled, onRejected);\r\n    }\r\n    toString() {\r\n        return this._css;\r\n    }\r\n    warnings() {\r\n        return [];\r\n    }\r\n    get content() {\r\n        return this.result.css;\r\n    }\r\n    get css() {\r\n        return this.result.css;\r\n    }\r\n    get map() {\r\n        return this.result.map;\r\n    }\r\n    get messages() {\r\n        return [];\r\n    }\r\n    get opts() {\r\n        return this.result.opts;\r\n    }\r\n    get processor() {\r\n        return this.result.processor;\r\n    }\r\n    get root() {\r\n        if (this._root) {\r\n            return this._root;\r\n        }\r\n        let root;\r\n        const parser = parse;\r\n        try {\r\n            root = parser(this._css, this._opts);\r\n        }\r\n        catch (error) {\r\n            this.error = error;\r\n        }\r\n        if (this.error) {\r\n            throw this.error;\r\n        }\r\n        else {\r\n            this._root = root;\r\n            return root;\r\n        }\r\n    }\r\n    get [Symbol.toStringTag]() {\r\n        return 'NoWorkResult';\r\n    }\r\n}\r\n", "import { Container } from \"./container.js\";\r\nimport { Document } from \"./document.js\";\r\nimport { MapGenerator } from \"./map-generator.js\";\r\nimport { parse } from \"./parse.js\";\r\nimport { Result } from \"./result.js\";\r\nimport { stringify } from \"./stringify.js\";\r\nimport { isClean, my } from \"./symbols.js\";\r\nimport { warnOnce } from \"./warn-once.js\";\r\nimport { Root } from './root';\r\nconst TYPE_TO_CLASS_NAME = {\r\n    atrule: 'AtRule',\r\n    comment: 'Comment',\r\n    decl: 'Declaration',\r\n    document: 'Document',\r\n    root: 'Root',\r\n    rule: 'Rule'\r\n};\r\nconst PLUGIN_PROPS = {\r\n    AtRule: true,\r\n    AtRuleExit: true,\r\n    Comment: true,\r\n    CommentExit: true,\r\n    Declaration: true,\r\n    DeclarationExit: true,\r\n    Document: true,\r\n    DocumentExit: true,\r\n    Once: true,\r\n    OnceExit: true,\r\n    postcssPlugin: true,\r\n    prepare: true,\r\n    Root: true,\r\n    RootExit: true,\r\n    Rule: true,\r\n    RuleExit: true\r\n};\r\nconst NOT_VISITORS = {\r\n    Once: true,\r\n    postcssPlugin: true,\r\n    prepare: true\r\n};\r\nconst CHILDREN = 0;\r\nfunction isPromise(obj) {\r\n    return typeof obj === 'object' && typeof obj.then === 'function';\r\n}\r\nfunction getEvents(node) {\r\n    let key = false;\r\n    const type = TYPE_TO_CLASS_NAME[node.type];\r\n    if (node.type === 'decl') {\r\n        key = node.prop.toLowerCase();\r\n    }\r\n    else if (node.type === 'atrule') {\r\n        key = node.name.toLowerCase();\r\n    }\r\n    if (key && node.append) {\r\n        return [\r\n            type,\r\n            type + '-' + key,\r\n            CHILDREN,\r\n            type + 'Exit',\r\n            type + 'Exit-' + key\r\n        ];\r\n    }\r\n    else if (key) {\r\n        return [type, type + '-' + key, type + 'Exit', type + 'Exit-' + key];\r\n    }\r\n    else if (node.append) {\r\n        return [type, CHILDREN, type + 'Exit'];\r\n    }\r\n    else {\r\n        return [type, type + 'Exit'];\r\n    }\r\n}\r\nfunction toStack(node) {\r\n    let events;\r\n    if (node.type === 'document') {\r\n        events = ['Document', CHILDREN, 'DocumentExit'];\r\n    }\r\n    else if (node.type === 'root') {\r\n        events = ['Root', CHILDREN, 'RootExit'];\r\n    }\r\n    else {\r\n        events = getEvents(node);\r\n    }\r\n    return {\r\n        eventIndex: 0,\r\n        events,\r\n        iterator: 0,\r\n        node,\r\n        visitorIndex: 0,\r\n        visitors: []\r\n    };\r\n}\r\nfunction cleanMarks(node) {\r\n    node[isClean] = false;\r\n    if (node.nodes)\r\n        node.nodes.forEach(i => cleanMarks(i));\r\n    return node;\r\n}\r\nlet postcss = {};\r\nexport class LazyResult {\r\n    constructor(processor, css, opts) {\r\n        this.stringified = false;\r\n        this.processed = false;\r\n        let root;\r\n        if (typeof css === 'object' &&\r\n            css !== null &&\r\n            (css.type === 'root' || css.type === 'document')) {\r\n            root = cleanMarks(css);\r\n        }\r\n        else if (css instanceof LazyResult || css instanceof Result) {\r\n            root = cleanMarks(css.root);\r\n            if (css.map) {\r\n                if (typeof opts.map === 'undefined')\r\n                    opts.map = {};\r\n                if (!opts.map.inline)\r\n                    opts.map.inline = false;\r\n                opts.map.prev = css.map;\r\n            }\r\n        }\r\n        else {\r\n            let parser = parse;\r\n            if (opts.syntax)\r\n                parser = opts.syntax.parse;\r\n            if (opts.parser)\r\n                parser = opts.parser;\r\n            if (parser.parse)\r\n                parser = parser.parse;\r\n            try {\r\n                root = parser(css, opts);\r\n            }\r\n            catch (error) {\r\n                this.processed = true;\r\n                this.error = error;\r\n            }\r\n            if (root && !root[my]) {\r\n                /* c8 ignore next 2 */\r\n                Container.rebuild(root);\r\n            }\r\n        }\r\n        this.result = new Result(processor, root, opts);\r\n        this.helpers = { ...postcss, postcss, result: this.result };\r\n        this.plugins = this.processor.plugins.map(plugin => {\r\n            if (typeof plugin === 'object' && plugin.prepare) {\r\n                return { ...plugin, ...plugin.prepare(this.result) };\r\n            }\r\n            else {\r\n                return plugin;\r\n            }\r\n        });\r\n    }\r\n    async() {\r\n        if (this.error)\r\n            return Promise.reject(this.error);\r\n        if (this.processed)\r\n            return Promise.resolve(this.result);\r\n        if (!this.processing) {\r\n            this.processing = this.runAsync();\r\n        }\r\n        return this.processing;\r\n    }\r\n    catch(onRejected) {\r\n        return this.async().catch(onRejected);\r\n    }\r\n    finally(onFinally) {\r\n        return this.async().then(onFinally, onFinally);\r\n    }\r\n    getAsyncError() {\r\n        throw new Error('Use process(css).then(cb) to work with async plugins');\r\n    }\r\n    handleError(error, node) {\r\n        const plugin = this.result.lastPlugin;\r\n        try {\r\n            if (node)\r\n                node.addToError(error);\r\n            this.error = error;\r\n            if (error.name === 'CssSyntaxError' && !error.plugin) {\r\n                error.plugin = plugin.postcssPlugin;\r\n                error.setMessage();\r\n            }\r\n            else if (plugin.postcssVersion) {\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    const pluginName = plugin.postcssPlugin;\r\n                    const pluginVer = plugin.postcssVersion;\r\n                    const runtimeVer = this.result.processor.version;\r\n                    const a = pluginVer.split('.');\r\n                    const b = runtimeVer.split('.');\r\n                    if (a[0] !== b[0] || Number.parseInt(a[1]) > Number.parseInt(b[1])) {\r\n                        // eslint-disable-next-line no-console\r\n                        console.error('Unknown error from PostCSS plugin. Your current PostCSS ' +\r\n                            'version is ' +\r\n                            runtimeVer +\r\n                            ', but ' +\r\n                            pluginName +\r\n                            ' uses ' +\r\n                            pluginVer +\r\n                            '. Perhaps this is the source of the error below.');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (err) {\r\n            /* c8 ignore next 3 */\r\n            // eslint-disable-next-line no-console\r\n            if (console && console.error)\r\n                console.error(err);\r\n        }\r\n        return error;\r\n    }\r\n    prepareVisitors() {\r\n        this.listeners = {};\r\n        const add = (plugin, type, cb) => {\r\n            if (!this.listeners[type])\r\n                this.listeners[type] = [];\r\n            this.listeners[type].push([plugin, cb]);\r\n        };\r\n        for (const plugin of this.plugins) {\r\n            if (typeof plugin === 'object') {\r\n                for (const event in plugin) {\r\n                    if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {\r\n                        throw new Error(`Unknown event ${event} in ${plugin.postcssPlugin}. ` +\r\n                            `Try to update PostCSS (${this.processor.version} now).`);\r\n                    }\r\n                    if (!NOT_VISITORS[event]) {\r\n                        if (typeof plugin[event] === 'object') {\r\n                            for (const filter in plugin[event]) {\r\n                                if (filter === '*') {\r\n                                    add(plugin, event, plugin[event][filter]);\r\n                                }\r\n                                else {\r\n                                    add(plugin, event + '-' + filter.toLowerCase(), plugin[event][filter]);\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (typeof plugin[event] === 'function') {\r\n                            add(plugin, event, plugin[event]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.hasListener = Object.keys(this.listeners).length > 0;\r\n    }\r\n    async runAsync() {\r\n        this.plugin = 0;\r\n        for (let i = 0; i < this.plugins.length; i++) {\r\n            const plugin = this.plugins[i];\r\n            const promise = this.runOnRoot(plugin);\r\n            if (isPromise(promise)) {\r\n                try {\r\n                    await promise;\r\n                }\r\n                catch (error) {\r\n                    throw this.handleError(error);\r\n                }\r\n            }\r\n        }\r\n        this.prepareVisitors();\r\n        if (this.hasListener) {\r\n            const root = this.result.root;\r\n            while (!root[isClean]) {\r\n                root[isClean] = true;\r\n                const stack = [toStack(root)];\r\n                while (stack.length > 0) {\r\n                    const promise = this.visitTick(stack);\r\n                    if (isPromise(promise)) {\r\n                        try {\r\n                            await promise;\r\n                        }\r\n                        catch (e) {\r\n                            const node = stack[stack.length - 1].node;\r\n                            throw this.handleError(e, node);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (this.listeners.OnceExit) {\r\n                for (const [plugin, visitor] of this.listeners.OnceExit) {\r\n                    this.result.lastPlugin = plugin;\r\n                    try {\r\n                        if (root.type === 'document') {\r\n                            const roots = root.nodes.map(subRoot => visitor(subRoot, this.helpers));\r\n                            await Promise.all(roots);\r\n                        }\r\n                        else {\r\n                            await visitor(root, this.helpers);\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        throw this.handleError(e);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.processed = true;\r\n        return this.stringify();\r\n    }\r\n    runOnRoot(plugin) {\r\n        this.result.lastPlugin = plugin;\r\n        try {\r\n            if (typeof plugin === 'object' && plugin.Once) {\r\n                if (this.result.root.type === 'document') {\r\n                    const roots = this.result.root.nodes.map(root => plugin.Once(root, this.helpers));\r\n                    if (isPromise(roots[0])) {\r\n                        return Promise.all(roots);\r\n                    }\r\n                    return roots;\r\n                }\r\n                return plugin.Once(this.result.root, this.helpers);\r\n            }\r\n            else if (typeof plugin === 'function') {\r\n                return plugin(this.result.root, this.result);\r\n            }\r\n        }\r\n        catch (error) {\r\n            throw this.handleError(error);\r\n        }\r\n    }\r\n    stringify() {\r\n        if (this.error)\r\n            throw this.error;\r\n        if (this.stringified)\r\n            return this.result;\r\n        this.stringified = true;\r\n        this.sync();\r\n        const opts = this.result.opts;\r\n        let str = stringify;\r\n        if (opts.syntax)\r\n            str = opts.syntax.stringify;\r\n        if (opts.stringifier)\r\n            str = opts.stringifier;\r\n        if (str.stringify)\r\n            str = str.stringify;\r\n        const map = new MapGenerator(str, this.result.root, this.result.opts);\r\n        const data = map.generate();\r\n        this.result.css = data[0];\r\n        this.result.map = data[1];\r\n        return this.result;\r\n    }\r\n    sync() {\r\n        if (this.error)\r\n            throw this.error;\r\n        if (this.processed)\r\n            return this.result;\r\n        this.processed = true;\r\n        if (this.processing) {\r\n            throw this.getAsyncError();\r\n        }\r\n        for (const plugin of this.plugins) {\r\n            const promise = this.runOnRoot(plugin);\r\n            if (isPromise(promise)) {\r\n                throw this.getAsyncError();\r\n            }\r\n        }\r\n        this.prepareVisitors();\r\n        if (this.hasListener) {\r\n            const root = this.result.root;\r\n            while (!root[isClean]) {\r\n                root[isClean] = true;\r\n                this.walkSync(root);\r\n            }\r\n            if (this.listeners.OnceExit) {\r\n                if (root.type === 'document') {\r\n                    for (const subRoot of root.nodes) {\r\n                        this.visitSync(this.listeners.OnceExit, subRoot);\r\n                    }\r\n                }\r\n                else {\r\n                    this.visitSync(this.listeners.OnceExit, root);\r\n                }\r\n            }\r\n        }\r\n        return this.result;\r\n    }\r\n    then(onFulfilled, onRejected) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!('from' in this.opts)) {\r\n                warnOnce('Without `from` option PostCSS could generate wrong source map ' +\r\n                    'and will not find Browserslist config. Set it to CSS file path ' +\r\n                    'or to `undefined` to prevent this warning.');\r\n            }\r\n        }\r\n        return this.async().then(onFulfilled, onRejected);\r\n    }\r\n    toString() {\r\n        return this.css;\r\n    }\r\n    visitSync(visitors, node) {\r\n        for (const [plugin, visitor] of visitors) {\r\n            this.result.lastPlugin = plugin;\r\n            let promise;\r\n            try {\r\n                promise = visitor(node, this.helpers);\r\n            }\r\n            catch (e) {\r\n                throw this.handleError(e, node.proxyOf);\r\n            }\r\n            if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\r\n                return true;\r\n            }\r\n            if (isPromise(promise)) {\r\n                throw this.getAsyncError();\r\n            }\r\n        }\r\n    }\r\n    visitTick(stack) {\r\n        const visit = stack[stack.length - 1];\r\n        const { node, visitors } = visit;\r\n        if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\r\n            stack.pop();\r\n            return;\r\n        }\r\n        if (visitors.length > 0 && visit.visitorIndex < visitors.length) {\r\n            const [plugin, visitor] = visitors[visit.visitorIndex];\r\n            visit.visitorIndex += 1;\r\n            if (visit.visitorIndex === visitors.length) {\r\n                visit.visitors = [];\r\n                visit.visitorIndex = 0;\r\n            }\r\n            this.result.lastPlugin = plugin;\r\n            try {\r\n                return visitor(node.toProxy(), this.helpers);\r\n            }\r\n            catch (e) {\r\n                throw this.handleError(e, node);\r\n            }\r\n        }\r\n        if (visit.iterator !== 0) {\r\n            const iterator = visit.iterator;\r\n            let child;\r\n            while ((child = node.nodes[node.indexes[iterator]])) {\r\n                node.indexes[iterator] += 1;\r\n                if (!child[isClean]) {\r\n                    child[isClean] = true;\r\n                    stack.push(toStack(child));\r\n                    return;\r\n                }\r\n            }\r\n            visit.iterator = 0;\r\n            delete node.indexes[iterator];\r\n        }\r\n        const events = visit.events;\r\n        while (visit.eventIndex < events.length) {\r\n            const event = events[visit.eventIndex];\r\n            visit.eventIndex += 1;\r\n            if (event === CHILDREN) {\r\n                if (node.nodes && node.nodes.length) {\r\n                    node[isClean] = true;\r\n                    visit.iterator = node.getIterator();\r\n                }\r\n                return;\r\n            }\r\n            else if (this.listeners[event]) {\r\n                visit.visitors = this.listeners[event];\r\n                return;\r\n            }\r\n        }\r\n        stack.pop();\r\n    }\r\n    walkSync(node) {\r\n        node[isClean] = true;\r\n        const events = getEvents(node);\r\n        for (const event of events) {\r\n            if (event === CHILDREN) {\r\n                if (node.nodes) {\r\n                    node.each(child => {\r\n                        if (!child[isClean])\r\n                            this.walkSync(child);\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                const visitors = this.listeners[event];\r\n                if (visitors) {\r\n                    if (this.visitSync(visitors, node.toProxy()))\r\n                        return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    warnings() {\r\n        return this.sync().warnings();\r\n    }\r\n    get content() {\r\n        return this.stringify().content;\r\n    }\r\n    get css() {\r\n        return this.stringify().css;\r\n    }\r\n    get map() {\r\n        return this.stringify().map;\r\n    }\r\n    get messages() {\r\n        return this.sync().messages;\r\n    }\r\n    get opts() {\r\n        return this.result.opts;\r\n    }\r\n    get processor() {\r\n        return this.result.processor;\r\n    }\r\n    get root() {\r\n        return this.sync().root;\r\n    }\r\n    get [Symbol.toStringTag]() {\r\n        return 'LazyResult';\r\n    }\r\n}\r\nLazyResult.registerPostcss = dependant => {\r\n    postcss = dependant;\r\n};\r\nRoot.registerLazyResult(LazyResult);\r\nDocument.registerLazyResult(LazyResult);\r\n", "import { Document } from \"./document\";\r\nimport { Root } from './root';\r\nimport { NoWorkResult } from './no-work-result';\r\nimport { LazyResult } from './lazy-result';\r\nexport class Processor {\r\n    constructor(plugins = []) {\r\n        this.version = '8.4.49';\r\n        this.plugins = this.normalize(plugins);\r\n    }\r\n    normalize(plugins) {\r\n        let normalized = [];\r\n        for (let i of plugins) {\r\n            if (i.postcss === true) {\r\n                i = i();\r\n            }\r\n            else if (i.postcss) {\r\n                i = i.postcss;\r\n            }\r\n            if (typeof i === 'object' && Array.isArray(i.plugins)) {\r\n                normalized = normalized.concat(i.plugins);\r\n            }\r\n            else if (typeof i === 'object' && i.postcssPlugin) {\r\n                normalized.push(i);\r\n            }\r\n            else if (typeof i === 'function') {\r\n                normalized.push(i);\r\n            }\r\n            else if (typeof i === 'object' && (i.parse || i.stringify)) {\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    throw new Error('PostCSS syntaxes cannot be used as plugins. Instead, please use ' +\r\n                        'one of the syntax/parser/stringifier options as outlined ' +\r\n                        'in your PostCSS runner documentation.');\r\n                }\r\n            }\r\n            else {\r\n                throw new Error(i + ' is not a PostCSS plugin');\r\n            }\r\n        }\r\n        return normalized;\r\n    }\r\n    process(css, opts = {}) {\r\n        if (!this.plugins.length &&\r\n            !opts.parser &&\r\n            !opts.stringifier &&\r\n            !opts.syntax) {\r\n            return new NoWorkResult(this, css, opts);\r\n        }\r\n        else {\r\n            return new LazyResult(this, css, opts);\r\n        }\r\n    }\r\n    use(plugin) {\r\n        this.plugins = this.plugins.concat(this.normalize([plugin]));\r\n        return this;\r\n    }\r\n}\r\nRoot.registerProcessor(Processor);\r\nDocument.registerProcessor(Processor);\r\n"],
  "mappings": "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",
  "names": ["LazyResult", "Processor", "Root", "stringify", "AtRule", "Rule", "Root", "AtRule", "Rule", "parse", "parse", "LazyResult", "parse", "Root", "Processor", "LazyResult", "Root"]
}
