{
  "version": 3,
  "sources": ["../../src/postcss/stringifier.js", "../../src/postcss/stringify.js"],
  "sourcesContent": ["const DEFAULT_RAW = {\r\n    after: '\\n',\r\n    beforeClose: '\\n',\r\n    beforeComment: '\\n',\r\n    beforeDecl: '\\n',\r\n    beforeOpen: ' ',\r\n    beforeRule: '\\n',\r\n    colon: ': ',\r\n    commentLeft: ' ',\r\n    commentRight: ' ',\r\n    emptyBody: '',\r\n    indent: '    ',\r\n    semicolon: false\r\n};\r\nfunction capitalize(str) {\r\n    return str[0].toUpperCase() + str.slice(1);\r\n}\r\nexport class Stringifier {\r\n    constructor(builder) {\r\n        this.builder = builder;\r\n    }\r\n    atrule(node, semicolon) {\r\n        let name = '@' + node.name;\r\n        const params = node.params ? this.rawValue(node, 'params') : '';\r\n        if (typeof node.raws.afterName !== 'undefined') {\r\n            name += node.raws.afterName;\r\n        }\r\n        else if (params) {\r\n            name += ' ';\r\n        }\r\n        if (node.nodes) {\r\n            this.block(node, name + params);\r\n        }\r\n        else {\r\n            const end = (node.raws.between || '') + (semicolon ? ';' : '');\r\n            this.builder(name + params + end, node);\r\n        }\r\n    }\r\n    beforeAfter(node, detect) {\r\n        let value;\r\n        if (node.type === 'decl') {\r\n            value = this.raw(node, null, 'beforeDecl');\r\n        }\r\n        else if (node.type === 'comment') {\r\n            value = this.raw(node, null, 'beforeComment');\r\n        }\r\n        else if (detect === 'before') {\r\n            value = this.raw(node, null, 'beforeRule');\r\n        }\r\n        else {\r\n            value = this.raw(node, null, 'beforeClose');\r\n        }\r\n        let buf = node.parent;\r\n        let depth = 0;\r\n        while (buf && buf.type !== 'root') {\r\n            depth += 1;\r\n            buf = buf.parent;\r\n        }\r\n        if (value.includes('\\n')) {\r\n            const indent = this.raw(node, null, 'indent');\r\n            if (indent.length) {\r\n                for (let step = 0; step < depth; step++)\r\n                    value += indent;\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n    block(node, start) {\r\n        const between = this.raw(node, 'between', 'beforeOpen');\r\n        this.builder(start + between + '{', node, 'start');\r\n        let after;\r\n        if (node.nodes && node.nodes.length) {\r\n            this.body(node);\r\n            after = this.raw(node, 'after');\r\n        }\r\n        else {\r\n            after = this.raw(node, 'after', 'emptyBody');\r\n        }\r\n        if (after)\r\n            this.builder(after);\r\n        this.builder('}', node, 'end');\r\n    }\r\n    body(node) {\r\n        let last = node.nodes.length - 1;\r\n        while (last > 0) {\r\n            if (node.nodes[last].type !== 'comment')\r\n                break;\r\n            last -= 1;\r\n        }\r\n        const semicolon = this.raw(node, 'semicolon');\r\n        for (let i = 0; i < node.nodes.length; i++) {\r\n            const child = node.nodes[i];\r\n            const before = this.raw(child, 'before');\r\n            if (before)\r\n                this.builder(before);\r\n            this.stringify(child, last !== i || semicolon);\r\n        }\r\n    }\r\n    comment(node) {\r\n        const left = this.raw(node, 'left', 'commentLeft');\r\n        const right = this.raw(node, 'right', 'commentRight');\r\n        this.builder('/*' + left + node.text + right + '*/', node);\r\n    }\r\n    decl(node, semicolon) {\r\n        const between = this.raw(node, 'between', 'colon');\r\n        let string = node.prop + between + this.rawValue(node, 'value');\r\n        if (node.important) {\r\n            string += node.raws.important || ' !important';\r\n        }\r\n        if (semicolon)\r\n            string += ';';\r\n        this.builder(string, node);\r\n    }\r\n    document(node) {\r\n        this.body(node);\r\n    }\r\n    raw(node, own, detect) {\r\n        let value;\r\n        if (!detect)\r\n            detect = own;\r\n        // Already had\r\n        if (own) {\r\n            value = node.raws[own];\r\n            if (typeof value !== 'undefined')\r\n                return value;\r\n        }\r\n        const parent = node.parent;\r\n        if (detect === 'before') {\r\n            // Hack for first rule in CSS\r\n            if (!parent || (parent.type === 'root' && parent.first === node)) {\r\n                return '';\r\n            }\r\n            // `root` nodes in `document` should use only their own raws\r\n            if (parent && parent.type === 'document') {\r\n                return '';\r\n            }\r\n        }\r\n        // Floating child without parent\r\n        if (!parent)\r\n            return DEFAULT_RAW[detect];\r\n        // Detect style by other nodes\r\n        const root = node.root();\r\n        if (!root.rawCache)\r\n            root.rawCache = {};\r\n        if (typeof root.rawCache[detect] !== 'undefined') {\r\n            return root.rawCache[detect];\r\n        }\r\n        if (detect === 'before' || detect === 'after') {\r\n            return this.beforeAfter(node, detect);\r\n        }\r\n        else {\r\n            const method = 'raw' + capitalize(detect);\r\n            if (this[method]) {\r\n                value = this[method](root, node);\r\n            }\r\n            else {\r\n                root.walk(i => {\r\n                    value = i.raws[own];\r\n                    if (typeof value !== 'undefined')\r\n                        return false;\r\n                });\r\n            }\r\n        }\r\n        if (typeof value === 'undefined')\r\n            value = DEFAULT_RAW[detect];\r\n        root.rawCache[detect] = value;\r\n        return value;\r\n    }\r\n    rawBeforeClose(root) {\r\n        let value;\r\n        root.walk(i => {\r\n            if (i.nodes && i.nodes.length > 0) {\r\n                if (typeof i.raws.after !== 'undefined') {\r\n                    value = i.raws.after;\r\n                    if (value.includes('\\n')) {\r\n                        value = value.replace(/[^\\n]+$/, '');\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n        });\r\n        if (value)\r\n            value = value.replace(/\\S/g, '');\r\n        return value;\r\n    }\r\n    rawBeforeComment(root, node) {\r\n        let value;\r\n        root.walkComments(i => {\r\n            if (typeof i.raws.before !== 'undefined') {\r\n                value = i.raws.before;\r\n                if (value.includes('\\n')) {\r\n                    value = value.replace(/[^\\n]+$/, '');\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n        if (typeof value === 'undefined') {\r\n            value = this.raw(node, null, 'beforeDecl');\r\n        }\r\n        else if (value) {\r\n            value = value.replace(/\\S/g, '');\r\n        }\r\n        return value;\r\n    }\r\n    rawBeforeDecl(root, node) {\r\n        let value;\r\n        root.walkDecls(i => {\r\n            if (typeof i.raws.before !== 'undefined') {\r\n                value = i.raws.before;\r\n                if (value.includes('\\n')) {\r\n                    value = value.replace(/[^\\n]+$/, '');\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n        if (typeof value === 'undefined') {\r\n            value = this.raw(node, null, 'beforeRule');\r\n        }\r\n        else if (value) {\r\n            value = value.replace(/\\S/g, '');\r\n        }\r\n        return value;\r\n    }\r\n    rawBeforeOpen(root) {\r\n        let value;\r\n        root.walk(i => {\r\n            if (i.type !== 'decl') {\r\n                value = i.raws.between;\r\n                if (typeof value !== 'undefined')\r\n                    return false;\r\n            }\r\n        });\r\n        return value;\r\n    }\r\n    rawBeforeRule(root) {\r\n        let value;\r\n        root.walk(i => {\r\n            if (i.nodes && (i.parent !== root || root.first !== i)) {\r\n                if (typeof i.raws.before !== 'undefined') {\r\n                    value = i.raws.before;\r\n                    if (value.includes('\\n')) {\r\n                        value = value.replace(/[^\\n]+$/, '');\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n        });\r\n        if (value)\r\n            value = value.replace(/\\S/g, '');\r\n        return value;\r\n    }\r\n    rawColon(root) {\r\n        let value;\r\n        root.walkDecls(i => {\r\n            if (typeof i.raws.between !== 'undefined') {\r\n                value = i.raws.between.replace(/[^\\s:]/g, '');\r\n                return false;\r\n            }\r\n        });\r\n        return value;\r\n    }\r\n    rawEmptyBody(root) {\r\n        let value;\r\n        root.walk(i => {\r\n            if (i.nodes && i.nodes.length === 0) {\r\n                value = i.raws.after;\r\n                if (typeof value !== 'undefined')\r\n                    return false;\r\n            }\r\n        });\r\n        return value;\r\n    }\r\n    rawIndent(root) {\r\n        if (root.raws.indent)\r\n            return root.raws.indent;\r\n        let value;\r\n        root.walk(i => {\r\n            const p = i.parent;\r\n            if (p && p !== root && p.parent && p.parent === root) {\r\n                if (typeof i.raws.before !== 'undefined') {\r\n                    const parts = i.raws.before.split('\\n');\r\n                    value = parts[parts.length - 1];\r\n                    value = value.replace(/\\S/g, '');\r\n                    return false;\r\n                }\r\n            }\r\n        });\r\n        return value;\r\n    }\r\n    rawSemicolon(root) {\r\n        let value;\r\n        root.walk(i => {\r\n            if (i.nodes && i.nodes.length && i.last.type === 'decl') {\r\n                value = i.raws.semicolon;\r\n                if (typeof value !== 'undefined')\r\n                    return false;\r\n            }\r\n        });\r\n        return value;\r\n    }\r\n    rawValue(node, prop) {\r\n        const value = node[prop];\r\n        const raw = node.raws[prop];\r\n        if (raw && raw.value === value) {\r\n            return raw.raw;\r\n        }\r\n        return value;\r\n    }\r\n    root(node) {\r\n        this.body(node);\r\n        if (node.raws.after)\r\n            this.builder(node.raws.after);\r\n    }\r\n    rule(node) {\r\n        this.block(node, this.rawValue(node, 'selector'));\r\n        if (node.raws.ownSemicolon) {\r\n            this.builder(node.raws.ownSemicolon, node, 'end');\r\n        }\r\n    }\r\n    stringify(node, semicolon) {\r\n        /* c8 ignore start */\r\n        if (!this[node.type]) {\r\n            throw new Error('Unknown AST node type ' +\r\n                node.type +\r\n                '. ' +\r\n                'Maybe you need to change PostCSS stringifier.');\r\n        }\r\n        /* c8 ignore stop */\r\n        this[node.type](node, semicolon);\r\n    }\r\n}\r\n", "import { Stringifier } from \"./stringifier\";\r\nexport function stringify(node, builder) {\r\n    const str = new Stringifier(builder);\r\n    str.stringify(node);\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
