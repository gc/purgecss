{
  "version": 3,
  "sources": ["../../src/postcss/css-syntax-error.js", "../../src/postcss/stringifier.js", "../../src/postcss/stringify.js", "../../src/postcss/symbols.js", "../../src/postcss/node.js", "../../src/postcss/comment.js", "../../src/postcss/declaration.js", "../../src/postcss/container.js", "../../src/postcss/root.js"],
  "sourcesContent": ["\nexport class CssSyntaxError extends Error {\n  constructor(message, line, column, source, file, plugin) {\n    super(message)\n    this.name = 'CssSyntaxError'\n    this.reason = message\n\n    if (file) {\n      this.file = file\n    }\n    if (source) {\n      this.source = source\n    }\n    if (plugin) {\n      this.plugin = plugin\n    }\n    if (typeof line !== 'undefined' && typeof column !== 'undefined') {\n      if (typeof line === 'number') {\n        this.line = line\n        this.column = column\n      } else {\n        this.line = line.line\n        this.column = line.column\n        this.endLine = column.line\n        this.endColumn = column.column\n      }\n    }\n\n    this.setMessage()\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CssSyntaxError)\n    }\n  }\n\n  setMessage() {\n    this.message = this.plugin ? this.plugin + ': ' : ''\n    this.message += this.file ? this.file : '<css input>'\n    if (typeof this.line !== 'undefined') {\n      this.message += ':' + this.line + ':' + this.column\n    }\n    this.message += ': ' + this.reason\n  }\n\n  showSourceCode() {\n      return '';\n  }\n\n  toString() {\n    let code = this.showSourceCode()\n    if (code) {\n      code = '\\n\\n' + code + '\\n'\n    }\n    return this.name + ': ' + this.message + code\n  }\n}\n", "const DEFAULT_RAW = {\n  after: '\\n',\n  beforeClose: '\\n',\n  beforeComment: '\\n',\n  beforeDecl: '\\n',\n  beforeOpen: ' ',\n  beforeRule: '\\n',\n  colon: ': ',\n  commentLeft: ' ',\n  commentRight: ' ',\n  emptyBody: '',\n  indent: '    ',\n  semicolon: false\n}\n\nfunction capitalize(str) {\n  return str[0].toUpperCase() + str.slice(1)\n}\n\nexport class Stringifier {\n  constructor(builder) {\n    this.builder = builder\n  }\n\n  atrule(node, semicolon) {\n    let name = '@' + node.name\n    const params = node.params ? this.rawValue(node, 'params') : ''\n\n    if (typeof node.raws.afterName !== 'undefined') {\n      name += node.raws.afterName\n    } else if (params) {\n      name += ' '\n    }\n\n    if (node.nodes) {\n      this.block(node, name + params)\n    } else {\n      const end = (node.raws.between || '') + (semicolon ? ';' : '')\n      this.builder(name + params + end, node)\n    }\n  }\n\n  beforeAfter(node, detect) {\n    let value\n    if (node.type === 'decl') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (node.type === 'comment') {\n      value = this.raw(node, null, 'beforeComment')\n    } else if (detect === 'before') {\n      value = this.raw(node, null, 'beforeRule')\n    } else {\n      value = this.raw(node, null, 'beforeClose')\n    }\n\n    let buf = node.parent\n    let depth = 0\n    while (buf && buf.type !== 'root') {\n      depth += 1\n      buf = buf.parent\n    }\n\n    if (value.includes('\\n')) {\n      const indent = this.raw(node, null, 'indent')\n      if (indent.length) {\n        for (let step = 0; step < depth; step++) value += indent\n      }\n    }\n\n    return value\n  }\n\n  block(node, start) {\n    const between = this.raw(node, 'between', 'beforeOpen')\n    this.builder(start + between + '{', node, 'start')\n\n    let after\n    if (node.nodes && node.nodes.length) {\n      this.body(node)\n      after = this.raw(node, 'after')\n    } else {\n      after = this.raw(node, 'after', 'emptyBody')\n    }\n\n    if (after) this.builder(after)\n    this.builder('}', node, 'end')\n  }\n\n  body(node) {\n    let last = node.nodes.length - 1\n    while (last > 0) {\n      if (node.nodes[last].type !== 'comment') break\n      last -= 1\n    }\n\n    const semicolon = this.raw(node, 'semicolon')\n    for (let i = 0; i < node.nodes.length; i++) {\n      const child = node.nodes[i]\n      const before = this.raw(child, 'before')\n      if (before) this.builder(before)\n      this.stringify(child, last !== i || semicolon)\n    }\n  }\n\n  comment(node) {\n    const left = this.raw(node, 'left', 'commentLeft')\n    const right = this.raw(node, 'right', 'commentRight')\n    this.builder('/*' + left + node.text + right + '*/', node)\n  }\n\n  decl(node, semicolon) {\n    const between = this.raw(node, 'between', 'colon')\n    let string = node.prop + between + this.rawValue(node, 'value')\n\n    if (node.important) {\n      string += node.raws.important || ' !important'\n    }\n\n    if (semicolon) string += ';'\n    this.builder(string, node)\n  }\n\n  document(node) {\n    this.body(node)\n  }\n\n  raw(node, own, detect) {\n    let value\n    if (!detect) detect = own\n\n    // Already had\n    if (own) {\n      value = node.raws[own]\n      if (typeof value !== 'undefined') return value\n    }\n\n    const parent = node.parent\n\n    if (detect === 'before') {\n      // Hack for first rule in CSS\n      if (!parent || (parent.type === 'root' && parent.first === node)) {\n        return ''\n      }\n\n      // `root` nodes in `document` should use only their own raws\n      if (parent && parent.type === 'document') {\n        return ''\n      }\n    }\n\n    // Floating child without parent\n    if (!parent) return DEFAULT_RAW[detect]\n\n    // Detect style by other nodes\n    const root = node.root()\n    if (!root.rawCache) root.rawCache = {}\n    if (typeof root.rawCache[detect] !== 'undefined') {\n      return root.rawCache[detect]\n    }\n\n    if (detect === 'before' || detect === 'after') {\n      return this.beforeAfter(node, detect)\n    } else {\n      const method = 'raw' + capitalize(detect)\n      if (this[method]) {\n        value = this[method](root, node)\n      } else {\n        root.walk(i => {\n          value = i.raws[own]\n          if (typeof value !== 'undefined') return false\n        })\n      }\n    }\n\n    if (typeof value === 'undefined') value = DEFAULT_RAW[detect]\n\n    root.rawCache[detect] = value\n    return value\n  }\n\n  rawBeforeClose(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length > 0) {\n        if (typeof i.raws.after !== 'undefined') {\n          value = i.raws.after\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeComment(root, node) {\n    let value\n    root.walkComments(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeDecl(root, node) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeRule')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeOpen(root) {\n    let value\n    root.walk(i => {\n      if (i.type !== 'decl') {\n        value = i.raws.between\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawBeforeRule(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && (i.parent !== root || root.first !== i)) {\n        if (typeof i.raws.before !== 'undefined') {\n          value = i.raws.before\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawColon(root) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.between !== 'undefined') {\n        value = i.raws.between.replace(/[^\\s:]/g, '')\n        return false\n      }\n    })\n    return value\n  }\n\n  rawEmptyBody(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length === 0) {\n        value = i.raws.after\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawIndent(root) {\n    if (root.raws.indent) return root.raws.indent\n    let value\n    root.walk(i => {\n      const p = i.parent\n      if (p && p !== root && p.parent && p.parent === root) {\n        if (typeof i.raws.before !== 'undefined') {\n          const parts = i.raws.before.split('\\n')\n          value = parts[parts.length - 1]\n          value = value.replace(/\\S/g, '')\n          return false\n        }\n      }\n    })\n    return value\n  }\n\n  rawSemicolon(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length && i.last.type === 'decl') {\n        value = i.raws.semicolon\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawValue(node, prop) {\n    const value = node[prop]\n    const raw = node.raws[prop]\n    if (raw && raw.value === value) {\n      return raw.raw\n    }\n\n    return value\n  }\n\n  root(node) {\n    this.body(node)\n    if (node.raws.after) this.builder(node.raws.after)\n  }\n\n  rule(node) {\n    this.block(node, this.rawValue(node, 'selector'))\n    if (node.raws.ownSemicolon) {\n      this.builder(node.raws.ownSemicolon, node, 'end')\n    }\n  }\n\n  stringify(node, semicolon) {\n    /* c8 ignore start */\n    if (!this[node.type]) {\n      throw new Error(\n        'Unknown AST node type ' +\n          node.type +\n          '. ' +\n          'Maybe you need to change PostCSS stringifier.'\n      )\n    }\n    /* c8 ignore stop */\n    this[node.type](node, semicolon)\n  }\n}", "\n\nimport { Stringifier } from \"./stringifier\";\n\nexport function stringify(node, builder) {\n  const str = new Stringifier(builder)\n  str.stringify(node)\n}", "\n\nexport const isClean = Symbol('isClean')\n\nexport const my = Symbol('my')\n", "import { CssSyntaxError } from \"./css-syntax-error\";\nimport { Stringifier } from \"./stringifier\";\nimport { stringify } from \"./stringify\";\nimport { isClean, my } from \"./symbols\";\n\nfunction cloneNode(obj, parent) {\n  const cloned = new obj.constructor()\n\n  for (const i in obj) {\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) {\n      /* c8 ignore next 2 */\n      continue\n    }\n    if (i === 'proxyCache') continue\n    let value = obj[i]\n    const type = typeof value\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent\n    } else if (i === 'source') {\n      cloned[i] = value\n    } else if (Array.isArray(value)) {\n      cloned[i] = value.map(j => cloneNode(j, cloned))\n    } else {\n      if (type === 'object' && value !== null) value = cloneNode(value)\n      cloned[i] = value\n    }\n  }\n\n  return cloned\n}\n\nfunction sourceOffset(inputCSS, position) {\n  // Not all custom syntaxes support `offset` in `source.start` and `source.end`\n  if (\n    position &&\n    typeof position.offset !== 'undefined'\n  ) {\n    return position.offset;\n  }\n\n  let column = 1\n  let line = 1\n  let offset = 0\n\n  for (let i = 0; i < inputCSS.length; i++) {\n    if (line === position.line && column === position.column) {\n      offset = i\n      break\n    }\n\n    if (inputCSS[i] === '\\n') {\n      column = 1\n      line += 1\n    } else {\n      column += 1\n    }\n  }\n\n  return offset\n}\n\nexport class Node {\n  constructor(defaults = {}) {\n    this.raws = {}\n    this[isClean] = false\n    this[my] = true\n\n    for (const name in defaults) {\n      if (name === 'nodes') {\n        this.nodes = []\n        for (const node of defaults[name]) {\n          if (typeof node.clone === 'function') {\n            this.append(node.clone())\n          } else {\n            this.append(node)\n          }\n        }\n      } else {\n        this[name] = defaults[name]\n      }\n    }\n  }\n\n  addToError(error) {\n    error.postcssNode = this\n    if (error.stack && this.source && /\\n\\s{4}at /.test(error.stack)) {\n      const s = this.source\n      error.stack = error.stack.replace(\n        /\\n\\s{4}at /,\n        `$&${s.input.from}:${s.start.line}:${s.start.column}$&`\n      )\n    }\n    return error\n  }\n\n  after(add) {\n    this.parent.insertAfter(this, add)\n    return this\n  }\n\n  assign(overrides = {}) {\n    for (const name in overrides) {\n      this[name] = overrides[name]\n    }\n    return this\n  }\n\n  before(add) {\n    this.parent.insertBefore(this, add)\n    return this\n  }\n\n  cleanRaws(keepBetween) {\n    delete this.raws.before\n    delete this.raws.after\n    if (!keepBetween) delete this.raws.between\n  }\n\n  clone(overrides = {}) {\n    const cloned = cloneNode(this)\n    for (const name in overrides) {\n      cloned[name] = overrides[name]\n    }\n    return cloned\n  }\n\n  cloneAfter(overrides = {}) {\n    const cloned = this.clone(overrides)\n    this.parent.insertAfter(this, cloned)\n    return cloned\n  }\n\n  cloneBefore(overrides = {}) {\n    const cloned = this.clone(overrides)\n    this.parent.insertBefore(this, cloned)\n    return cloned\n  }\n\n  error(message, opts = {}) {\n    if (this.source) {\n      const { end, start } = this.rangeBy(opts)\n      return this.source.input.error(\n        message,\n        { column: start.column, line: start.line },\n        { column: end.column, line: end.line },\n        opts\n      )\n    }\n    return new CssSyntaxError(message)\n  }\n\n  getProxyProcessor() {\n    return {\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else {\n          return node[prop]\n        }\n      },\n\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (\n          prop === 'prop' ||\n          prop === 'value' ||\n          prop === 'name' ||\n          prop === 'params' ||\n          prop === 'important' ||\n          /* c8 ignore next */\n          prop === 'text'\n        ) {\n          node.markDirty()\n        }\n        return true\n      }\n    }\n  }\n\n  /* c8 ignore next 3 */\n  markClean() {\n    this[isClean] = true\n  }\n\n  markDirty() {\n    if (this[isClean]) {\n      this[isClean] = false\n      let next = this\n      while ((next = next.parent)) {\n        next[isClean] = false\n      }\n    }\n  }\n\n  next() {\n    if (!this.parent) return undefined\n    const index = this.parent.index(this)\n    return this.parent.nodes[index + 1]\n  }\n\n  positionBy(opts) {\n    let pos = this.source.start\n    if (opts.index) {\n      pos = this.positionInside(opts.index)\n    } else if (opts.word) {\n      const stringRepresentation = this.source.input.css.slice(\n        sourceOffset(this.source.input.css, this.source.start),\n        sourceOffset(this.source.input.css, this.source.end)\n      )\n      const index = stringRepresentation.indexOf(opts.word)\n      if (index !== -1) pos = this.positionInside(index)\n    }\n    return pos\n  }\n\n  positionInside(index) {\n    let column = this.source.start.column\n    let line = this.source.start.line\n    const offset = sourceOffset(this.source.input.css, this.source.start)\n    const end = offset + index\n\n    for (let i = offset; i < end; i++) {\n      if (this.source.input.css[i] === '\\n') {\n        column = 1\n        line += 1\n      } else {\n        column += 1\n      }\n    }\n\n    return { column, line }\n  }\n\n  prev() {\n    if (!this.parent) return undefined\n    const index = this.parent.index(this)\n    return this.parent.nodes[index - 1]\n  }\n\n  rangeBy(opts) {\n    let start = {\n      column: this.source.start.column,\n      line: this.source.start.line\n    }\n    let end = this.source.end\n      ? {\n          column: this.source.end.column + 1,\n          line: this.source.end.line\n        }\n      : {\n          column: start.column + 1,\n          line: start.line\n        }\n\n    if (opts.word) {\n      const stringRepresentation = this.source.input.css.slice(\n        sourceOffset(this.source.input.css, this.source.start),\n        sourceOffset(this.source.input.css, this.source.end)\n      )\n      const index = stringRepresentation.indexOf(opts.word)\n      if (index !== -1) {\n        start = this.positionInside(index)\n        end = this.positionInside(\n          index + opts.word.length,\n        )\n      }\n    } else {\n      if (opts.start) {\n        start = {\n          column: opts.start.column,\n          line: opts.start.line\n        }\n      } else if (opts.index) {\n        start = this.positionInside(opts.index)\n      }\n\n      if (opts.end) {\n        end = {\n          column: opts.end.column,\n          line: opts.end.line\n        }\n      } else if (typeof opts.endIndex === 'number') {\n        end = this.positionInside(opts.endIndex)\n      } else if (opts.index) {\n        end = this.positionInside(opts.index + 1)\n      }\n    }\n\n    if (\n      end.line < start.line ||\n      (end.line === start.line && end.column <= start.column)\n    ) {\n      end = { column: start.column + 1, line: start.line }\n    }\n\n    return { end, start }\n  }\n\n  raw(prop, defaultType) {\n    const str = new Stringifier()\n    return str.raw(this, prop, defaultType)\n  }\n\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this)\n    }\n    this.parent = undefined\n    return this\n  }\n\n  replaceWith(...nodes) {\n    if (this.parent) {\n      let bookmark = this\n      let foundSelf = false\n      for (const node of nodes) {\n        if (node === this) {\n          foundSelf = true\n        } else if (foundSelf) {\n          this.parent.insertAfter(bookmark, node)\n          bookmark = node\n        } else {\n          this.parent.insertBefore(bookmark, node)\n        }\n      }\n\n      if (!foundSelf) {\n        this.remove()\n      }\n    }\n\n    return this\n  }\n\n  root() {\n    let result = this\n    while (result.parent && result.parent.type !== 'document') {\n      result = result.parent\n    }\n    return result\n  }\n\n  toJSON(_, inputs) {\n    const fixed = {}\n    const emitInputs = inputs == null\n    inputs = inputs || new Map()\n    let inputsNextIndex = 0\n\n    for (const name in this) {\n      if (!Object.prototype.hasOwnProperty.call(this, name)) {\n        /* c8 ignore next 2 */\n        continue\n      }\n      if (name === 'parent' || name === 'proxyCache') continue\n      const value = this[name]\n\n      if (Array.isArray(value)) {\n        fixed[name] = value.map(i => {\n          if (typeof i === 'object' && i.toJSON) {\n            return i.toJSON(null, inputs)\n          } else {\n            return i\n          }\n        })\n      } else if (typeof value === 'object' && value.toJSON) {\n        fixed[name] = value.toJSON(null, inputs)\n      } else if (name === 'source') {\n        let inputId = inputs.get(value.input)\n        if (inputId == null) {\n          inputId = inputsNextIndex\n          inputs.set(value.input, inputsNextIndex)\n          inputsNextIndex++\n        }\n        fixed[name] = {\n          end: value.end,\n          inputId,\n          start: value.start\n        }\n      } else {\n        fixed[name] = value\n      }\n    }\n\n    if (emitInputs) {\n      fixed.inputs = [...inputs.keys()].map(input => input.toJSON())\n    }\n\n    return fixed\n  }\n\n  toProxy() {\n    if (!this.proxyCache) {\n      this.proxyCache = new Proxy(this, this.getProxyProcessor())\n    }\n    return this.proxyCache\n  }\n\n  toString(stringifier = stringify) {\n    if (stringifier.stringify) stringifier = stringifier.stringify\n    let result = ''\n    stringifier(this, i => {\n      result += i\n    })\n    return result\n  }\n\n  warn(result, text, opts) {\n    const data = { node: this }\n    for (const i in opts) data[i] = opts[i]\n    return result.warn(text, data)\n  }\n\n  get proxyOf() {\n    return this\n  }\n}", "import { Node } from './node';\n\nexport class Comment extends Node {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'comment'\n  }\n}", "import { Node } from \"./node.js\";\n\nexport class Declaration extends Node {\n  constructor(defaults) {\n    if (\n      defaults &&\n      typeof defaults.value !== 'undefined' &&\n      typeof defaults.value !== 'string'\n    ) {\n      defaults = { ...defaults, value: String(defaults.value) }\n    }\n    super(defaults)\n    this.type = 'decl'\n  }\n\n  get variable() {\n    return this.prop.startsWith('--') || this.prop[0] === '$'\n  }\n}\n", "\n\nimport { Comment } from './comment';\nimport { Declaration } from './declaration';\nimport { isClean, my } from \"./symbols\";\nimport { Node } from \"./node\";\n\nlet AtRule, parse, Root, Rule\n\nfunction cleanSource(nodes) {\n  return nodes.map(i => {\n    if (i.nodes) i.nodes = cleanSource(i.nodes)\n    delete i.source\n    return i\n  })\n}\n\nfunction markTreeDirty(node) {\n  node[isClean] = false\n  if (node.proxyOf.nodes) {\n    for (const i of node.proxyOf.nodes) {\n      markTreeDirty(i)\n    }\n  }\n}\n\nexport class Container extends Node {\n  append(...children) {\n    for (const child of children) {\n      const nodes = this.normalize(child, this.last)\n      for (const node of nodes) this.proxyOf.nodes.push(node)\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  cleanRaws(keepBetween) {\n    super.cleanRaws(keepBetween)\n    if (this.nodes) {\n      for (const node of this.nodes) node.cleanRaws(keepBetween)\n    }\n  }\n\n  each(callback) {\n    if (!this.proxyOf.nodes) return undefined\n    const iterator = this.getIterator()\n\n    let index, result\n    while (this.indexes[iterator] < this.proxyOf.nodes.length) {\n      index = this.indexes[iterator]\n      result = callback(this.proxyOf.nodes[index], index)\n      if (result === false) break\n\n      this.indexes[iterator] += 1\n    }\n\n    delete this.indexes[iterator]\n    return result\n  }\n\n  every(condition) {\n    return this.nodes.every(condition)\n  }\n\n  getIterator() {\n    if (!this.lastEach) this.lastEach = 0\n    if (!this.indexes) this.indexes = {}\n\n    this.lastEach += 1\n    const iterator = this.lastEach\n    this.indexes[iterator] = 0\n\n    return iterator\n  }\n\n  getProxyProcessor() {\n    return {\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (!node[prop]) {\n          return node[prop]\n        } else if (\n          prop === 'each' ||\n          (typeof prop === 'string' && prop.startsWith('walk'))\n        ) {\n          return (...args) => {\n            return node[prop](\n              ...args.map(i => {\n                if (typeof i === 'function') {\n                  return (child, index) => i(child.toProxy(), index)\n                } else {\n                  return i\n                }\n              })\n            )\n          }\n        } else if (prop === 'every' || prop === 'some') {\n          return cb => {\n            return node[prop]((child, ...other) =>\n              cb(child.toProxy(), ...other)\n            )\n          }\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else if (prop === 'nodes') {\n          return node.nodes.map(i => i.toProxy())\n        } else if (prop === 'first' || prop === 'last') {\n          return node[prop].toProxy()\n        } else {\n          return node[prop]\n        }\n      },\n\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (prop === 'name' || prop === 'params' || prop === 'selector') {\n          node.markDirty()\n        }\n        return true\n      }\n    }\n  }\n\n  index(child) {\n    if (typeof child === 'number') return child\n    if (child.proxyOf) child = child.proxyOf\n    return this.proxyOf.nodes.indexOf(child)\n  }\n\n  insertAfter(exist, add) {\n    let existIndex = this.index(exist)\n    const nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse()\n    existIndex = this.index(exist)\n    for (const node of nodes) this.proxyOf.nodes.splice(existIndex + 1, 0, node)\n\n    let index\n    for (const id in this.indexes) {\n      index = this.indexes[id]\n      if (existIndex < index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  insertBefore(exist, add) {\n    let existIndex = this.index(exist)\n    const type = existIndex === 0 ? 'prepend' : false\n    const nodes = this.normalize(\n      add,\n      this.proxyOf.nodes[existIndex],\n      type\n    ).reverse()\n    existIndex = this.index(exist)\n    for (const node of nodes) this.proxyOf.nodes.splice(existIndex, 0, node)\n\n    let index\n    for (const id in this.indexes) {\n      index = this.indexes[id]\n      if (existIndex <= index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  normalize(nodes, sample) {\n    if (typeof nodes === 'string') {\n      nodes = cleanSource(parse(nodes).nodes)\n    } else if (typeof nodes === 'undefined') {\n      nodes = []\n    } else if (Array.isArray(nodes)) {\n      nodes = nodes.slice(0)\n      for (const i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type === 'root' && this.type !== 'document') {\n      nodes = nodes.nodes.slice(0)\n      for (const i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type) {\n      nodes = [nodes]\n    } else if (nodes.prop) {\n      if (typeof nodes.value === 'undefined') {\n        throw new Error('Value field is missed in node creation')\n      } else if (typeof nodes.value !== 'string') {\n        nodes.value = String(nodes.value)\n      }\n      nodes = [new Declaration(nodes)]\n    } else if (nodes.selector || nodes.selectors) {\n      nodes = [new Rule(nodes)]\n    } else if (nodes.name) {\n      nodes = [new AtRule(nodes)]\n    } else if (nodes.text) {\n      nodes = [new Comment(nodes)]\n    } else {\n      throw new Error('Unknown node type in node creation')\n    }\n\n    const processed = nodes.map(i => {\n      /* c8 ignore next */\n      if (!i[my]) Container.rebuild(i)\n      i = i.proxyOf\n      if (i.parent) i.parent.removeChild(i)\n      if (i[isClean]) markTreeDirty(i)\n\n      if (!i.raws) i.raws = {}\n      if (typeof i.raws.before === 'undefined') {\n        if (sample && typeof sample.raws.before !== 'undefined') {\n          i.raws.before = sample.raws.before.replace(/\\S/g, '')\n        }\n      }\n      i.parent = this.proxyOf\n      return i\n    })\n\n    return processed\n  }\n\n  prepend(...children) {\n    children = children.reverse()\n    for (const child of children) {\n      const nodes = this.normalize(child, this.first, 'prepend').reverse()\n      for (const node of nodes) this.proxyOf.nodes.unshift(node)\n      for (const id in this.indexes) {\n        this.indexes[id] = this.indexes[id] + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  push(child) {\n    child.parent = this\n    this.proxyOf.nodes.push(child)\n    return this\n  }\n\n  removeAll() {\n    for (const node of this.proxyOf.nodes) node.parent = undefined\n    this.proxyOf.nodes = []\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeChild(child) {\n    child = this.index(child)\n    this.proxyOf.nodes[child].parent = undefined\n    this.proxyOf.nodes.splice(child, 1)\n\n    let index\n    for (const id in this.indexes) {\n      index = this.indexes[id]\n      if (index >= child) {\n        this.indexes[id] = index - 1\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  replaceValues(pattern, opts, callback) {\n    if (!callback) {\n      callback = opts\n      opts = {}\n    }\n\n    this.walkDecls(decl => {\n      if (opts.props && !opts.props.includes(decl.prop)) return\n      if (opts.fast && !decl.value.includes(opts.fast)) return\n\n      decl.value = decl.value.replace(pattern, callback)\n    })\n\n    this.markDirty()\n\n    return this\n  }\n\n  some(condition) {\n    return this.nodes.some(condition)\n  }\n\n  walk(callback) {\n    return this.each((child, i) => {\n      let result\n      try {\n        result = callback(child, i)\n      } catch (e) {\n        throw child.addToError(e)\n      }\n      if (result !== false && child.walk) {\n        result = child.walk(callback)\n      }\n\n      return result\n    })\n  }\n\n  walkAtRules(name, callback) {\n    if (!callback) {\n      callback = name\n      return this.walk((child, i) => {\n        if (child.type === 'atrule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (name instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'atrule' && name.test(child.name)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'atrule' && child.name === name) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkComments(callback) {\n    return this.walk((child, i) => {\n      if (child.type === 'comment') {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkDecls(prop, callback) {\n    if (!callback) {\n      callback = prop\n      return this.walk((child, i) => {\n        if (child.type === 'decl') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (prop instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'decl' && prop.test(child.prop)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'decl' && child.prop === prop) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkRules(selector, callback) {\n    if (!callback) {\n      callback = selector\n\n      return this.walk((child, i) => {\n        if (child.type === 'rule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (selector instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'rule' && selector.test(child.selector)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'rule' && child.selector === selector) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  get first() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[0]\n  }\n\n  get last() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1]\n  }\n}\n\nContainer.registerParse = dependant => {\n  parse = dependant\n}\n\nContainer.registerRule = dependant => {\n  Rule = dependant\n}\n\nContainer.registerAtRule = dependant => {\n  AtRule = dependant\n}\n\nContainer.registerRoot = dependant => {\n  Root = dependant\n}\n\n\n/* c8 ignore start */\nContainer.rebuild = node => {\n  if (node.type === 'atrule') {\n    Object.setPrototypeOf(node, AtRule.prototype)\n  } else if (node.type === 'rule') {\n    Object.setPrototypeOf(node, Rule.prototype)\n  } else if (node.type === 'decl') {\n    Object.setPrototypeOf(node, Declaration.prototype)\n  } else if (node.type === 'comment') {\n    Object.setPrototypeOf(node, Comment.prototype)\n  } else if (node.type === 'root') {\n    Object.setPrototypeOf(node, Root.prototype)\n  }\n\n  node[my] = true\n\n  if (node.nodes) {\n    node.nodes.forEach(child => {\n      Container.rebuild(child)\n    })\n  }\n}\n/* c8 ignore stop */\n", "\n\nimport { Container } from \"./container\";\n\nlet LazyResult, Processor\n\nexport class Root extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'root'\n    if (!this.nodes) this.nodes = []\n  }\n\n  normalize(child, sample, type) {\n    const nodes = super.normalize(child)\n\n    if (sample) {\n      if (type === 'prepend') {\n        if (this.nodes.length > 1) {\n          sample.raws.before = this.nodes[1].raws.before\n        } else {\n          delete sample.raws.before\n        }\n      } else if (this.first !== sample) {\n        for (const node of nodes) {\n          node.raws.before = sample.raws.before\n        }\n      }\n    }\n\n    return nodes\n  }\n\n  removeChild(child, ignore) {\n    const index = this.index(child)\n\n    if (!ignore && index === 0 && this.nodes.length > 1) {\n      this.nodes[1].raws.before = this.nodes[index].raws.before\n    }\n\n    return super.removeChild(child)\n  }\n\n  toResult(opts = {}) {\n    const lazy = new LazyResult(new Processor(), this, opts)\n    return lazy.stringify()\n  }\n\n  static registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nstatic registerProcessor = dependant => {\n  Processor = dependant\n}\n}\n\nContainer.registerRoot(Root)\n"],
  "mappings": "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",
  "names": ["Root"]
}
