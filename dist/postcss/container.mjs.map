{
  "version": 3,
  "sources": ["../../src/postcss/css-syntax-error.js", "../../src/postcss/stringifier.js", "../../src/postcss/stringify.js", "../../src/postcss/symbols.js", "../../src/postcss/node.js", "../../src/postcss/comment.js", "../../src/postcss/declaration.js", "../../src/postcss/container.js"],
  "sourcesContent": ["export class CssSyntaxError extends Error {\r\n    constructor(message, line, column, source, file, plugin) {\r\n        super(message);\r\n        this.name = 'CssSyntaxError';\r\n        this.reason = message;\r\n        if (file) {\r\n            this.file = file;\r\n        }\r\n        if (source) {\r\n            this.source = source;\r\n        }\r\n        if (plugin) {\r\n            this.plugin = plugin;\r\n        }\r\n        if (typeof line !== 'undefined' && typeof column !== 'undefined') {\r\n            if (typeof line === 'number') {\r\n                this.line = line;\r\n                this.column = column;\r\n            }\r\n            else {\r\n                this.line = line.line;\r\n                this.column = line.column;\r\n                this.endLine = column.line;\r\n                this.endColumn = column.column;\r\n            }\r\n        }\r\n        this.setMessage();\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, CssSyntaxError);\r\n        }\r\n    }\r\n    setMessage() {\r\n        this.message = this.plugin ? this.plugin + ': ' : '';\r\n        this.message += this.file ? this.file : '<css input>';\r\n        if (typeof this.line !== 'undefined') {\r\n            this.message += ':' + this.line + ':' + this.column;\r\n        }\r\n        this.message += ': ' + this.reason;\r\n    }\r\n    showSourceCode() {\r\n        return '';\r\n    }\r\n    toString() {\r\n        let code = this.showSourceCode();\r\n        if (code) {\r\n            code = '\\n\\n' + code + '\\n';\r\n        }\r\n        return this.name + ': ' + this.message + code;\r\n    }\r\n}\r\n", "const DEFAULT_RAW = {\r\n    after: '\\n',\r\n    beforeClose: '\\n',\r\n    beforeComment: '\\n',\r\n    beforeDecl: '\\n',\r\n    beforeOpen: ' ',\r\n    beforeRule: '\\n',\r\n    colon: ': ',\r\n    commentLeft: ' ',\r\n    commentRight: ' ',\r\n    emptyBody: '',\r\n    indent: '    ',\r\n    semicolon: false\r\n};\r\nfunction capitalize(str) {\r\n    return str[0].toUpperCase() + str.slice(1);\r\n}\r\nexport class Stringifier {\r\n    constructor(builder) {\r\n        this.builder = builder;\r\n    }\r\n    atrule(node, semicolon) {\r\n        let name = '@' + node.name;\r\n        const params = node.params ? this.rawValue(node, 'params') : '';\r\n        if (typeof node.raws.afterName !== 'undefined') {\r\n            name += node.raws.afterName;\r\n        }\r\n        else if (params) {\r\n            name += ' ';\r\n        }\r\n        if (node.nodes) {\r\n            this.block(node, name + params);\r\n        }\r\n        else {\r\n            const end = (node.raws.between || '') + (semicolon ? ';' : '');\r\n            this.builder(name + params + end, node);\r\n        }\r\n    }\r\n    beforeAfter(node, detect) {\r\n        let value;\r\n        if (node.type === 'decl') {\r\n            value = this.raw(node, null, 'beforeDecl');\r\n        }\r\n        else if (node.type === 'comment') {\r\n            value = this.raw(node, null, 'beforeComment');\r\n        }\r\n        else if (detect === 'before') {\r\n            value = this.raw(node, null, 'beforeRule');\r\n        }\r\n        else {\r\n            value = this.raw(node, null, 'beforeClose');\r\n        }\r\n        let buf = node.parent;\r\n        let depth = 0;\r\n        while (buf && buf.type !== 'root') {\r\n            depth += 1;\r\n            buf = buf.parent;\r\n        }\r\n        if (value.includes('\\n')) {\r\n            const indent = this.raw(node, null, 'indent');\r\n            if (indent.length) {\r\n                for (let step = 0; step < depth; step++)\r\n                    value += indent;\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n    block(node, start) {\r\n        const between = this.raw(node, 'between', 'beforeOpen');\r\n        this.builder(start + between + '{', node, 'start');\r\n        let after;\r\n        if (node.nodes && node.nodes.length) {\r\n            this.body(node);\r\n            after = this.raw(node, 'after');\r\n        }\r\n        else {\r\n            after = this.raw(node, 'after', 'emptyBody');\r\n        }\r\n        if (after)\r\n            this.builder(after);\r\n        this.builder('}', node, 'end');\r\n    }\r\n    body(node) {\r\n        let last = node.nodes.length - 1;\r\n        while (last > 0) {\r\n            if (node.nodes[last].type !== 'comment')\r\n                break;\r\n            last -= 1;\r\n        }\r\n        const semicolon = this.raw(node, 'semicolon');\r\n        for (let i = 0; i < node.nodes.length; i++) {\r\n            const child = node.nodes[i];\r\n            const before = this.raw(child, 'before');\r\n            if (before)\r\n                this.builder(before);\r\n            this.stringify(child, last !== i || semicolon);\r\n        }\r\n    }\r\n    comment(node) {\r\n        const left = this.raw(node, 'left', 'commentLeft');\r\n        const right = this.raw(node, 'right', 'commentRight');\r\n        this.builder('/*' + left + node.text + right + '*/', node);\r\n    }\r\n    decl(node, semicolon) {\r\n        const between = this.raw(node, 'between', 'colon');\r\n        let string = node.prop + between + this.rawValue(node, 'value');\r\n        if (node.important) {\r\n            string += node.raws.important || ' !important';\r\n        }\r\n        if (semicolon)\r\n            string += ';';\r\n        this.builder(string, node);\r\n    }\r\n    document(node) {\r\n        this.body(node);\r\n    }\r\n    raw(node, own, detect) {\r\n        let value;\r\n        if (!detect)\r\n            detect = own;\r\n        // Already had\r\n        if (own) {\r\n            value = node.raws[own];\r\n            if (typeof value !== 'undefined')\r\n                return value;\r\n        }\r\n        const parent = node.parent;\r\n        if (detect === 'before') {\r\n            // Hack for first rule in CSS\r\n            if (!parent || (parent.type === 'root' && parent.first === node)) {\r\n                return '';\r\n            }\r\n            // `root` nodes in `document` should use only their own raws\r\n            if (parent && parent.type === 'document') {\r\n                return '';\r\n            }\r\n        }\r\n        // Floating child without parent\r\n        if (!parent)\r\n            return DEFAULT_RAW[detect];\r\n        // Detect style by other nodes\r\n        const root = node.root();\r\n        if (!root.rawCache)\r\n            root.rawCache = {};\r\n        if (typeof root.rawCache[detect] !== 'undefined') {\r\n            return root.rawCache[detect];\r\n        }\r\n        if (detect === 'before' || detect === 'after') {\r\n            return this.beforeAfter(node, detect);\r\n        }\r\n        else {\r\n            const method = 'raw' + capitalize(detect);\r\n            if (this[method]) {\r\n                value = this[method](root, node);\r\n            }\r\n            else {\r\n                root.walk(i => {\r\n                    value = i.raws[own];\r\n                    if (typeof value !== 'undefined')\r\n                        return false;\r\n                });\r\n            }\r\n        }\r\n        if (typeof value === 'undefined')\r\n            value = DEFAULT_RAW[detect];\r\n        root.rawCache[detect] = value;\r\n        return value;\r\n    }\r\n    rawBeforeClose(root) {\r\n        let value;\r\n        root.walk(i => {\r\n            if (i.nodes && i.nodes.length > 0) {\r\n                if (typeof i.raws.after !== 'undefined') {\r\n                    value = i.raws.after;\r\n                    if (value.includes('\\n')) {\r\n                        value = value.replace(/[^\\n]+$/, '');\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n        });\r\n        if (value)\r\n            value = value.replace(/\\S/g, '');\r\n        return value;\r\n    }\r\n    rawBeforeComment(root, node) {\r\n        let value;\r\n        root.walkComments(i => {\r\n            if (typeof i.raws.before !== 'undefined') {\r\n                value = i.raws.before;\r\n                if (value.includes('\\n')) {\r\n                    value = value.replace(/[^\\n]+$/, '');\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n        if (typeof value === 'undefined') {\r\n            value = this.raw(node, null, 'beforeDecl');\r\n        }\r\n        else if (value) {\r\n            value = value.replace(/\\S/g, '');\r\n        }\r\n        return value;\r\n    }\r\n    rawBeforeDecl(root, node) {\r\n        let value;\r\n        root.walkDecls(i => {\r\n            if (typeof i.raws.before !== 'undefined') {\r\n                value = i.raws.before;\r\n                if (value.includes('\\n')) {\r\n                    value = value.replace(/[^\\n]+$/, '');\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n        if (typeof value === 'undefined') {\r\n            value = this.raw(node, null, 'beforeRule');\r\n        }\r\n        else if (value) {\r\n            value = value.replace(/\\S/g, '');\r\n        }\r\n        return value;\r\n    }\r\n    rawBeforeOpen(root) {\r\n        let value;\r\n        root.walk(i => {\r\n            if (i.type !== 'decl') {\r\n                value = i.raws.between;\r\n                if (typeof value !== 'undefined')\r\n                    return false;\r\n            }\r\n        });\r\n        return value;\r\n    }\r\n    rawBeforeRule(root) {\r\n        let value;\r\n        root.walk(i => {\r\n            if (i.nodes && (i.parent !== root || root.first !== i)) {\r\n                if (typeof i.raws.before !== 'undefined') {\r\n                    value = i.raws.before;\r\n                    if (value.includes('\\n')) {\r\n                        value = value.replace(/[^\\n]+$/, '');\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n        });\r\n        if (value)\r\n            value = value.replace(/\\S/g, '');\r\n        return value;\r\n    }\r\n    rawColon(root) {\r\n        let value;\r\n        root.walkDecls(i => {\r\n            if (typeof i.raws.between !== 'undefined') {\r\n                value = i.raws.between.replace(/[^\\s:]/g, '');\r\n                return false;\r\n            }\r\n        });\r\n        return value;\r\n    }\r\n    rawEmptyBody(root) {\r\n        let value;\r\n        root.walk(i => {\r\n            if (i.nodes && i.nodes.length === 0) {\r\n                value = i.raws.after;\r\n                if (typeof value !== 'undefined')\r\n                    return false;\r\n            }\r\n        });\r\n        return value;\r\n    }\r\n    rawIndent(root) {\r\n        if (root.raws.indent)\r\n            return root.raws.indent;\r\n        let value;\r\n        root.walk(i => {\r\n            const p = i.parent;\r\n            if (p && p !== root && p.parent && p.parent === root) {\r\n                if (typeof i.raws.before !== 'undefined') {\r\n                    const parts = i.raws.before.split('\\n');\r\n                    value = parts[parts.length - 1];\r\n                    value = value.replace(/\\S/g, '');\r\n                    return false;\r\n                }\r\n            }\r\n        });\r\n        return value;\r\n    }\r\n    rawSemicolon(root) {\r\n        let value;\r\n        root.walk(i => {\r\n            if (i.nodes && i.nodes.length && i.last.type === 'decl') {\r\n                value = i.raws.semicolon;\r\n                if (typeof value !== 'undefined')\r\n                    return false;\r\n            }\r\n        });\r\n        return value;\r\n    }\r\n    rawValue(node, prop) {\r\n        const value = node[prop];\r\n        const raw = node.raws[prop];\r\n        if (raw && raw.value === value) {\r\n            return raw.raw;\r\n        }\r\n        return value;\r\n    }\r\n    root(node) {\r\n        this.body(node);\r\n        if (node.raws.after)\r\n            this.builder(node.raws.after);\r\n    }\r\n    rule(node) {\r\n        this.block(node, this.rawValue(node, 'selector'));\r\n        if (node.raws.ownSemicolon) {\r\n            this.builder(node.raws.ownSemicolon, node, 'end');\r\n        }\r\n    }\r\n    stringify(node, semicolon) {\r\n        /* c8 ignore start */\r\n        if (!this[node.type]) {\r\n            throw new Error('Unknown AST node type ' +\r\n                node.type +\r\n                '. ' +\r\n                'Maybe you need to change PostCSS stringifier.');\r\n        }\r\n        /* c8 ignore stop */\r\n        this[node.type](node, semicolon);\r\n    }\r\n}\r\n", "import { Stringifier } from \"./stringifier\";\r\nexport function stringify(node, builder) {\r\n    const str = new Stringifier(builder);\r\n    str.stringify(node);\r\n}\r\n", "export const isClean = Symbol('isClean');\r\nexport const my = Symbol('my');\r\n", "import { CssSyntaxError } from \"./css-syntax-error\";\r\nimport { Stringifier } from \"./stringifier\";\r\nimport { stringify } from \"./stringify\";\r\nimport { isClean, my } from \"./symbols\";\r\nfunction cloneNode(obj, parent) {\r\n    const cloned = new obj.constructor();\r\n    for (const i in obj) {\r\n        if (!Object.prototype.hasOwnProperty.call(obj, i)) {\r\n            /* c8 ignore next 2 */\r\n            continue;\r\n        }\r\n        if (i === 'proxyCache')\r\n            continue;\r\n        let value = obj[i];\r\n        const type = typeof value;\r\n        if (i === 'parent' && type === 'object') {\r\n            if (parent)\r\n                cloned[i] = parent;\r\n        }\r\n        else if (i === 'source') {\r\n            cloned[i] = value;\r\n        }\r\n        else if (Array.isArray(value)) {\r\n            cloned[i] = value.map(j => cloneNode(j, cloned));\r\n        }\r\n        else {\r\n            if (type === 'object' && value !== null)\r\n                value = cloneNode(value);\r\n            cloned[i] = value;\r\n        }\r\n    }\r\n    return cloned;\r\n}\r\nfunction sourceOffset(inputCSS, position) {\r\n    // Not all custom syntaxes support `offset` in `source.start` and `source.end`\r\n    if (position &&\r\n        typeof position.offset !== 'undefined') {\r\n        return position.offset;\r\n    }\r\n    let column = 1;\r\n    let line = 1;\r\n    let offset = 0;\r\n    for (let i = 0; i < inputCSS.length; i++) {\r\n        if (line === position.line && column === position.column) {\r\n            offset = i;\r\n            break;\r\n        }\r\n        if (inputCSS[i] === '\\n') {\r\n            column = 1;\r\n            line += 1;\r\n        }\r\n        else {\r\n            column += 1;\r\n        }\r\n    }\r\n    return offset;\r\n}\r\nexport class Node {\r\n    constructor(defaults = {}) {\r\n        this.raws = {};\r\n        this[isClean] = false;\r\n        this[my] = true;\r\n        for (const name in defaults) {\r\n            if (name === 'nodes') {\r\n                this.nodes = [];\r\n                for (const node of defaults[name]) {\r\n                    if (typeof node.clone === 'function') {\r\n                        this.append(node.clone());\r\n                    }\r\n                    else {\r\n                        this.append(node);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                this[name] = defaults[name];\r\n            }\r\n        }\r\n    }\r\n    addToError(error) {\r\n        error.postcssNode = this;\r\n        if (error.stack && this.source && /\\n\\s{4}at /.test(error.stack)) {\r\n            const s = this.source;\r\n            error.stack = error.stack.replace(/\\n\\s{4}at /, `$&${s.input.from}:${s.start.line}:${s.start.column}$&`);\r\n        }\r\n        return error;\r\n    }\r\n    after(add) {\r\n        this.parent.insertAfter(this, add);\r\n        return this;\r\n    }\r\n    assign(overrides = {}) {\r\n        for (const name in overrides) {\r\n            this[name] = overrides[name];\r\n        }\r\n        return this;\r\n    }\r\n    before(add) {\r\n        this.parent.insertBefore(this, add);\r\n        return this;\r\n    }\r\n    cleanRaws(keepBetween) {\r\n        delete this.raws.before;\r\n        delete this.raws.after;\r\n        if (!keepBetween)\r\n            delete this.raws.between;\r\n    }\r\n    clone(overrides = {}) {\r\n        const cloned = cloneNode(this);\r\n        for (const name in overrides) {\r\n            cloned[name] = overrides[name];\r\n        }\r\n        return cloned;\r\n    }\r\n    cloneAfter(overrides = {}) {\r\n        const cloned = this.clone(overrides);\r\n        this.parent.insertAfter(this, cloned);\r\n        return cloned;\r\n    }\r\n    cloneBefore(overrides = {}) {\r\n        const cloned = this.clone(overrides);\r\n        this.parent.insertBefore(this, cloned);\r\n        return cloned;\r\n    }\r\n    error(message, opts = {}) {\r\n        if (this.source) {\r\n            const { end, start } = this.rangeBy(opts);\r\n            return this.source.input.error(message, { column: start.column, line: start.line }, { column: end.column, line: end.line }, opts);\r\n        }\r\n        return new CssSyntaxError(message);\r\n    }\r\n    getProxyProcessor() {\r\n        return {\r\n            get(node, prop) {\r\n                if (prop === 'proxyOf') {\r\n                    return node;\r\n                }\r\n                else if (prop === 'root') {\r\n                    return () => node.root().toProxy();\r\n                }\r\n                else {\r\n                    return node[prop];\r\n                }\r\n            },\r\n            set(node, prop, value) {\r\n                if (node[prop] === value)\r\n                    return true;\r\n                node[prop] = value;\r\n                if (prop === 'prop' ||\r\n                    prop === 'value' ||\r\n                    prop === 'name' ||\r\n                    prop === 'params' ||\r\n                    prop === 'important' ||\r\n                    /* c8 ignore next */\r\n                    prop === 'text') {\r\n                    node.markDirty();\r\n                }\r\n                return true;\r\n            }\r\n        };\r\n    }\r\n    /* c8 ignore next 3 */\r\n    markClean() {\r\n        this[isClean] = true;\r\n    }\r\n    markDirty() {\r\n        if (this[isClean]) {\r\n            this[isClean] = false;\r\n            let next = this;\r\n            while ((next = next.parent)) {\r\n                next[isClean] = false;\r\n            }\r\n        }\r\n    }\r\n    next() {\r\n        if (!this.parent)\r\n            return undefined;\r\n        const index = this.parent.index(this);\r\n        return this.parent.nodes[index + 1];\r\n    }\r\n    positionBy(opts) {\r\n        let pos = this.source.start;\r\n        if (opts.index) {\r\n            pos = this.positionInside(opts.index);\r\n        }\r\n        else if (opts.word) {\r\n            const stringRepresentation = this.source.input.css.slice(sourceOffset(this.source.input.css, this.source.start), sourceOffset(this.source.input.css, this.source.end));\r\n            const index = stringRepresentation.indexOf(opts.word);\r\n            if (index !== -1)\r\n                pos = this.positionInside(index);\r\n        }\r\n        return pos;\r\n    }\r\n    positionInside(index) {\r\n        let column = this.source.start.column;\r\n        let line = this.source.start.line;\r\n        const offset = sourceOffset(this.source.input.css, this.source.start);\r\n        const end = offset + index;\r\n        for (let i = offset; i < end; i++) {\r\n            if (this.source.input.css[i] === '\\n') {\r\n                column = 1;\r\n                line += 1;\r\n            }\r\n            else {\r\n                column += 1;\r\n            }\r\n        }\r\n        return { column, line };\r\n    }\r\n    prev() {\r\n        if (!this.parent)\r\n            return undefined;\r\n        const index = this.parent.index(this);\r\n        return this.parent.nodes[index - 1];\r\n    }\r\n    rangeBy(opts) {\r\n        let start = {\r\n            column: this.source.start.column,\r\n            line: this.source.start.line\r\n        };\r\n        let end = this.source.end\r\n            ? {\r\n                column: this.source.end.column + 1,\r\n                line: this.source.end.line\r\n            }\r\n            : {\r\n                column: start.column + 1,\r\n                line: start.line\r\n            };\r\n        if (opts.word) {\r\n            const stringRepresentation = this.source.input.css.slice(sourceOffset(this.source.input.css, this.source.start), sourceOffset(this.source.input.css, this.source.end));\r\n            const index = stringRepresentation.indexOf(opts.word);\r\n            if (index !== -1) {\r\n                start = this.positionInside(index);\r\n                end = this.positionInside(index + opts.word.length);\r\n            }\r\n        }\r\n        else {\r\n            if (opts.start) {\r\n                start = {\r\n                    column: opts.start.column,\r\n                    line: opts.start.line\r\n                };\r\n            }\r\n            else if (opts.index) {\r\n                start = this.positionInside(opts.index);\r\n            }\r\n            if (opts.end) {\r\n                end = {\r\n                    column: opts.end.column,\r\n                    line: opts.end.line\r\n                };\r\n            }\r\n            else if (typeof opts.endIndex === 'number') {\r\n                end = this.positionInside(opts.endIndex);\r\n            }\r\n            else if (opts.index) {\r\n                end = this.positionInside(opts.index + 1);\r\n            }\r\n        }\r\n        if (end.line < start.line ||\r\n            (end.line === start.line && end.column <= start.column)) {\r\n            end = { column: start.column + 1, line: start.line };\r\n        }\r\n        return { end, start };\r\n    }\r\n    raw(prop, defaultType) {\r\n        const str = new Stringifier();\r\n        return str.raw(this, prop, defaultType);\r\n    }\r\n    remove() {\r\n        if (this.parent) {\r\n            this.parent.removeChild(this);\r\n        }\r\n        this.parent = undefined;\r\n        return this;\r\n    }\r\n    replaceWith(...nodes) {\r\n        if (this.parent) {\r\n            let bookmark = this;\r\n            let foundSelf = false;\r\n            for (const node of nodes) {\r\n                if (node === this) {\r\n                    foundSelf = true;\r\n                }\r\n                else if (foundSelf) {\r\n                    this.parent.insertAfter(bookmark, node);\r\n                    bookmark = node;\r\n                }\r\n                else {\r\n                    this.parent.insertBefore(bookmark, node);\r\n                }\r\n            }\r\n            if (!foundSelf) {\r\n                this.remove();\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    root() {\r\n        let result = this;\r\n        while (result.parent && result.parent.type !== 'document') {\r\n            result = result.parent;\r\n        }\r\n        return result;\r\n    }\r\n    toJSON(_, inputs) {\r\n        const fixed = {};\r\n        const emitInputs = inputs == null;\r\n        inputs = inputs || new Map();\r\n        let inputsNextIndex = 0;\r\n        for (const name in this) {\r\n            if (!Object.prototype.hasOwnProperty.call(this, name)) {\r\n                /* c8 ignore next 2 */\r\n                continue;\r\n            }\r\n            if (name === 'parent' || name === 'proxyCache')\r\n                continue;\r\n            const value = this[name];\r\n            if (Array.isArray(value)) {\r\n                fixed[name] = value.map(i => {\r\n                    if (typeof i === 'object' && i.toJSON) {\r\n                        return i.toJSON(null, inputs);\r\n                    }\r\n                    else {\r\n                        return i;\r\n                    }\r\n                });\r\n            }\r\n            else if (typeof value === 'object' && value.toJSON) {\r\n                fixed[name] = value.toJSON(null, inputs);\r\n            }\r\n            else if (name === 'source') {\r\n                let inputId = inputs.get(value.input);\r\n                if (inputId == null) {\r\n                    inputId = inputsNextIndex;\r\n                    inputs.set(value.input, inputsNextIndex);\r\n                    inputsNextIndex++;\r\n                }\r\n                fixed[name] = {\r\n                    end: value.end,\r\n                    inputId,\r\n                    start: value.start\r\n                };\r\n            }\r\n            else {\r\n                fixed[name] = value;\r\n            }\r\n        }\r\n        if (emitInputs) {\r\n            fixed.inputs = [...inputs.keys()].map(input => input.toJSON());\r\n        }\r\n        return fixed;\r\n    }\r\n    toProxy() {\r\n        if (!this.proxyCache) {\r\n            this.proxyCache = new Proxy(this, this.getProxyProcessor());\r\n        }\r\n        return this.proxyCache;\r\n    }\r\n    toString(stringifier = stringify) {\r\n        if (stringifier.stringify)\r\n            stringifier = stringifier.stringify;\r\n        let result = '';\r\n        stringifier(this, i => {\r\n            result += i;\r\n        });\r\n        return result;\r\n    }\r\n    warn(result, text, opts) {\r\n        const data = { node: this };\r\n        for (const i in opts)\r\n            data[i] = opts[i];\r\n        return result.warn(text, data);\r\n    }\r\n    get proxyOf() {\r\n        return this;\r\n    }\r\n}\r\n", "import { Node } from './node';\r\nexport class Comment extends Node {\r\n    constructor(defaults) {\r\n        super(defaults);\r\n        this.type = 'comment';\r\n    }\r\n}\r\n", "import { Node } from \"./node.js\";\r\nexport class Declaration extends Node {\r\n    constructor(defaults) {\r\n        if (defaults &&\r\n            typeof defaults.value !== 'undefined' &&\r\n            typeof defaults.value !== 'string') {\r\n            defaults = { ...defaults, value: String(defaults.value) };\r\n        }\r\n        super(defaults);\r\n        this.type = 'decl';\r\n    }\r\n    get variable() {\r\n        return this.prop.startsWith('--') || this.prop[0] === '$';\r\n    }\r\n}\r\n", "import { Comment } from './comment';\r\nimport { Declaration } from './declaration';\r\nimport { isClean, my } from \"./symbols\";\r\nimport { Node } from \"./node\";\r\nlet AtRule, parse, Root, Rule;\r\nfunction cleanSource(nodes) {\r\n    return nodes.map(i => {\r\n        if (i.nodes)\r\n            i.nodes = cleanSource(i.nodes);\r\n        delete i.source;\r\n        return i;\r\n    });\r\n}\r\nfunction markTreeDirty(node) {\r\n    node[isClean] = false;\r\n    if (node.proxyOf.nodes) {\r\n        for (const i of node.proxyOf.nodes) {\r\n            markTreeDirty(i);\r\n        }\r\n    }\r\n}\r\nexport class Container extends Node {\r\n    append(...children) {\r\n        for (const child of children) {\r\n            const nodes = this.normalize(child, this.last);\r\n            for (const node of nodes)\r\n                this.proxyOf.nodes.push(node);\r\n        }\r\n        this.markDirty();\r\n        return this;\r\n    }\r\n    cleanRaws(keepBetween) {\r\n        super.cleanRaws(keepBetween);\r\n        if (this.nodes) {\r\n            for (const node of this.nodes)\r\n                node.cleanRaws(keepBetween);\r\n        }\r\n    }\r\n    each(callback) {\r\n        if (!this.proxyOf.nodes)\r\n            return undefined;\r\n        const iterator = this.getIterator();\r\n        let index, result;\r\n        while (this.indexes[iterator] < this.proxyOf.nodes.length) {\r\n            index = this.indexes[iterator];\r\n            result = callback(this.proxyOf.nodes[index], index);\r\n            if (result === false)\r\n                break;\r\n            this.indexes[iterator] += 1;\r\n        }\r\n        delete this.indexes[iterator];\r\n        return result;\r\n    }\r\n    every(condition) {\r\n        return this.nodes.every(condition);\r\n    }\r\n    getIterator() {\r\n        if (!this.lastEach)\r\n            this.lastEach = 0;\r\n        if (!this.indexes)\r\n            this.indexes = {};\r\n        this.lastEach += 1;\r\n        const iterator = this.lastEach;\r\n        this.indexes[iterator] = 0;\r\n        return iterator;\r\n    }\r\n    getProxyProcessor() {\r\n        return {\r\n            get(node, prop) {\r\n                if (prop === 'proxyOf') {\r\n                    return node;\r\n                }\r\n                else if (!node[prop]) {\r\n                    return node[prop];\r\n                }\r\n                else if (prop === 'each' ||\r\n                    (typeof prop === 'string' && prop.startsWith('walk'))) {\r\n                    return (...args) => {\r\n                        return node[prop](...args.map(i => {\r\n                            if (typeof i === 'function') {\r\n                                return (child, index) => i(child.toProxy(), index);\r\n                            }\r\n                            else {\r\n                                return i;\r\n                            }\r\n                        }));\r\n                    };\r\n                }\r\n                else if (prop === 'every' || prop === 'some') {\r\n                    return cb => {\r\n                        return node[prop]((child, ...other) => cb(child.toProxy(), ...other));\r\n                    };\r\n                }\r\n                else if (prop === 'root') {\r\n                    return () => node.root().toProxy();\r\n                }\r\n                else if (prop === 'nodes') {\r\n                    return node.nodes.map(i => i.toProxy());\r\n                }\r\n                else if (prop === 'first' || prop === 'last') {\r\n                    return node[prop].toProxy();\r\n                }\r\n                else {\r\n                    return node[prop];\r\n                }\r\n            },\r\n            set(node, prop, value) {\r\n                if (node[prop] === value)\r\n                    return true;\r\n                node[prop] = value;\r\n                if (prop === 'name' || prop === 'params' || prop === 'selector') {\r\n                    node.markDirty();\r\n                }\r\n                return true;\r\n            }\r\n        };\r\n    }\r\n    index(child) {\r\n        if (typeof child === 'number')\r\n            return child;\r\n        if (child.proxyOf)\r\n            child = child.proxyOf;\r\n        return this.proxyOf.nodes.indexOf(child);\r\n    }\r\n    insertAfter(exist, add) {\r\n        let existIndex = this.index(exist);\r\n        const nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse();\r\n        existIndex = this.index(exist);\r\n        for (const node of nodes)\r\n            this.proxyOf.nodes.splice(existIndex + 1, 0, node);\r\n        let index;\r\n        for (const id in this.indexes) {\r\n            index = this.indexes[id];\r\n            if (existIndex < index) {\r\n                this.indexes[id] = index + nodes.length;\r\n            }\r\n        }\r\n        this.markDirty();\r\n        return this;\r\n    }\r\n    insertBefore(exist, add) {\r\n        let existIndex = this.index(exist);\r\n        const type = existIndex === 0 ? 'prepend' : false;\r\n        const nodes = this.normalize(add, this.proxyOf.nodes[existIndex], type).reverse();\r\n        existIndex = this.index(exist);\r\n        for (const node of nodes)\r\n            this.proxyOf.nodes.splice(existIndex, 0, node);\r\n        let index;\r\n        for (const id in this.indexes) {\r\n            index = this.indexes[id];\r\n            if (existIndex <= index) {\r\n                this.indexes[id] = index + nodes.length;\r\n            }\r\n        }\r\n        this.markDirty();\r\n        return this;\r\n    }\r\n    normalize(nodes, sample) {\r\n        if (typeof nodes === 'string') {\r\n            nodes = cleanSource(parse(nodes).nodes);\r\n        }\r\n        else if (typeof nodes === 'undefined') {\r\n            nodes = [];\r\n        }\r\n        else if (Array.isArray(nodes)) {\r\n            nodes = nodes.slice(0);\r\n            for (const i of nodes) {\r\n                if (i.parent)\r\n                    i.parent.removeChild(i, 'ignore');\r\n            }\r\n        }\r\n        else if (nodes.type === 'root' && this.type !== 'document') {\r\n            nodes = nodes.nodes.slice(0);\r\n            for (const i of nodes) {\r\n                if (i.parent)\r\n                    i.parent.removeChild(i, 'ignore');\r\n            }\r\n        }\r\n        else if (nodes.type) {\r\n            nodes = [nodes];\r\n        }\r\n        else if (nodes.prop) {\r\n            if (typeof nodes.value === 'undefined') {\r\n                throw new Error('Value field is missed in node creation');\r\n            }\r\n            else if (typeof nodes.value !== 'string') {\r\n                nodes.value = String(nodes.value);\r\n            }\r\n            nodes = [new Declaration(nodes)];\r\n        }\r\n        else if (nodes.selector || nodes.selectors) {\r\n            nodes = [new Rule(nodes)];\r\n        }\r\n        else if (nodes.name) {\r\n            nodes = [new AtRule(nodes)];\r\n        }\r\n        else if (nodes.text) {\r\n            nodes = [new Comment(nodes)];\r\n        }\r\n        else {\r\n            throw new Error('Unknown node type in node creation');\r\n        }\r\n        const processed = nodes.map(i => {\r\n            /* c8 ignore next */\r\n            if (!i[my])\r\n                Container.rebuild(i);\r\n            i = i.proxyOf;\r\n            if (i.parent)\r\n                i.parent.removeChild(i);\r\n            if (i[isClean])\r\n                markTreeDirty(i);\r\n            if (!i.raws)\r\n                i.raws = {};\r\n            if (typeof i.raws.before === 'undefined') {\r\n                if (sample && typeof sample.raws.before !== 'undefined') {\r\n                    i.raws.before = sample.raws.before.replace(/\\S/g, '');\r\n                }\r\n            }\r\n            i.parent = this.proxyOf;\r\n            return i;\r\n        });\r\n        return processed;\r\n    }\r\n    prepend(...children) {\r\n        children = children.reverse();\r\n        for (const child of children) {\r\n            const nodes = this.normalize(child, this.first, 'prepend').reverse();\r\n            for (const node of nodes)\r\n                this.proxyOf.nodes.unshift(node);\r\n            for (const id in this.indexes) {\r\n                this.indexes[id] = this.indexes[id] + nodes.length;\r\n            }\r\n        }\r\n        this.markDirty();\r\n        return this;\r\n    }\r\n    push(child) {\r\n        child.parent = this;\r\n        this.proxyOf.nodes.push(child);\r\n        return this;\r\n    }\r\n    removeAll() {\r\n        for (const node of this.proxyOf.nodes)\r\n            node.parent = undefined;\r\n        this.proxyOf.nodes = [];\r\n        this.markDirty();\r\n        return this;\r\n    }\r\n    removeChild(child) {\r\n        child = this.index(child);\r\n        this.proxyOf.nodes[child].parent = undefined;\r\n        this.proxyOf.nodes.splice(child, 1);\r\n        let index;\r\n        for (const id in this.indexes) {\r\n            index = this.indexes[id];\r\n            if (index >= child) {\r\n                this.indexes[id] = index - 1;\r\n            }\r\n        }\r\n        this.markDirty();\r\n        return this;\r\n    }\r\n    replaceValues(pattern, opts, callback) {\r\n        if (!callback) {\r\n            callback = opts;\r\n            opts = {};\r\n        }\r\n        this.walkDecls(decl => {\r\n            if (opts.props && !opts.props.includes(decl.prop))\r\n                return;\r\n            if (opts.fast && !decl.value.includes(opts.fast))\r\n                return;\r\n            decl.value = decl.value.replace(pattern, callback);\r\n        });\r\n        this.markDirty();\r\n        return this;\r\n    }\r\n    some(condition) {\r\n        return this.nodes.some(condition);\r\n    }\r\n    walk(callback) {\r\n        return this.each((child, i) => {\r\n            let result;\r\n            try {\r\n                result = callback(child, i);\r\n            }\r\n            catch (e) {\r\n                throw child.addToError(e);\r\n            }\r\n            if (result !== false && child.walk) {\r\n                result = child.walk(callback);\r\n            }\r\n            return result;\r\n        });\r\n    }\r\n    walkAtRules(name, callback) {\r\n        if (!callback) {\r\n            callback = name;\r\n            return this.walk((child, i) => {\r\n                if (child.type === 'atrule') {\r\n                    return callback(child, i);\r\n                }\r\n            });\r\n        }\r\n        if (name instanceof RegExp) {\r\n            return this.walk((child, i) => {\r\n                if (child.type === 'atrule' && name.test(child.name)) {\r\n                    return callback(child, i);\r\n                }\r\n            });\r\n        }\r\n        return this.walk((child, i) => {\r\n            if (child.type === 'atrule' && child.name === name) {\r\n                return callback(child, i);\r\n            }\r\n        });\r\n    }\r\n    walkComments(callback) {\r\n        return this.walk((child, i) => {\r\n            if (child.type === 'comment') {\r\n                return callback(child, i);\r\n            }\r\n        });\r\n    }\r\n    walkDecls(prop, callback) {\r\n        if (!callback) {\r\n            callback = prop;\r\n            return this.walk((child, i) => {\r\n                if (child.type === 'decl') {\r\n                    return callback(child, i);\r\n                }\r\n            });\r\n        }\r\n        if (prop instanceof RegExp) {\r\n            return this.walk((child, i) => {\r\n                if (child.type === 'decl' && prop.test(child.prop)) {\r\n                    return callback(child, i);\r\n                }\r\n            });\r\n        }\r\n        return this.walk((child, i) => {\r\n            if (child.type === 'decl' && child.prop === prop) {\r\n                return callback(child, i);\r\n            }\r\n        });\r\n    }\r\n    walkRules(selector, callback) {\r\n        if (!callback) {\r\n            callback = selector;\r\n            return this.walk((child, i) => {\r\n                if (child.type === 'rule') {\r\n                    return callback(child, i);\r\n                }\r\n            });\r\n        }\r\n        if (selector instanceof RegExp) {\r\n            return this.walk((child, i) => {\r\n                if (child.type === 'rule' && selector.test(child.selector)) {\r\n                    return callback(child, i);\r\n                }\r\n            });\r\n        }\r\n        return this.walk((child, i) => {\r\n            if (child.type === 'rule' && child.selector === selector) {\r\n                return callback(child, i);\r\n            }\r\n        });\r\n    }\r\n    get first() {\r\n        if (!this.proxyOf.nodes)\r\n            return undefined;\r\n        return this.proxyOf.nodes[0];\r\n    }\r\n    get last() {\r\n        if (!this.proxyOf.nodes)\r\n            return undefined;\r\n        return this.proxyOf.nodes[this.proxyOf.nodes.length - 1];\r\n    }\r\n}\r\nContainer.registerParse = dependant => {\r\n    parse = dependant;\r\n};\r\nContainer.registerRule = dependant => {\r\n    Rule = dependant;\r\n};\r\nContainer.registerAtRule = dependant => {\r\n    AtRule = dependant;\r\n};\r\nContainer.registerRoot = dependant => {\r\n    Root = dependant;\r\n};\r\n/* c8 ignore start */\r\nContainer.rebuild = node => {\r\n    if (node.type === 'atrule') {\r\n        Object.setPrototypeOf(node, AtRule.prototype);\r\n    }\r\n    else if (node.type === 'rule') {\r\n        Object.setPrototypeOf(node, Rule.prototype);\r\n    }\r\n    else if (node.type === 'decl') {\r\n        Object.setPrototypeOf(node, Declaration.prototype);\r\n    }\r\n    else if (node.type === 'comment') {\r\n        Object.setPrototypeOf(node, Comment.prototype);\r\n    }\r\n    else if (node.type === 'root') {\r\n        Object.setPrototypeOf(node, Root.prototype);\r\n    }\r\n    node[my] = true;\r\n    if (node.nodes) {\r\n        node.nodes.forEach(child => {\r\n            Container.rebuild(child);\r\n        });\r\n    }\r\n};\r\n/* c8 ignore stop */\r\n"],
  "mappings": ";;;;AAAO,IAAM,iBAAN,MAAM,wBAAuB,MAAM;AAAA,EAA1C,OAA0C;AAAA;AAAA;AAAA,EACtC,YAAY,SAAS,MAAM,QAAQ,QAAQ,MAAM,QAAQ;AACrD,UAAM,OAAO;AACb,SAAK,OAAO;AACZ,SAAK,SAAS;AACd,QAAI,MAAM;AACN,WAAK,OAAO;AAAA,IAChB;AACA,QAAI,QAAQ;AACR,WAAK,SAAS;AAAA,IAClB;AACA,QAAI,QAAQ;AACR,WAAK,SAAS;AAAA,IAClB;AACA,QAAI,OAAO,SAAS,eAAe,OAAO,WAAW,aAAa;AAC9D,UAAI,OAAO,SAAS,UAAU;AAC1B,aAAK,OAAO;AACZ,aAAK,SAAS;AAAA,MAClB,OACK;AACD,aAAK,OAAO,KAAK;AACjB,aAAK,SAAS,KAAK;AACnB,aAAK,UAAU,OAAO;AACtB,aAAK,YAAY,OAAO;AAAA,MAC5B;AAAA,IACJ;AACA,SAAK,WAAW;AAChB,QAAI,MAAM,mBAAmB;AACzB,YAAM,kBAAkB,MAAM,eAAc;AAAA,IAChD;AAAA,EACJ;AAAA,EACA,aAAa;AACT,SAAK,UAAU,KAAK,SAAS,KAAK,SAAS,OAAO;AAClD,SAAK,WAAW,KAAK,OAAO,KAAK,OAAO;AACxC,QAAI,OAAO,KAAK,SAAS,aAAa;AAClC,WAAK,WAAW,MAAM,KAAK,OAAO,MAAM,KAAK;AAAA,IACjD;AACA,SAAK,WAAW,OAAO,KAAK;AAAA,EAChC;AAAA,EACA,iBAAiB;AACb,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,QAAI,OAAO,KAAK,eAAe;AAC/B,QAAI,MAAM;AACN,aAAO,SAAS,OAAO;AAAA,IAC3B;AACA,WAAO,KAAK,OAAO,OAAO,KAAK,UAAU;AAAA,EAC7C;AACJ;;;ACjDA,IAAM,cAAc;AAAA,EAChB,OAAO;AAAA,EACP,aAAa;AAAA,EACb,eAAe;AAAA,EACf,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,OAAO;AAAA,EACP,aAAa;AAAA,EACb,cAAc;AAAA,EACd,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,WAAW;AACf;AACA,SAAS,WAAW,KAAK;AACrB,SAAO,IAAI,CAAC,EAAE,YAAY,IAAI,IAAI,MAAM,CAAC;AAC7C;AAFS;AAGF,IAAM,cAAN,MAAkB;AAAA,EAjBzB,OAiByB;AAAA;AAAA;AAAA,EACrB,YAAY,SAAS;AACjB,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,OAAO,MAAM,WAAW;AACpB,QAAI,OAAO,MAAM,KAAK;AACtB,UAAM,SAAS,KAAK,SAAS,KAAK,SAAS,MAAM,QAAQ,IAAI;AAC7D,QAAI,OAAO,KAAK,KAAK,cAAc,aAAa;AAC5C,cAAQ,KAAK,KAAK;AAAA,IACtB,WACS,QAAQ;AACb,cAAQ;AAAA,IACZ;AACA,QAAI,KAAK,OAAO;AACZ,WAAK,MAAM,MAAM,OAAO,MAAM;AAAA,IAClC,OACK;AACD,YAAM,OAAO,KAAK,KAAK,WAAW,OAAO,YAAY,MAAM;AAC3D,WAAK,QAAQ,OAAO,SAAS,KAAK,IAAI;AAAA,IAC1C;AAAA,EACJ;AAAA,EACA,YAAY,MAAM,QAAQ;AACtB,QAAI;AACJ,QAAI,KAAK,SAAS,QAAQ;AACtB,cAAQ,KAAK,IAAI,MAAM,MAAM,YAAY;AAAA,IAC7C,WACS,KAAK,SAAS,WAAW;AAC9B,cAAQ,KAAK,IAAI,MAAM,MAAM,eAAe;AAAA,IAChD,WACS,WAAW,UAAU;AAC1B,cAAQ,KAAK,IAAI,MAAM,MAAM,YAAY;AAAA,IAC7C,OACK;AACD,cAAQ,KAAK,IAAI,MAAM,MAAM,aAAa;AAAA,IAC9C;AACA,QAAI,MAAM,KAAK;AACf,QAAI,QAAQ;AACZ,WAAO,OAAO,IAAI,SAAS,QAAQ;AAC/B,eAAS;AACT,YAAM,IAAI;AAAA,IACd;AACA,QAAI,MAAM,SAAS,IAAI,GAAG;AACtB,YAAM,SAAS,KAAK,IAAI,MAAM,MAAM,QAAQ;AAC5C,UAAI,OAAO,QAAQ;AACf,iBAAS,OAAO,GAAG,OAAO,OAAO;AAC7B,mBAAS;AAAA,MACjB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,MAAM,MAAM,OAAO;AACf,UAAM,UAAU,KAAK,IAAI,MAAM,WAAW,YAAY;AACtD,SAAK,QAAQ,QAAQ,UAAU,KAAK,MAAM,OAAO;AACjD,QAAI;AACJ,QAAI,KAAK,SAAS,KAAK,MAAM,QAAQ;AACjC,WAAK,KAAK,IAAI;AACd,cAAQ,KAAK,IAAI,MAAM,OAAO;AAAA,IAClC,OACK;AACD,cAAQ,KAAK,IAAI,MAAM,SAAS,WAAW;AAAA,IAC/C;AACA,QAAI;AACA,WAAK,QAAQ,KAAK;AACtB,SAAK,QAAQ,KAAK,MAAM,KAAK;AAAA,EACjC;AAAA,EACA,KAAK,MAAM;AACP,QAAI,OAAO,KAAK,MAAM,SAAS;AAC/B,WAAO,OAAO,GAAG;AACb,UAAI,KAAK,MAAM,IAAI,EAAE,SAAS;AAC1B;AACJ,cAAQ;AAAA,IACZ;AACA,UAAM,YAAY,KAAK,IAAI,MAAM,WAAW;AAC5C,aAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AACxC,YAAM,QAAQ,KAAK,MAAM,CAAC;AAC1B,YAAM,SAAS,KAAK,IAAI,OAAO,QAAQ;AACvC,UAAI;AACA,aAAK,QAAQ,MAAM;AACvB,WAAK,UAAU,OAAO,SAAS,KAAK,SAAS;AAAA,IACjD;AAAA,EACJ;AAAA,EACA,QAAQ,MAAM;AACV,UAAM,OAAO,KAAK,IAAI,MAAM,QAAQ,aAAa;AACjD,UAAM,QAAQ,KAAK,IAAI,MAAM,SAAS,cAAc;AACpD,SAAK,QAAQ,OAAO,OAAO,KAAK,OAAO,QAAQ,MAAM,IAAI;AAAA,EAC7D;AAAA,EACA,KAAK,MAAM,WAAW;AAClB,UAAM,UAAU,KAAK,IAAI,MAAM,WAAW,OAAO;AACjD,QAAI,SAAS,KAAK,OAAO,UAAU,KAAK,SAAS,MAAM,OAAO;AAC9D,QAAI,KAAK,WAAW;AAChB,gBAAU,KAAK,KAAK,aAAa;AAAA,IACrC;AACA,QAAI;AACA,gBAAU;AACd,SAAK,QAAQ,QAAQ,IAAI;AAAA,EAC7B;AAAA,EACA,SAAS,MAAM;AACX,SAAK,KAAK,IAAI;AAAA,EAClB;AAAA,EACA,IAAI,MAAM,KAAK,QAAQ;AACnB,QAAI;AACJ,QAAI,CAAC;AACD,eAAS;AAEb,QAAI,KAAK;AACL,cAAQ,KAAK,KAAK,GAAG;AACrB,UAAI,OAAO,UAAU;AACjB,eAAO;AAAA,IACf;AACA,UAAM,SAAS,KAAK;AACpB,QAAI,WAAW,UAAU;AAErB,UAAI,CAAC,UAAW,OAAO,SAAS,UAAU,OAAO,UAAU,MAAO;AAC9D,eAAO;AAAA,MACX;AAEA,UAAI,UAAU,OAAO,SAAS,YAAY;AACtC,eAAO;AAAA,MACX;AAAA,IACJ;AAEA,QAAI,CAAC;AACD,aAAO,YAAY,MAAM;AAE7B,UAAM,OAAO,KAAK,KAAK;AACvB,QAAI,CAAC,KAAK;AACN,WAAK,WAAW,CAAC;AACrB,QAAI,OAAO,KAAK,SAAS,MAAM,MAAM,aAAa;AAC9C,aAAO,KAAK,SAAS,MAAM;AAAA,IAC/B;AACA,QAAI,WAAW,YAAY,WAAW,SAAS;AAC3C,aAAO,KAAK,YAAY,MAAM,MAAM;AAAA,IACxC,OACK;AACD,YAAM,SAAS,QAAQ,WAAW,MAAM;AACxC,UAAI,KAAK,MAAM,GAAG;AACd,gBAAQ,KAAK,MAAM,EAAE,MAAM,IAAI;AAAA,MACnC,OACK;AACD,aAAK,KAAK,OAAK;AACX,kBAAQ,EAAE,KAAK,GAAG;AAClB,cAAI,OAAO,UAAU;AACjB,mBAAO;AAAA,QACf,CAAC;AAAA,MACL;AAAA,IACJ;AACA,QAAI,OAAO,UAAU;AACjB,cAAQ,YAAY,MAAM;AAC9B,SAAK,SAAS,MAAM,IAAI;AACxB,WAAO;AAAA,EACX;AAAA,EACA,eAAe,MAAM;AACjB,QAAI;AACJ,SAAK,KAAK,OAAK;AACX,UAAI,EAAE,SAAS,EAAE,MAAM,SAAS,GAAG;AAC/B,YAAI,OAAO,EAAE,KAAK,UAAU,aAAa;AACrC,kBAAQ,EAAE,KAAK;AACf,cAAI,MAAM,SAAS,IAAI,GAAG;AACtB,oBAAQ,MAAM,QAAQ,WAAW,EAAE;AAAA,UACvC;AACA,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ,CAAC;AACD,QAAI;AACA,cAAQ,MAAM,QAAQ,OAAO,EAAE;AACnC,WAAO;AAAA,EACX;AAAA,EACA,iBAAiB,MAAM,MAAM;AACzB,QAAI;AACJ,SAAK,aAAa,OAAK;AACnB,UAAI,OAAO,EAAE,KAAK,WAAW,aAAa;AACtC,gBAAQ,EAAE,KAAK;AACf,YAAI,MAAM,SAAS,IAAI,GAAG;AACtB,kBAAQ,MAAM,QAAQ,WAAW,EAAE;AAAA,QACvC;AACA,eAAO;AAAA,MACX;AAAA,IACJ,CAAC;AACD,QAAI,OAAO,UAAU,aAAa;AAC9B,cAAQ,KAAK,IAAI,MAAM,MAAM,YAAY;AAAA,IAC7C,WACS,OAAO;AACZ,cAAQ,MAAM,QAAQ,OAAO,EAAE;AAAA,IACnC;AACA,WAAO;AAAA,EACX;AAAA,EACA,cAAc,MAAM,MAAM;AACtB,QAAI;AACJ,SAAK,UAAU,OAAK;AAChB,UAAI,OAAO,EAAE,KAAK,WAAW,aAAa;AACtC,gBAAQ,EAAE,KAAK;AACf,YAAI,MAAM,SAAS,IAAI,GAAG;AACtB,kBAAQ,MAAM,QAAQ,WAAW,EAAE;AAAA,QACvC;AACA,eAAO;AAAA,MACX;AAAA,IACJ,CAAC;AACD,QAAI,OAAO,UAAU,aAAa;AAC9B,cAAQ,KAAK,IAAI,MAAM,MAAM,YAAY;AAAA,IAC7C,WACS,OAAO;AACZ,cAAQ,MAAM,QAAQ,OAAO,EAAE;AAAA,IACnC;AACA,WAAO;AAAA,EACX;AAAA,EACA,cAAc,MAAM;AAChB,QAAI;AACJ,SAAK,KAAK,OAAK;AACX,UAAI,EAAE,SAAS,QAAQ;AACnB,gBAAQ,EAAE,KAAK;AACf,YAAI,OAAO,UAAU;AACjB,iBAAO;AAAA,MACf;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,EACX;AAAA,EACA,cAAc,MAAM;AAChB,QAAI;AACJ,SAAK,KAAK,OAAK;AACX,UAAI,EAAE,UAAU,EAAE,WAAW,QAAQ,KAAK,UAAU,IAAI;AACpD,YAAI,OAAO,EAAE,KAAK,WAAW,aAAa;AACtC,kBAAQ,EAAE,KAAK;AACf,cAAI,MAAM,SAAS,IAAI,GAAG;AACtB,oBAAQ,MAAM,QAAQ,WAAW,EAAE;AAAA,UACvC;AACA,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ,CAAC;AACD,QAAI;AACA,cAAQ,MAAM,QAAQ,OAAO,EAAE;AACnC,WAAO;AAAA,EACX;AAAA,EACA,SAAS,MAAM;AACX,QAAI;AACJ,SAAK,UAAU,OAAK;AAChB,UAAI,OAAO,EAAE,KAAK,YAAY,aAAa;AACvC,gBAAQ,EAAE,KAAK,QAAQ,QAAQ,WAAW,EAAE;AAC5C,eAAO;AAAA,MACX;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,EACX;AAAA,EACA,aAAa,MAAM;AACf,QAAI;AACJ,SAAK,KAAK,OAAK;AACX,UAAI,EAAE,SAAS,EAAE,MAAM,WAAW,GAAG;AACjC,gBAAQ,EAAE,KAAK;AACf,YAAI,OAAO,UAAU;AACjB,iBAAO;AAAA,MACf;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,EACX;AAAA,EACA,UAAU,MAAM;AACZ,QAAI,KAAK,KAAK;AACV,aAAO,KAAK,KAAK;AACrB,QAAI;AACJ,SAAK,KAAK,OAAK;AACX,YAAM,IAAI,EAAE;AACZ,UAAI,KAAK,MAAM,QAAQ,EAAE,UAAU,EAAE,WAAW,MAAM;AAClD,YAAI,OAAO,EAAE,KAAK,WAAW,aAAa;AACtC,gBAAM,QAAQ,EAAE,KAAK,OAAO,MAAM,IAAI;AACtC,kBAAQ,MAAM,MAAM,SAAS,CAAC;AAC9B,kBAAQ,MAAM,QAAQ,OAAO,EAAE;AAC/B,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,EACX;AAAA,EACA,aAAa,MAAM;AACf,QAAI;AACJ,SAAK,KAAK,OAAK;AACX,UAAI,EAAE,SAAS,EAAE,MAAM,UAAU,EAAE,KAAK,SAAS,QAAQ;AACrD,gBAAQ,EAAE,KAAK;AACf,YAAI,OAAO,UAAU;AACjB,iBAAO;AAAA,MACf;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,EACX;AAAA,EACA,SAAS,MAAM,MAAM;AACjB,UAAM,QAAQ,KAAK,IAAI;AACvB,UAAM,MAAM,KAAK,KAAK,IAAI;AAC1B,QAAI,OAAO,IAAI,UAAU,OAAO;AAC5B,aAAO,IAAI;AAAA,IACf;AACA,WAAO;AAAA,EACX;AAAA,EACA,KAAK,MAAM;AACP,SAAK,KAAK,IAAI;AACd,QAAI,KAAK,KAAK;AACV,WAAK,QAAQ,KAAK,KAAK,KAAK;AAAA,EACpC;AAAA,EACA,KAAK,MAAM;AACP,SAAK,MAAM,MAAM,KAAK,SAAS,MAAM,UAAU,CAAC;AAChD,QAAI,KAAK,KAAK,cAAc;AACxB,WAAK,QAAQ,KAAK,KAAK,cAAc,MAAM,KAAK;AAAA,IACpD;AAAA,EACJ;AAAA,EACA,UAAU,MAAM,WAAW;AAEvB,QAAI,CAAC,KAAK,KAAK,IAAI,GAAG;AAClB,YAAM,IAAI,MAAM,2BACZ,KAAK,OACL,iDAC+C;AAAA,IACvD;AAEA,SAAK,KAAK,IAAI,EAAE,MAAM,SAAS;AAAA,EACnC;AACJ;;;ACzUO,SAAS,UAAU,MAAM,SAAS;AACrC,QAAM,MAAM,IAAI,YAAY,OAAO;AACnC,MAAI,UAAU,IAAI;AACtB;AAHgB;;;ACDT,IAAM,UAAU,OAAO,SAAS;AAChC,IAAM,KAAK,OAAO,IAAI;;;ACG7B,SAAS,UAAU,KAAK,QAAQ;AAC5B,QAAM,SAAS,IAAI,IAAI,YAAY;AACnC,aAAW,KAAK,KAAK;AACjB,QAAI,CAAC,OAAO,UAAU,eAAe,KAAK,KAAK,CAAC,GAAG;AAE/C;AAAA,IACJ;AACA,QAAI,MAAM;AACN;AACJ,QAAI,QAAQ,IAAI,CAAC;AACjB,UAAM,OAAO,OAAO;AACpB,QAAI,MAAM,YAAY,SAAS,UAAU;AACrC,UAAI;AACA,eAAO,CAAC,IAAI;AAAA,IACpB,WACS,MAAM,UAAU;AACrB,aAAO,CAAC,IAAI;AAAA,IAChB,WACS,MAAM,QAAQ,KAAK,GAAG;AAC3B,aAAO,CAAC,IAAI,MAAM,IAAI,OAAK,UAAU,GAAG,MAAM,CAAC;AAAA,IACnD,OACK;AACD,UAAI,SAAS,YAAY,UAAU;AAC/B,gBAAQ,UAAU,KAAK;AAC3B,aAAO,CAAC,IAAI;AAAA,IAChB;AAAA,EACJ;AACA,SAAO;AACX;AA5BS;AA6BT,SAAS,aAAa,UAAU,UAAU;AAEtC,MAAI,YACA,OAAO,SAAS,WAAW,aAAa;AACxC,WAAO,SAAS;AAAA,EACpB;AACA,MAAI,SAAS;AACb,MAAI,OAAO;AACX,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACtC,QAAI,SAAS,SAAS,QAAQ,WAAW,SAAS,QAAQ;AACtD,eAAS;AACT;AAAA,IACJ;AACA,QAAI,SAAS,CAAC,MAAM,MAAM;AACtB,eAAS;AACT,cAAQ;AAAA,IACZ,OACK;AACD,gBAAU;AAAA,IACd;AAAA,EACJ;AACA,SAAO;AACX;AAvBS;AAwBF,IAAM,OAAN,MAAW;AAAA,EAzDlB,OAyDkB;AAAA;AAAA;AAAA,EACd,YAAY,WAAW,CAAC,GAAG;AACvB,SAAK,OAAO,CAAC;AACb,SAAK,OAAO,IAAI;AAChB,SAAK,EAAE,IAAI;AACX,eAAW,QAAQ,UAAU;AACzB,UAAI,SAAS,SAAS;AAClB,aAAK,QAAQ,CAAC;AACd,mBAAW,QAAQ,SAAS,IAAI,GAAG;AAC/B,cAAI,OAAO,KAAK,UAAU,YAAY;AAClC,iBAAK,OAAO,KAAK,MAAM,CAAC;AAAA,UAC5B,OACK;AACD,iBAAK,OAAO,IAAI;AAAA,UACpB;AAAA,QACJ;AAAA,MACJ,OACK;AACD,aAAK,IAAI,IAAI,SAAS,IAAI;AAAA,MAC9B;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,WAAW,OAAO;AACd,UAAM,cAAc;AACpB,QAAI,MAAM,SAAS,KAAK,UAAU,aAAa,KAAK,MAAM,KAAK,GAAG;AAC9D,YAAM,IAAI,KAAK;AACf,YAAM,QAAQ,MAAM,MAAM,QAAQ,cAAc,KAAK,EAAE,MAAM,IAAI,IAAI,EAAE,MAAM,IAAI,IAAI,EAAE,MAAM,MAAM,IAAI;AAAA,IAC3G;AACA,WAAO;AAAA,EACX;AAAA,EACA,MAAM,KAAK;AACP,SAAK,OAAO,YAAY,MAAM,GAAG;AACjC,WAAO;AAAA,EACX;AAAA,EACA,OAAO,YAAY,CAAC,GAAG;AACnB,eAAW,QAAQ,WAAW;AAC1B,WAAK,IAAI,IAAI,UAAU,IAAI;AAAA,IAC/B;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,KAAK;AACR,SAAK,OAAO,aAAa,MAAM,GAAG;AAClC,WAAO;AAAA,EACX;AAAA,EACA,UAAU,aAAa;AACnB,WAAO,KAAK,KAAK;AACjB,WAAO,KAAK,KAAK;AACjB,QAAI,CAAC;AACD,aAAO,KAAK,KAAK;AAAA,EACzB;AAAA,EACA,MAAM,YAAY,CAAC,GAAG;AAClB,UAAM,SAAS,UAAU,IAAI;AAC7B,eAAW,QAAQ,WAAW;AAC1B,aAAO,IAAI,IAAI,UAAU,IAAI;AAAA,IACjC;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW,YAAY,CAAC,GAAG;AACvB,UAAM,SAAS,KAAK,MAAM,SAAS;AACnC,SAAK,OAAO,YAAY,MAAM,MAAM;AACpC,WAAO;AAAA,EACX;AAAA,EACA,YAAY,YAAY,CAAC,GAAG;AACxB,UAAM,SAAS,KAAK,MAAM,SAAS;AACnC,SAAK,OAAO,aAAa,MAAM,MAAM;AACrC,WAAO;AAAA,EACX;AAAA,EACA,MAAM,SAAS,OAAO,CAAC,GAAG;AACtB,QAAI,KAAK,QAAQ;AACb,YAAM,EAAE,KAAK,MAAM,IAAI,KAAK,QAAQ,IAAI;AACxC,aAAO,KAAK,OAAO,MAAM,MAAM,SAAS,EAAE,QAAQ,MAAM,QAAQ,MAAM,MAAM,KAAK,GAAG,EAAE,QAAQ,IAAI,QAAQ,MAAM,IAAI,KAAK,GAAG,IAAI;AAAA,IACpI;AACA,WAAO,IAAI,eAAe,OAAO;AAAA,EACrC;AAAA,EACA,oBAAoB;AAChB,WAAO;AAAA,MACH,IAAI,MAAM,MAAM;AACZ,YAAI,SAAS,WAAW;AACpB,iBAAO;AAAA,QACX,WACS,SAAS,QAAQ;AACtB,iBAAO,MAAM,KAAK,KAAK,EAAE,QAAQ;AAAA,QACrC,OACK;AACD,iBAAO,KAAK,IAAI;AAAA,QACpB;AAAA,MACJ;AAAA,MACA,IAAI,MAAM,MAAM,OAAO;AACnB,YAAI,KAAK,IAAI,MAAM;AACf,iBAAO;AACX,aAAK,IAAI,IAAI;AACb,YAAI,SAAS,UACT,SAAS,WACT,SAAS,UACT,SAAS,YACT,SAAS;AAAA,QAET,SAAS,QAAQ;AACjB,eAAK,UAAU;AAAA,QACnB;AACA,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAEA,YAAY;AACR,SAAK,OAAO,IAAI;AAAA,EACpB;AAAA,EACA,YAAY;AACR,QAAI,KAAK,OAAO,GAAG;AACf,WAAK,OAAO,IAAI;AAChB,UAAI,OAAO;AACX,aAAQ,OAAO,KAAK,QAAS;AACzB,aAAK,OAAO,IAAI;AAAA,MACpB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,OAAO;AACH,QAAI,CAAC,KAAK;AACN,aAAO;AACX,UAAM,QAAQ,KAAK,OAAO,MAAM,IAAI;AACpC,WAAO,KAAK,OAAO,MAAM,QAAQ,CAAC;AAAA,EACtC;AAAA,EACA,WAAW,MAAM;AACb,QAAI,MAAM,KAAK,OAAO;AACtB,QAAI,KAAK,OAAO;AACZ,YAAM,KAAK,eAAe,KAAK,KAAK;AAAA,IACxC,WACS,KAAK,MAAM;AAChB,YAAM,uBAAuB,KAAK,OAAO,MAAM,IAAI,MAAM,aAAa,KAAK,OAAO,MAAM,KAAK,KAAK,OAAO,KAAK,GAAG,aAAa,KAAK,OAAO,MAAM,KAAK,KAAK,OAAO,GAAG,CAAC;AACrK,YAAM,QAAQ,qBAAqB,QAAQ,KAAK,IAAI;AACpD,UAAI,UAAU;AACV,cAAM,KAAK,eAAe,KAAK;AAAA,IACvC;AACA,WAAO;AAAA,EACX;AAAA,EACA,eAAe,OAAO;AAClB,QAAI,SAAS,KAAK,OAAO,MAAM;AAC/B,QAAI,OAAO,KAAK,OAAO,MAAM;AAC7B,UAAM,SAAS,aAAa,KAAK,OAAO,MAAM,KAAK,KAAK,OAAO,KAAK;AACpE,UAAM,MAAM,SAAS;AACrB,aAAS,IAAI,QAAQ,IAAI,KAAK,KAAK;AAC/B,UAAI,KAAK,OAAO,MAAM,IAAI,CAAC,MAAM,MAAM;AACnC,iBAAS;AACT,gBAAQ;AAAA,MACZ,OACK;AACD,kBAAU;AAAA,MACd;AAAA,IACJ;AACA,WAAO,EAAE,QAAQ,KAAK;AAAA,EAC1B;AAAA,EACA,OAAO;AACH,QAAI,CAAC,KAAK;AACN,aAAO;AACX,UAAM,QAAQ,KAAK,OAAO,MAAM,IAAI;AACpC,WAAO,KAAK,OAAO,MAAM,QAAQ,CAAC;AAAA,EACtC;AAAA,EACA,QAAQ,MAAM;AACV,QAAI,QAAQ;AAAA,MACR,QAAQ,KAAK,OAAO,MAAM;AAAA,MAC1B,MAAM,KAAK,OAAO,MAAM;AAAA,IAC5B;AACA,QAAI,MAAM,KAAK,OAAO,MAChB;AAAA,MACE,QAAQ,KAAK,OAAO,IAAI,SAAS;AAAA,MACjC,MAAM,KAAK,OAAO,IAAI;AAAA,IAC1B,IACE;AAAA,MACE,QAAQ,MAAM,SAAS;AAAA,MACvB,MAAM,MAAM;AAAA,IAChB;AACJ,QAAI,KAAK,MAAM;AACX,YAAM,uBAAuB,KAAK,OAAO,MAAM,IAAI,MAAM,aAAa,KAAK,OAAO,MAAM,KAAK,KAAK,OAAO,KAAK,GAAG,aAAa,KAAK,OAAO,MAAM,KAAK,KAAK,OAAO,GAAG,CAAC;AACrK,YAAM,QAAQ,qBAAqB,QAAQ,KAAK,IAAI;AACpD,UAAI,UAAU,IAAI;AACd,gBAAQ,KAAK,eAAe,KAAK;AACjC,cAAM,KAAK,eAAe,QAAQ,KAAK,KAAK,MAAM;AAAA,MACtD;AAAA,IACJ,OACK;AACD,UAAI,KAAK,OAAO;AACZ,gBAAQ;AAAA,UACJ,QAAQ,KAAK,MAAM;AAAA,UACnB,MAAM,KAAK,MAAM;AAAA,QACrB;AAAA,MACJ,WACS,KAAK,OAAO;AACjB,gBAAQ,KAAK,eAAe,KAAK,KAAK;AAAA,MAC1C;AACA,UAAI,KAAK,KAAK;AACV,cAAM;AAAA,UACF,QAAQ,KAAK,IAAI;AAAA,UACjB,MAAM,KAAK,IAAI;AAAA,QACnB;AAAA,MACJ,WACS,OAAO,KAAK,aAAa,UAAU;AACxC,cAAM,KAAK,eAAe,KAAK,QAAQ;AAAA,MAC3C,WACS,KAAK,OAAO;AACjB,cAAM,KAAK,eAAe,KAAK,QAAQ,CAAC;AAAA,MAC5C;AAAA,IACJ;AACA,QAAI,IAAI,OAAO,MAAM,QAChB,IAAI,SAAS,MAAM,QAAQ,IAAI,UAAU,MAAM,QAAS;AACzD,YAAM,EAAE,QAAQ,MAAM,SAAS,GAAG,MAAM,MAAM,KAAK;AAAA,IACvD;AACA,WAAO,EAAE,KAAK,MAAM;AAAA,EACxB;AAAA,EACA,IAAI,MAAM,aAAa;AACnB,UAAM,MAAM,IAAI,YAAY;AAC5B,WAAO,IAAI,IAAI,MAAM,MAAM,WAAW;AAAA,EAC1C;AAAA,EACA,SAAS;AACL,QAAI,KAAK,QAAQ;AACb,WAAK,OAAO,YAAY,IAAI;AAAA,IAChC;AACA,SAAK,SAAS;AACd,WAAO;AAAA,EACX;AAAA,EACA,eAAe,OAAO;AAClB,QAAI,KAAK,QAAQ;AACb,UAAI,WAAW;AACf,UAAI,YAAY;AAChB,iBAAW,QAAQ,OAAO;AACtB,YAAI,SAAS,MAAM;AACf,sBAAY;AAAA,QAChB,WACS,WAAW;AAChB,eAAK,OAAO,YAAY,UAAU,IAAI;AACtC,qBAAW;AAAA,QACf,OACK;AACD,eAAK,OAAO,aAAa,UAAU,IAAI;AAAA,QAC3C;AAAA,MACJ;AACA,UAAI,CAAC,WAAW;AACZ,aAAK,OAAO;AAAA,MAChB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO;AACH,QAAI,SAAS;AACb,WAAO,OAAO,UAAU,OAAO,OAAO,SAAS,YAAY;AACvD,eAAS,OAAO;AAAA,IACpB;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,GAAG,QAAQ;AACd,UAAM,QAAQ,CAAC;AACf,UAAM,aAAa,UAAU;AAC7B,aAAS,UAAU,oBAAI,IAAI;AAC3B,QAAI,kBAAkB;AACtB,eAAW,QAAQ,MAAM;AACrB,UAAI,CAAC,OAAO,UAAU,eAAe,KAAK,MAAM,IAAI,GAAG;AAEnD;AAAA,MACJ;AACA,UAAI,SAAS,YAAY,SAAS;AAC9B;AACJ,YAAM,QAAQ,KAAK,IAAI;AACvB,UAAI,MAAM,QAAQ,KAAK,GAAG;AACtB,cAAM,IAAI,IAAI,MAAM,IAAI,OAAK;AACzB,cAAI,OAAO,MAAM,YAAY,EAAE,QAAQ;AACnC,mBAAO,EAAE,OAAO,MAAM,MAAM;AAAA,UAChC,OACK;AACD,mBAAO;AAAA,UACX;AAAA,QACJ,CAAC;AAAA,MACL,WACS,OAAO,UAAU,YAAY,MAAM,QAAQ;AAChD,cAAM,IAAI,IAAI,MAAM,OAAO,MAAM,MAAM;AAAA,MAC3C,WACS,SAAS,UAAU;AACxB,YAAI,UAAU,OAAO,IAAI,MAAM,KAAK;AACpC,YAAI,WAAW,MAAM;AACjB,oBAAU;AACV,iBAAO,IAAI,MAAM,OAAO,eAAe;AACvC;AAAA,QACJ;AACA,cAAM,IAAI,IAAI;AAAA,UACV,KAAK,MAAM;AAAA,UACX;AAAA,UACA,OAAO,MAAM;AAAA,QACjB;AAAA,MACJ,OACK;AACD,cAAM,IAAI,IAAI;AAAA,MAClB;AAAA,IACJ;AACA,QAAI,YAAY;AACZ,YAAM,SAAS,CAAC,GAAG,OAAO,KAAK,CAAC,EAAE,IAAI,WAAS,MAAM,OAAO,CAAC;AAAA,IACjE;AACA,WAAO;AAAA,EACX;AAAA,EACA,UAAU;AACN,QAAI,CAAC,KAAK,YAAY;AAClB,WAAK,aAAa,IAAI,MAAM,MAAM,KAAK,kBAAkB,CAAC;AAAA,IAC9D;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,SAAS,cAAc,WAAW;AAC9B,QAAI,YAAY;AACZ,oBAAc,YAAY;AAC9B,QAAI,SAAS;AACb,gBAAY,MAAM,OAAK;AACnB,gBAAU;AAAA,IACd,CAAC;AACD,WAAO;AAAA,EACX;AAAA,EACA,KAAK,QAAQ,MAAM,MAAM;AACrB,UAAM,OAAO,EAAE,MAAM,KAAK;AAC1B,eAAW,KAAK;AACZ,WAAK,CAAC,IAAI,KAAK,CAAC;AACpB,WAAO,OAAO,KAAK,MAAM,IAAI;AAAA,EACjC;AAAA,EACA,IAAI,UAAU;AACV,WAAO;AAAA,EACX;AACJ;;;ACzXO,IAAM,UAAN,cAAsB,KAAK;AAAA,EADlC,OACkC;AAAA;AAAA;AAAA,EAC9B,YAAY,UAAU;AAClB,UAAM,QAAQ;AACd,SAAK,OAAO;AAAA,EAChB;AACJ;;;ACLO,IAAM,cAAN,cAA0B,KAAK;AAAA,EADtC,OACsC;AAAA;AAAA;AAAA,EAClC,YAAY,UAAU;AAClB,QAAI,YACA,OAAO,SAAS,UAAU,eAC1B,OAAO,SAAS,UAAU,UAAU;AACpC,iBAAW,EAAE,GAAG,UAAU,OAAO,OAAO,SAAS,KAAK,EAAE;AAAA,IAC5D;AACA,UAAM,QAAQ;AACd,SAAK,OAAO;AAAA,EAChB;AAAA,EACA,IAAI,WAAW;AACX,WAAO,KAAK,KAAK,WAAW,IAAI,KAAK,KAAK,KAAK,CAAC,MAAM;AAAA,EAC1D;AACJ;;;ACVA,IAAI;AAAJ,IAAY;AAAZ,IAAmB;AAAnB,IAAyB;AACzB,SAAS,YAAY,OAAO;AACxB,SAAO,MAAM,IAAI,OAAK;AAClB,QAAI,EAAE;AACF,QAAE,QAAQ,YAAY,EAAE,KAAK;AACjC,WAAO,EAAE;AACT,WAAO;AAAA,EACX,CAAC;AACL;AAPS;AAQT,SAAS,cAAc,MAAM;AACzB,OAAK,OAAO,IAAI;AAChB,MAAI,KAAK,QAAQ,OAAO;AACpB,eAAW,KAAK,KAAK,QAAQ,OAAO;AAChC,oBAAc,CAAC;AAAA,IACnB;AAAA,EACJ;AACJ;AAPS;AAQF,IAAM,YAAN,MAAM,mBAAkB,KAAK;AAAA,EArBpC,OAqBoC;AAAA;AAAA;AAAA,EAChC,UAAU,UAAU;AAChB,eAAW,SAAS,UAAU;AAC1B,YAAM,QAAQ,KAAK,UAAU,OAAO,KAAK,IAAI;AAC7C,iBAAW,QAAQ;AACf,aAAK,QAAQ,MAAM,KAAK,IAAI;AAAA,IACpC;AACA,SAAK,UAAU;AACf,WAAO;AAAA,EACX;AAAA,EACA,UAAU,aAAa;AACnB,UAAM,UAAU,WAAW;AAC3B,QAAI,KAAK,OAAO;AACZ,iBAAW,QAAQ,KAAK;AACpB,aAAK,UAAU,WAAW;AAAA,IAClC;AAAA,EACJ;AAAA,EACA,KAAK,UAAU;AACX,QAAI,CAAC,KAAK,QAAQ;AACd,aAAO;AACX,UAAM,WAAW,KAAK,YAAY;AAClC,QAAI,OAAO;AACX,WAAO,KAAK,QAAQ,QAAQ,IAAI,KAAK,QAAQ,MAAM,QAAQ;AACvD,cAAQ,KAAK,QAAQ,QAAQ;AAC7B,eAAS,SAAS,KAAK,QAAQ,MAAM,KAAK,GAAG,KAAK;AAClD,UAAI,WAAW;AACX;AACJ,WAAK,QAAQ,QAAQ,KAAK;AAAA,IAC9B;AACA,WAAO,KAAK,QAAQ,QAAQ;AAC5B,WAAO;AAAA,EACX;AAAA,EACA,MAAM,WAAW;AACb,WAAO,KAAK,MAAM,MAAM,SAAS;AAAA,EACrC;AAAA,EACA,cAAc;AACV,QAAI,CAAC,KAAK;AACN,WAAK,WAAW;AACpB,QAAI,CAAC,KAAK;AACN,WAAK,UAAU,CAAC;AACpB,SAAK,YAAY;AACjB,UAAM,WAAW,KAAK;AACtB,SAAK,QAAQ,QAAQ,IAAI;AACzB,WAAO;AAAA,EACX;AAAA,EACA,oBAAoB;AAChB,WAAO;AAAA,MACH,IAAI,MAAM,MAAM;AACZ,YAAI,SAAS,WAAW;AACpB,iBAAO;AAAA,QACX,WACS,CAAC,KAAK,IAAI,GAAG;AAClB,iBAAO,KAAK,IAAI;AAAA,QACpB,WACS,SAAS,UACb,OAAO,SAAS,YAAY,KAAK,WAAW,MAAM,GAAI;AACvD,iBAAO,IAAI,SAAS;AAChB,mBAAO,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,OAAK;AAC/B,kBAAI,OAAO,MAAM,YAAY;AACzB,uBAAO,CAAC,OAAO,UAAU,EAAE,MAAM,QAAQ,GAAG,KAAK;AAAA,cACrD,OACK;AACD,uBAAO;AAAA,cACX;AAAA,YACJ,CAAC,CAAC;AAAA,UACN;AAAA,QACJ,WACS,SAAS,WAAW,SAAS,QAAQ;AAC1C,iBAAO,QAAM;AACT,mBAAO,KAAK,IAAI,EAAE,CAAC,UAAU,UAAU,GAAG,MAAM,QAAQ,GAAG,GAAG,KAAK,CAAC;AAAA,UACxE;AAAA,QACJ,WACS,SAAS,QAAQ;AACtB,iBAAO,MAAM,KAAK,KAAK,EAAE,QAAQ;AAAA,QACrC,WACS,SAAS,SAAS;AACvB,iBAAO,KAAK,MAAM,IAAI,OAAK,EAAE,QAAQ,CAAC;AAAA,QAC1C,WACS,SAAS,WAAW,SAAS,QAAQ;AAC1C,iBAAO,KAAK,IAAI,EAAE,QAAQ;AAAA,QAC9B,OACK;AACD,iBAAO,KAAK,IAAI;AAAA,QACpB;AAAA,MACJ;AAAA,MACA,IAAI,MAAM,MAAM,OAAO;AACnB,YAAI,KAAK,IAAI,MAAM;AACf,iBAAO;AACX,aAAK,IAAI,IAAI;AACb,YAAI,SAAS,UAAU,SAAS,YAAY,SAAS,YAAY;AAC7D,eAAK,UAAU;AAAA,QACnB;AACA,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,MAAM,OAAO;AACT,QAAI,OAAO,UAAU;AACjB,aAAO;AACX,QAAI,MAAM;AACN,cAAQ,MAAM;AAClB,WAAO,KAAK,QAAQ,MAAM,QAAQ,KAAK;AAAA,EAC3C;AAAA,EACA,YAAY,OAAO,KAAK;AACpB,QAAI,aAAa,KAAK,MAAM,KAAK;AACjC,UAAM,QAAQ,KAAK,UAAU,KAAK,KAAK,QAAQ,MAAM,UAAU,CAAC,EAAE,QAAQ;AAC1E,iBAAa,KAAK,MAAM,KAAK;AAC7B,eAAW,QAAQ;AACf,WAAK,QAAQ,MAAM,OAAO,aAAa,GAAG,GAAG,IAAI;AACrD,QAAI;AACJ,eAAW,MAAM,KAAK,SAAS;AAC3B,cAAQ,KAAK,QAAQ,EAAE;AACvB,UAAI,aAAa,OAAO;AACpB,aAAK,QAAQ,EAAE,IAAI,QAAQ,MAAM;AAAA,MACrC;AAAA,IACJ;AACA,SAAK,UAAU;AACf,WAAO;AAAA,EACX;AAAA,EACA,aAAa,OAAO,KAAK;AACrB,QAAI,aAAa,KAAK,MAAM,KAAK;AACjC,UAAM,OAAO,eAAe,IAAI,YAAY;AAC5C,UAAM,QAAQ,KAAK,UAAU,KAAK,KAAK,QAAQ,MAAM,UAAU,GAAG,IAAI,EAAE,QAAQ;AAChF,iBAAa,KAAK,MAAM,KAAK;AAC7B,eAAW,QAAQ;AACf,WAAK,QAAQ,MAAM,OAAO,YAAY,GAAG,IAAI;AACjD,QAAI;AACJ,eAAW,MAAM,KAAK,SAAS;AAC3B,cAAQ,KAAK,QAAQ,EAAE;AACvB,UAAI,cAAc,OAAO;AACrB,aAAK,QAAQ,EAAE,IAAI,QAAQ,MAAM;AAAA,MACrC;AAAA,IACJ;AACA,SAAK,UAAU;AACf,WAAO;AAAA,EACX;AAAA,EACA,UAAU,OAAO,QAAQ;AACrB,QAAI,OAAO,UAAU,UAAU;AAC3B,cAAQ,YAAY,MAAM,KAAK,EAAE,KAAK;AAAA,IAC1C,WACS,OAAO,UAAU,aAAa;AACnC,cAAQ,CAAC;AAAA,IACb,WACS,MAAM,QAAQ,KAAK,GAAG;AAC3B,cAAQ,MAAM,MAAM,CAAC;AACrB,iBAAW,KAAK,OAAO;AACnB,YAAI,EAAE;AACF,YAAE,OAAO,YAAY,GAAG,QAAQ;AAAA,MACxC;AAAA,IACJ,WACS,MAAM,SAAS,UAAU,KAAK,SAAS,YAAY;AACxD,cAAQ,MAAM,MAAM,MAAM,CAAC;AAC3B,iBAAW,KAAK,OAAO;AACnB,YAAI,EAAE;AACF,YAAE,OAAO,YAAY,GAAG,QAAQ;AAAA,MACxC;AAAA,IACJ,WACS,MAAM,MAAM;AACjB,cAAQ,CAAC,KAAK;AAAA,IAClB,WACS,MAAM,MAAM;AACjB,UAAI,OAAO,MAAM,UAAU,aAAa;AACpC,cAAM,IAAI,MAAM,wCAAwC;AAAA,MAC5D,WACS,OAAO,MAAM,UAAU,UAAU;AACtC,cAAM,QAAQ,OAAO,MAAM,KAAK;AAAA,MACpC;AACA,cAAQ,CAAC,IAAI,YAAY,KAAK,CAAC;AAAA,IACnC,WACS,MAAM,YAAY,MAAM,WAAW;AACxC,cAAQ,CAAC,IAAI,KAAK,KAAK,CAAC;AAAA,IAC5B,WACS,MAAM,MAAM;AACjB,cAAQ,CAAC,IAAI,OAAO,KAAK,CAAC;AAAA,IAC9B,WACS,MAAM,MAAM;AACjB,cAAQ,CAAC,IAAI,QAAQ,KAAK,CAAC;AAAA,IAC/B,OACK;AACD,YAAM,IAAI,MAAM,oCAAoC;AAAA,IACxD;AACA,UAAM,YAAY,MAAM,IAAI,OAAK;AAE7B,UAAI,CAAC,EAAE,EAAE;AACL,mBAAU,QAAQ,CAAC;AACvB,UAAI,EAAE;AACN,UAAI,EAAE;AACF,UAAE,OAAO,YAAY,CAAC;AAC1B,UAAI,EAAE,OAAO;AACT,sBAAc,CAAC;AACnB,UAAI,CAAC,EAAE;AACH,UAAE,OAAO,CAAC;AACd,UAAI,OAAO,EAAE,KAAK,WAAW,aAAa;AACtC,YAAI,UAAU,OAAO,OAAO,KAAK,WAAW,aAAa;AACrD,YAAE,KAAK,SAAS,OAAO,KAAK,OAAO,QAAQ,OAAO,EAAE;AAAA,QACxD;AAAA,MACJ;AACA,QAAE,SAAS,KAAK;AAChB,aAAO;AAAA,IACX,CAAC;AACD,WAAO;AAAA,EACX;AAAA,EACA,WAAW,UAAU;AACjB,eAAW,SAAS,QAAQ;AAC5B,eAAW,SAAS,UAAU;AAC1B,YAAM,QAAQ,KAAK,UAAU,OAAO,KAAK,OAAO,SAAS,EAAE,QAAQ;AACnE,iBAAW,QAAQ;AACf,aAAK,QAAQ,MAAM,QAAQ,IAAI;AACnC,iBAAW,MAAM,KAAK,SAAS;AAC3B,aAAK,QAAQ,EAAE,IAAI,KAAK,QAAQ,EAAE,IAAI,MAAM;AAAA,MAChD;AAAA,IACJ;AACA,SAAK,UAAU;AACf,WAAO;AAAA,EACX;AAAA,EACA,KAAK,OAAO;AACR,UAAM,SAAS;AACf,SAAK,QAAQ,MAAM,KAAK,KAAK;AAC7B,WAAO;AAAA,EACX;AAAA,EACA,YAAY;AACR,eAAW,QAAQ,KAAK,QAAQ;AAC5B,WAAK,SAAS;AAClB,SAAK,QAAQ,QAAQ,CAAC;AACtB,SAAK,UAAU;AACf,WAAO;AAAA,EACX;AAAA,EACA,YAAY,OAAO;AACf,YAAQ,KAAK,MAAM,KAAK;AACxB,SAAK,QAAQ,MAAM,KAAK,EAAE,SAAS;AACnC,SAAK,QAAQ,MAAM,OAAO,OAAO,CAAC;AAClC,QAAI;AACJ,eAAW,MAAM,KAAK,SAAS;AAC3B,cAAQ,KAAK,QAAQ,EAAE;AACvB,UAAI,SAAS,OAAO;AAChB,aAAK,QAAQ,EAAE,IAAI,QAAQ;AAAA,MAC/B;AAAA,IACJ;AACA,SAAK,UAAU;AACf,WAAO;AAAA,EACX;AAAA,EACA,cAAc,SAAS,MAAM,UAAU;AACnC,QAAI,CAAC,UAAU;AACX,iBAAW;AACX,aAAO,CAAC;AAAA,IACZ;AACA,SAAK,UAAU,UAAQ;AACnB,UAAI,KAAK,SAAS,CAAC,KAAK,MAAM,SAAS,KAAK,IAAI;AAC5C;AACJ,UAAI,KAAK,QAAQ,CAAC,KAAK,MAAM,SAAS,KAAK,IAAI;AAC3C;AACJ,WAAK,QAAQ,KAAK,MAAM,QAAQ,SAAS,QAAQ;AAAA,IACrD,CAAC;AACD,SAAK,UAAU;AACf,WAAO;AAAA,EACX;AAAA,EACA,KAAK,WAAW;AACZ,WAAO,KAAK,MAAM,KAAK,SAAS;AAAA,EACpC;AAAA,EACA,KAAK,UAAU;AACX,WAAO,KAAK,KAAK,CAAC,OAAO,MAAM;AAC3B,UAAI;AACJ,UAAI;AACA,iBAAS,SAAS,OAAO,CAAC;AAAA,MAC9B,SACO,GAAG;AACN,cAAM,MAAM,WAAW,CAAC;AAAA,MAC5B;AACA,UAAI,WAAW,SAAS,MAAM,MAAM;AAChC,iBAAS,MAAM,KAAK,QAAQ;AAAA,MAChC;AACA,aAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA,EACA,YAAY,MAAM,UAAU;AACxB,QAAI,CAAC,UAAU;AACX,iBAAW;AACX,aAAO,KAAK,KAAK,CAAC,OAAO,MAAM;AAC3B,YAAI,MAAM,SAAS,UAAU;AACzB,iBAAO,SAAS,OAAO,CAAC;AAAA,QAC5B;AAAA,MACJ,CAAC;AAAA,IACL;AACA,QAAI,gBAAgB,QAAQ;AACxB,aAAO,KAAK,KAAK,CAAC,OAAO,MAAM;AAC3B,YAAI,MAAM,SAAS,YAAY,KAAK,KAAK,MAAM,IAAI,GAAG;AAClD,iBAAO,SAAS,OAAO,CAAC;AAAA,QAC5B;AAAA,MACJ,CAAC;AAAA,IACL;AACA,WAAO,KAAK,KAAK,CAAC,OAAO,MAAM;AAC3B,UAAI,MAAM,SAAS,YAAY,MAAM,SAAS,MAAM;AAChD,eAAO,SAAS,OAAO,CAAC;AAAA,MAC5B;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,aAAa,UAAU;AACnB,WAAO,KAAK,KAAK,CAAC,OAAO,MAAM;AAC3B,UAAI,MAAM,SAAS,WAAW;AAC1B,eAAO,SAAS,OAAO,CAAC;AAAA,MAC5B;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,UAAU,MAAM,UAAU;AACtB,QAAI,CAAC,UAAU;AACX,iBAAW;AACX,aAAO,KAAK,KAAK,CAAC,OAAO,MAAM;AAC3B,YAAI,MAAM,SAAS,QAAQ;AACvB,iBAAO,SAAS,OAAO,CAAC;AAAA,QAC5B;AAAA,MACJ,CAAC;AAAA,IACL;AACA,QAAI,gBAAgB,QAAQ;AACxB,aAAO,KAAK,KAAK,CAAC,OAAO,MAAM;AAC3B,YAAI,MAAM,SAAS,UAAU,KAAK,KAAK,MAAM,IAAI,GAAG;AAChD,iBAAO,SAAS,OAAO,CAAC;AAAA,QAC5B;AAAA,MACJ,CAAC;AAAA,IACL;AACA,WAAO,KAAK,KAAK,CAAC,OAAO,MAAM;AAC3B,UAAI,MAAM,SAAS,UAAU,MAAM,SAAS,MAAM;AAC9C,eAAO,SAAS,OAAO,CAAC;AAAA,MAC5B;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,UAAU,UAAU,UAAU;AAC1B,QAAI,CAAC,UAAU;AACX,iBAAW;AACX,aAAO,KAAK,KAAK,CAAC,OAAO,MAAM;AAC3B,YAAI,MAAM,SAAS,QAAQ;AACvB,iBAAO,SAAS,OAAO,CAAC;AAAA,QAC5B;AAAA,MACJ,CAAC;AAAA,IACL;AACA,QAAI,oBAAoB,QAAQ;AAC5B,aAAO,KAAK,KAAK,CAAC,OAAO,MAAM;AAC3B,YAAI,MAAM,SAAS,UAAU,SAAS,KAAK,MAAM,QAAQ,GAAG;AACxD,iBAAO,SAAS,OAAO,CAAC;AAAA,QAC5B;AAAA,MACJ,CAAC;AAAA,IACL;AACA,WAAO,KAAK,KAAK,CAAC,OAAO,MAAM;AAC3B,UAAI,MAAM,SAAS,UAAU,MAAM,aAAa,UAAU;AACtD,eAAO,SAAS,OAAO,CAAC;AAAA,MAC5B;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,IAAI,QAAQ;AACR,QAAI,CAAC,KAAK,QAAQ;AACd,aAAO;AACX,WAAO,KAAK,QAAQ,MAAM,CAAC;AAAA,EAC/B;AAAA,EACA,IAAI,OAAO;AACP,QAAI,CAAC,KAAK,QAAQ;AACd,aAAO;AACX,WAAO,KAAK,QAAQ,MAAM,KAAK,QAAQ,MAAM,SAAS,CAAC;AAAA,EAC3D;AACJ;AACA,UAAU,gBAAgB,eAAa;AACnC,UAAQ;AACZ;AACA,UAAU,eAAe,eAAa;AAClC,SAAO;AACX;AACA,UAAU,iBAAiB,eAAa;AACpC,WAAS;AACb;AACA,UAAU,eAAe,eAAa;AAClC,SAAO;AACX;AAEA,UAAU,UAAU,UAAQ;AACxB,MAAI,KAAK,SAAS,UAAU;AACxB,WAAO,eAAe,MAAM,OAAO,SAAS;AAAA,EAChD,WACS,KAAK,SAAS,QAAQ;AAC3B,WAAO,eAAe,MAAM,KAAK,SAAS;AAAA,EAC9C,WACS,KAAK,SAAS,QAAQ;AAC3B,WAAO,eAAe,MAAM,YAAY,SAAS;AAAA,EACrD,WACS,KAAK,SAAS,WAAW;AAC9B,WAAO,eAAe,MAAM,QAAQ,SAAS;AAAA,EACjD,WACS,KAAK,SAAS,QAAQ;AAC3B,WAAO,eAAe,MAAM,KAAK,SAAS;AAAA,EAC9C;AACA,OAAK,EAAE,IAAI;AACX,MAAI,KAAK,OAAO;AACZ,SAAK,MAAM,QAAQ,WAAS;AACxB,gBAAU,QAAQ,KAAK;AAAA,IAC3B,CAAC;AAAA,EACL;AACJ;",
  "names": []
}
